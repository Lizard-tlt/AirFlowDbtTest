{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.6", "generated_at": "2023-08-17T07:23:22.758652Z", "invocation_id": "58c74914-dad7-4a52-bb71-705300f0f6fe", "env": {}, "project_id": "02e9444dde188e3ce3336101478958d7", "user_id": "6ac6ca94-4fd0-4a99-af3a-9dd44cee9e3d", "send_anonymous_usage_stats": true, "adapter_type": "clickhouse"}, "nodes": {"model.gulliver.goods_movement_income": {"database": null, "schema": "db1", "name": "goods_movement_income", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_income.sql", "original_file_path": "models\\goods_movement_income.sql", "unique_id": "model.gulliver.goods_movement_income", "fqn": ["gulliver", "goods_movement_income"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_income", "checksum": {"name": "sha256", "checksum": "92675a80f1156bd164bcbd0df29cfe88e7d76fd999206ce2b3392885d062b7a4"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_income", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_income.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_income"}, "created_at": 1692256681.8212967, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_income", "raw_code": "/*\r\n\trrGoodsMovementIncome - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_income\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementIncome d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_income.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementIncome - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementIncome d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_incomegoods": {"database": null, "schema": "db1", "name": "goods_movement_incomegoods", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_incomegoods.sql", "original_file_path": "models\\goods_movement_incomegoods.sql", "unique_id": "model.gulliver.goods_movement_incomegoods", "fqn": ["gulliver", "goods_movement_incomegoods"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_incomegoods", "checksum": {"name": "sha256", "checksum": "f30efa78102b32fd87904c63c9798ebd0344a6a9be1768a7fb2ac507dfca9492"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_incomegoods", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_incomegoods.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_incomegoods"}, "created_at": 1692256681.8569374, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_incomegoods", "raw_code": "/*\r\n\trrGoodsMovementIncomeGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_incomegoods\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementIncomeGoods d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_incomegoods.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementIncomeGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementIncomeGoods d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_outgo": {"database": null, "schema": "db1", "name": "goods_movement_outgo", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_outgo.sql", "original_file_path": "models\\goods_movement_outgo.sql", "unique_id": "model.gulliver.goods_movement_outgo", "fqn": ["gulliver", "goods_movement_outgo"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgo", "checksum": {"name": "sha256", "checksum": "4551b8d7d5f528bdf5381fa6aec1c42d13eda88e1ca01e582703a9f3489da25e"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_outgo", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_outgo.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_outgo"}, "created_at": 1692256681.8695338, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgo", "raw_code": "/*\r\n\trrGoodsMovementOutgo - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_outgo\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementOutgo d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_outgo.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementOutgo - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementOutgo d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_outgogoods": {"database": null, "schema": "db1", "name": "goods_movement_outgogoods", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_outgogoods.sql", "original_file_path": "models\\goods_movement_outgogoods.sql", "unique_id": "model.gulliver.goods_movement_outgogoods", "fqn": ["gulliver", "goods_movement_outgogoods"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgogoods", "checksum": {"name": "sha256", "checksum": "cc8022f39edcb52932225020e7d2467cdcfaa6d65ffbd5acdd3f11a00d63d9ea"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_outgogoods", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_outgogoods.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_outgogoods"}, "created_at": 1692256681.880715, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgogoods", "raw_code": "/*\r\n\trrGoodsMovementOutgoGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_outgogoods\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementOutgoGoods d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_outgogoods.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementOutgoGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementOutgoGoods d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_outgoodschange": {"database": null, "schema": "db1", "name": "goods_movement_outgoodschange", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_outgoodschange.sql", "original_file_path": "models\\goods_movement_outgoodschange.sql", "unique_id": "model.gulliver.goods_movement_outgoodschange", "fqn": ["gulliver", "goods_movement_outgoodschange"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgoodschange", "checksum": {"name": "sha256", "checksum": "e8b48dd016f113914e8a6dfb9a49c60bf367eae5f3f698977d2378d008d66cf3"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_outgoodschange", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_outgoodschange.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_outgoodschange"}, "created_at": 1692256681.8872914, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_outgoodschange", "raw_code": "/*\r\n\trrGoodsMovementOutGoodsChange - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_outgoodschange\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementOutGoodsChange d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_outgoodschange.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementOutGoodsChange - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementOutGoodsChange d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_relationgoods": {"database": null, "schema": "db1", "name": "goods_movement_relationgoods", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_relationgoods.sql", "original_file_path": "models\\goods_movement_relationgoods.sql", "unique_id": "model.gulliver.goods_movement_relationgoods", "fqn": ["gulliver", "goods_movement_relationgoods"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_relationgoods", "checksum": {"name": "sha256", "checksum": "fe0096e79549938634e29b8508e154f907051dfea9157e4d1d1fa9728a85fbb7"}, "config": {"enabled": true, "alias": "dbt_temp_goods_movement_relationgoods", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_relationgoods.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_goods_movement_relationgoods"}, "created_at": 1692256681.902982, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_goods_movement_relationgoods", "raw_code": "/*\r\n\trrGoodsMovementRelationGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_goods_movement_relationgoods\") }}\r\n\r\nSELECT d.*\r\n  FROM rrGoodsMovementRelationGoods d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_relationgoods.sql", "compiled": true, "compiled_code": "/*\n\trrGoodsMovementRelationGoods - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrGoodsMovementRelationGoods d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.goods_movement_type1": {"database": null, "schema": "db1", "name": "goods_movement_type1", "resource_type": "model", "package_name": "gulliver", "path": "goods_movement_type1.sql", "original_file_path": "models\\goods_movement_type1.sql", "unique_id": "model.gulliver.goods_movement_type1", "fqn": ["gulliver", "goods_movement_type1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_type1", "checksum": {"name": "sha256", "checksum": "82278934513c3cd38e2c13f5c04555164faf634d7e39a7d8b5844e8bf903534e"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_type1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\goods_movement_type1.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_type1"}, "created_at": 1692256681.918136, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_type1", "raw_code": "/*\r\n    rrMasterDataType1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_type1\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataType1 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\goods_movement_type1.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataType1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataType1 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_agreement": {"database": null, "schema": "db1", "name": "master_data_agreement", "resource_type": "model", "package_name": "gulliver", "path": "master_data_agreement.sql", "original_file_path": "models\\master_data_agreement.sql", "unique_id": "model.gulliver.master_data_agreement", "fqn": ["gulliver", "master_data_agreement"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_agreement", "checksum": {"name": "sha256", "checksum": "231d60d63d4f27855e6e8e1c87805c30f6791ca599f304571c2a431c314a3c50"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_agreement", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_agreement.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_agreement"}, "created_at": 1692256681.9206557, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_agreement", "raw_code": "/*\r\n    rrMasterDataAgreement - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_agreement\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataDivision d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_agreement.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataAgreement - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataDivision d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_assortment": {"database": null, "schema": "db1", "name": "master_data_assortment", "resource_type": "model", "package_name": "gulliver", "path": "master_data_assortment.sql", "original_file_path": "models\\master_data_assortment.sql", "unique_id": "model.gulliver.master_data_assortment", "fqn": ["gulliver", "master_data_assortment"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_assortment", "checksum": {"name": "sha256", "checksum": "938406291ab7d510f006e3d6bc1a5a17e062dd94784b0be5177ae6fabcb851e0"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_assortment", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_assortment.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_assortment"}, "created_at": 1692256681.9410367, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_assortment", "raw_code": "/*\r\n\trrMasterDataAssortment - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_master_data_assortment\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataAssortment d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_assortment.sql", "compiled": true, "compiled_code": "/*\n\trrMasterDataAssortment - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataAssortment d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_contractor": {"database": null, "schema": "db1", "name": "master_data_contractor", "resource_type": "model", "package_name": "gulliver", "path": "master_data_contractor.sql", "original_file_path": "models\\master_data_contractor.sql", "unique_id": "model.gulliver.master_data_contractor", "fqn": ["gulliver", "master_data_contractor"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Contractor", "checksum": {"name": "sha256", "checksum": "d7b6331b1d6dd5c690d20a14409746fbfbb276e00cf405bf5a9404cbb5ad5ceb"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Contractor", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_contractor.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Contractor"}, "created_at": 1692256681.951072, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Contractor", "raw_code": "/*\r\n    rrMasterDataContractor - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Contractor\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup1 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_contractor.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataContractor - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup1 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_division": {"database": null, "schema": "db1", "name": "master_data_division", "resource_type": "model", "package_name": "gulliver", "path": "master_data_division.sql", "original_file_path": "models\\master_data_division.sql", "unique_id": "model.gulliver.master_data_division", "fqn": ["gulliver", "master_data_division"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division", "checksum": {"name": "sha256", "checksum": "725188d3d0776eb2f9fd7a242f47b3f7ac526b7882ae975f9cdf52eb491e3b54"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_division", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_division.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_division"}, "created_at": 1692256681.9631522, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division", "raw_code": "/*\r\n    rrMasterDataDivision - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_division\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataDivision d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_division.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataDivision - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataDivision d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_divisionaddparam": {"database": null, "schema": "db1", "name": "master_data_divisionaddparam", "resource_type": "model", "package_name": "gulliver", "path": "master_data_divisionaddparam.sql", "original_file_path": "models\\master_data_divisionaddparam.sql", "unique_id": "model.gulliver.master_data_divisionaddparam", "fqn": ["gulliver", "master_data_divisionaddparam"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_divisionaddparam", "checksum": {"name": "sha256", "checksum": "f348d4786d9ab4e3897e53661c316f4a80079b3623b4333b3e2efe5744a1b736"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_divisionaddparam", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_divisionaddparam.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_divisionaddparam"}, "created_at": 1692256681.969215, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_divisionaddparam", "raw_code": "/*\r\n\trrMasterDataDivisionAddParam - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table',alias=\"dbt_temp_master_data_divisionaddparam\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataDivisionAddParam d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_divisionaddparam.sql", "compiled": true, "compiled_code": "/*\n\trrMasterDataDivisionAddParam - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataDivisionAddParam d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_division_group1": {"database": null, "schema": "db1", "name": "master_data_division_group1", "resource_type": "model", "package_name": "gulliver", "path": "master_data_division_group1.sql", "original_file_path": "models\\master_data_division_group1.sql", "unique_id": "model.gulliver.master_data_division_group1", "fqn": ["gulliver", "master_data_division_group1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_group1", "checksum": {"name": "sha256", "checksum": "e285ba602c0fd46a81f7d6e6bcccf42d08ad3ea01d15c01635d8634910a80e64"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_division_group1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_division_group1.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_division_group1"}, "created_at": 1692256681.9822948, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_group1", "raw_code": "/*\r\n    rrMasterDataDivisionGroup1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_division_group1\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataDivisionGroup1 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_division_group1.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataDivisionGroup1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataDivisionGroup1 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_division_group2": {"database": null, "schema": "db1", "name": "master_data_division_group2", "resource_type": "model", "package_name": "gulliver", "path": "master_data_division_group2.sql", "original_file_path": "models\\master_data_division_group2.sql", "unique_id": "model.gulliver.master_data_division_group2", "fqn": ["gulliver", "master_data_division_group2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_group2", "checksum": {"name": "sha256", "checksum": "fce84d5be14db563308ed78cc84c7b3d54ab210c129872af069fd9a303176986"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_division_group2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_division_group2.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_division_group2"}, "created_at": 1692256681.993853, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_group2", "raw_code": "/*\r\n    rrMasterDataDivisionGroup2 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_division_group2\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataDivisionGroup2 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_division_group2.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataDivisionGroup2 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataDivisionGroup2 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_division_placement": {"database": null, "schema": "db1", "name": "master_data_division_placement", "resource_type": "model", "package_name": "gulliver", "path": "master_data_division_placement.sql", "original_file_path": "models\\master_data_division_placement.sql", "unique_id": "model.gulliver.master_data_division_placement", "fqn": ["gulliver", "master_data_division_placement"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_placement", "checksum": {"name": "sha256", "checksum": "4fcc318673708d585addcc2132818a1ad4c9b737f98298979d7695923df5c18f"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_division_placement", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_division_placement.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_division_placement"}, "created_at": 1692256681.998392, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_division_placement", "raw_code": "/*\r\n    rrMasterDataDivisionPlacement- \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_division_placement\") }}\r\n\r\nSELECT * FROM rrMasterDataDivisionPlacement\r\n WHERE isDefault = 1\r\n   AND date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_division_placement.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataDivisionPlacement- \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT * FROM rrMasterDataDivisionPlacement\n WHERE isDefault = 1\n   AND date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31')", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_federaldistrict": {"database": null, "schema": "db1", "name": "master_data_federaldistrict", "resource_type": "model", "package_name": "gulliver", "path": "master_data_federaldistrict.sql", "original_file_path": "models\\master_data_federaldistrict.sql", "unique_id": "model.gulliver.master_data_federaldistrict", "fqn": ["gulliver", "master_data_federaldistrict"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_federaldistrict", "checksum": {"name": "sha256", "checksum": "0f12374a4cb8088b2f942a4e790a7a7b05a623a49c95bc5d88d11b8f74b05ed3"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_federaldistrict", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_federaldistrict.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_federaldistrict"}, "created_at": 1692256682.013771, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_federaldistrict", "raw_code": "/*\r\n    rrMasterDataFederalDistrict - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_federaldistrict\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataFederalDistrict d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_federaldistrict.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataFederalDistrict - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataFederalDistrict d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_group1": {"database": null, "schema": "db1", "name": "master_data_group1", "resource_type": "model", "package_name": "gulliver", "path": "master_data_group1.sql", "original_file_path": "models\\master_data_group1.sql", "unique_id": "model.gulliver.master_data_group1", "fqn": ["gulliver", "master_data_group1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group1", "checksum": {"name": "sha256", "checksum": "594e435d9268634935179a00471dd0915636174963ee7b7f845a1e597c6ed5fb"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Group1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_group1.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Group1"}, "created_at": 1692256682.025281, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group1", "raw_code": "/*\r\n    rrMasterDataGroup1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Group1\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup1 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_group1.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataGroup1 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup1 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_group2": {"database": null, "schema": "db1", "name": "master_data_group2", "resource_type": "model", "package_name": "gulliver", "path": "master_data_group2.sql", "original_file_path": "models\\master_data_group2.sql", "unique_id": "model.gulliver.master_data_group2", "fqn": ["gulliver", "master_data_group2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group2", "checksum": {"name": "sha256", "checksum": "f7534aae756f3069fff4f96b67d3b2c2d347a0929bd37bbc888520bb09498fff"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Group2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_group2.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Group2"}, "created_at": 1692256682.0298495, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group2", "raw_code": "/*\r\n    rrMasterDataGroup2 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Group2\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup2 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_group2.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataGroup2 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup2 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_group3": {"database": null, "schema": "db1", "name": "master_data_group3", "resource_type": "model", "package_name": "gulliver", "path": "master_data_group3.sql", "original_file_path": "models\\master_data_group3.sql", "unique_id": "model.gulliver.master_data_group3", "fqn": ["gulliver", "master_data_group3"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group3", "checksum": {"name": "sha256", "checksum": "86ca80a48795d37ac577ff49354ab3661aa55455a53cda37a503764c6604777b"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Group3", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_group3.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Group3"}, "created_at": 1692256682.0418854, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group3", "raw_code": "/*\r\n    rrMasterDataGroup3 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Group3\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup3 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_group3.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataGroup3 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup3 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_group4": {"database": null, "schema": "db1", "name": "master_data_group4", "resource_type": "model", "package_name": "gulliver", "path": "master_data_group4.sql", "original_file_path": "models\\master_data_group4.sql", "unique_id": "model.gulliver.master_data_group4", "fqn": ["gulliver", "master_data_group4"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group4", "checksum": {"name": "sha256", "checksum": "244b5260ae80964d673acfce70a31461b2f1e3d3b3d7427a4c465e75011cfb33"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Group4", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_group4.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Group4"}, "created_at": 1692256682.047442, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group4", "raw_code": "/*\r\n    rrMasterDataGroup4 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Group4\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup4 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_group4.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataGroup4 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup4 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.master_data_group5": {"database": null, "schema": "db1", "name": "master_data_group5", "resource_type": "model", "package_name": "gulliver", "path": "master_data_group5.sql", "original_file_path": "models\\master_data_group5.sql", "unique_id": "model.gulliver.master_data_group5", "fqn": ["gulliver", "master_data_group5"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group5", "checksum": {"name": "sha256", "checksum": "cc6653fe4addb37566ac460de6b7ffd23ec97936a79743d2f683224614bed073"}, "config": {"enabled": true, "alias": "dbt_temp_master_data_Group5", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\master_data_group5.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_master_data_Group5"}, "created_at": 1692256682.0660794, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_master_data_Group5", "raw_code": "/*\r\n    rrMasterDataGroup5 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_master_data_Group5\") }}\r\n\r\nSELECT d.*\r\n  FROM rrMasterDataGroup5 d\r\n WHERE d.date_active_begin <= '{{ var(\"end_date\") }}'\r\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\master_data_group5.sql", "compiled": true, "compiled_code": "/*\n    rrMasterDataGroup5 - \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0430\u043c\n*/\n\n\n\nSELECT d.*\n  FROM rrMasterDataGroup5 d\n WHERE d.date_active_begin <= '2022-12-31'\n   AND (d.date_active_end IS NULL OR d.date_active_end >= '2022-12-31' )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.cheq_and_disc_cheq": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq", "checksum": {"name": "sha256", "checksum": "47d2c8229fed49552a0f502a938ac2362dd7521a0e757983af47c18dcee2dbf9"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq"}, "created_at": 1692256682.0781586, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 1. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_Cheq\r\n*/\r\n\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq\") }}\r\n\r\nSELECT\r\n \t toUUID(s.GUID) AS ShiftGUID\r\n \t,toUUID(s.DivisionGUID) AS DivisionGUID\r\n \t,coalesce(toUUID(s.DivisionPlacementGUID), place.GUID) AS DivisionPlacementGUID\r\n \t,s.ShiftDate AS ShiftDate\r\n \t,toUUID(c.GUID) AS ChequeGUID\r\n \t,coalesce(ci.Code,0) AS CodeCheq\r\n \t,SUM(coalesce(if(c.ChequeType='ret', -1.0000, 1.0000) * ci.Qty,0)) AS Qty\r\n \t,SUM(coalesce(if(c.ChequeType='ret', -1.0000, 1.0000) * ci.Amount,0)) AS AmountWoDisc\r\n \t,s.sKey AS sKey\r\n FROM rrCashShift s\r\n JOIN rrCashCheque c ON c.ShiftGUID = s.GUID AND s.sKey = c.sKey\r\n JOIN rrCashChequeItem ci ON toUUID(ci.ChequeGUID) = toUUID(c.GUID) AND toUUID(ci.ShiftGUID) = toUUID(c.ShiftGUID) AND ci.sKey = s.sKey\r\n LEFT JOIN {{ ref('master_data_division_placement') }} place ON place.DivisionGUID = toUUID(s.DivisionGUID)\r\n WHERE c.ChequeStatus='close'\r\n   AND c.ChequeType='sale'\r\n   AND s.ShiftDate BETWEEN {{ var('start_date') }} AND {{ var('end_date') }}\r\n GROUP BY\r\n \t s.GUID\r\n \t,s.DivisionGUID\r\n \t,coalesce(toUUID(s.DivisionPlacementGUID), place.GUID)\r\n \t,s.ShiftDate\r\n \t,c.GUID\r\n \t,coalesce(ci.Code, 0)\r\n \t,s.sKey", "language": "sql", "refs": [["master_data_division_placement"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.master_data_division_placement"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_2": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_2", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_2.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_2.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_2", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_check_2", "checksum": {"name": "sha256", "checksum": "4fc3d396093d6ebe213cadbd9b3335efbafc0f51aef9b9e93ff3fa16d570a7a1"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_check_2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_check_2"}, "created_at": 1692256682.0867214, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_check_2", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 7. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_Cheq\r\n    #region \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0432\u0440\u0435\u043c\u044f\u043d\u043a\u0443 \u0441\u0432\u043e\u0434\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0439 \u043f\u043e \u0441\u043a\u0438\u0434\u043a\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_check_2\") }}\r\n\r\nSELECT c.ShiftGUID             AS ShiftGUID\r\n \t , c.DivisionGUID          AS DivisionGUID\r\n \t , c.DivisionPlacementGUID AS DivisionPlacementGUID\r\n \t , c.ShiftDate             AS ShiftDate\r\n \t , c.ChequeGUID            AS ChequeGUID\r\n \t , c.CodeCheq              AS CodeCheq\r\n \t , c.Qty                   AS Qty\r\n \t , c.AmountWoDisc          AS AmountWoDisc\r\n \t , c.sKey                  AS sKey\r\n \t , CASE\r\n \t     WHEN bch.ShiftGUID IS NOT NULL THEN bch.AmountDisc ELSE NULL\r\n \t    END                    AS AmountDiscByCheq\r\n \t , CASE\r\n \t     WHEN bcd.ShiftGUID IS NOT NULL THEN bcd.AmountDisc ELSE NULL\r\n \t    END                    AS AmountDiscByCode\r\n  FROM {{ ref('cheq_and_disc_cheq') }} c\r\n  LEFT JOIN (\r\n     SELECT ShiftGUID\r\n          , ChequeGUID\r\n          , CodeCheq\r\n          , SUM(AmountDisc) AS AmountDisc\r\n       FROM {{ ref('cheq_and_disc_disc_by_cheq') }}\r\n      GROUP BY ShiftGUID\r\n             , ChequeGUID\r\n             , CodeCheq\r\n  ) bch\r\n    ON bch.ShiftGUID  = c.ShiftGUID\r\n   AND bch.ChequeGUID = c.ChequeGUID\r\n   AND bch.CodeCheq   = c.CodeCheq\r\n  LEFT JOIN (\r\n     SELECT ShiftGUID\r\n           , ChequeGUID\r\n           , CodeCheq\r\n           , SUM(AmountDisc) AS AmountDisc\r\n        FROM {{ ref('cheq_and_disc_disc_by_code') }}\r\n       GROUP BY ShiftGUID\r\n              , ChequeGUID\r\n              , CodeCheq\r\n  ) bcd\r\n    ON bcd.ShiftGUID  = c.ShiftGUID\r\n   AND bcd.ChequeGUID = c.ChequeGUID\r\n   AND bcd.CodeCheq   = c.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_cheq"], ["cheq_and_disc_disc_by_cheq"], ["cheq_and_disc_disc_by_code"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_disc_by_code"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_disc1": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_disc1", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_disc1.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_disc1.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_disc1", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_disc1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc1", "checksum": {"name": "sha256", "checksum": "7c12476c9dc8e4a11cfb2728f1bdd800cf4574f17fbffb875d7fbf42a752fb64"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq_disc1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq_disc1"}, "created_at": 1692256682.0867214, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc1", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 2. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u0430\u043c\u0438 #CheqAndDisc_Cheqdisc\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq_disc1\") }}\r\n\r\nSELECT\r\n     toUUID(ch.ShiftGUID) ShiftGUID\r\n    ,toUUID(ch.ChequeGUID) ChequeGUID\r\n    ,d.SaleIDD SaleIDD\r\n    ,coalesce(d.Code,0) Code\r\n    ,SUM(coalesce(d.Amount,0)) Amount\r\n FROM rrCashChequeDiscount d\r\n JOIN\r\n    (SELECT DISTINCT ShiftGUID,DivisionGUID,DivisionPlacementGUID,ShiftDate,ChequeGUID, sKey\r\n        FROM {{ ref(\"cheq_and_disc_cheq\") }}) ch ON ch.ShiftGUID=d.ShiftGUID AND ch.ChequeGUID=d.ChequeGUID AND d.sKey = ch.sKey\r\n GROUP BY\r\n     ch.ShiftGUID\r\n    ,ch.DivisionGUID\r\n    ,ch.DivisionPlacementGUID\r\n    ,ch.ShiftDate\r\n    ,d.SaleIDD\r\n    ,ch.ChequeGUID\r\n    ,coalesce(d.Code,0)", "language": "sql", "refs": [["cheq_and_disc_cheq"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_disc_all": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_disc_all", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_disc_all.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_disc_all.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_disc_all", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_disc_all"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc_all", "checksum": {"name": "sha256", "checksum": "682e71bb8aa23c3d7f259b320cae516a6b884c05c5f6a7e4ee5e44dc5b471ad8"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq_disc_all", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq_disc_all"}, "created_at": 1692256682.0942585, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc_all", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 3. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u0430\u043c\u0438 #CheqAndDisc_Cheqdisc\r\n*/\r\n\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq_disc_all\") }}\r\n\r\n\r\nSELECT\r\n    d1.ShiftGUID AS ShiftGUID,\r\n    d1.ChequeGUID AS ChequeGUID,\r\n    d1.SaleIDD AS DiscIDD,\r\n    d1.Code AS CodeCheq,\r\n    toDecimal32(coalesce(d1.Amount, 0),2) AS AmountDisc\r\nFROM {{ ref(\"cheq_and_disc_cheq_disc1\") }} AS d1\r\nUNION ALL\r\nSELECT\r\n    ch.ShiftGUID AS ShiftGUID,\r\n    ch.ChequeGUID AS ChequeGUID,\r\n    14 AS DiscIDD,\r\n    0 AS CodeCheq,\r\n    toDecimal32(sum(toFloat32(coalesce(d.Value,0)) - coalesce(d1.Amount,0)),2) AS AmountDisc\r\nFROM rrCashChequeRegister AS d\r\nINNER JOIN\r\n(\r\n    SELECT DISTINCT\r\n        ShiftGUID,\r\n        DivisionGUID,\r\n        DivisionPlacementGUID,\r\n        ShiftDate,\r\n        ChequeGUID,\r\n        sKey\r\n    FROM {{ ref(\"cheq_and_disc_cheq\") }}\r\n) AS ch ON (ch.ShiftGUID = d.ShiftGUID) AND (ch.ChequeGUID = d.ChequeGUID) AND (ch.sKey = d.sKey)\r\nLEFT JOIN\r\n(\r\n    SELECT\r\n        ShiftGUID,\r\n        ChequeGUID,\r\n        sum(Amount) AS Amount\r\n    FROM {{ ref(\"cheq_and_disc_cheq_disc1\") }}\r\n    GROUP BY\r\n        ShiftGUID,\r\n        ChequeGUID\r\n) AS d1 ON (d1.ShiftGUID = ch.ShiftGUID) AND (d1.ChequeGUID = ch.ChequeGUID)\r\nWHERE d.Variable = 'DiscountAmount'\r\nGROUP BY\r\n    ch.ShiftGUID,\r\n    ch.DivisionGUID,\r\n    ch.DivisionPlacementGUID,\r\n    ch.ShiftDate,\r\n    ch.ChequeGUID", "language": "sql", "refs": [["cheq_and_disc_cheq_disc1"], ["cheq_and_disc_cheq"], ["cheq_and_disc_cheq_disc1"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq_disc1", "model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq_disc1"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_disc_all_2": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_disc_all_2", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_disc_all_2.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_disc_all_2.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_disc_all_2", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_disc_all_2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc_all_2", "checksum": {"name": "sha256", "checksum": "0f41a83ff52e44397ed739ec8c4172a982f5dc5794a2ccd7b6156dd46a066c3f"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq_disc_all_2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq_disc_all_2"}, "created_at": 1692256682.101811, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_disc_all_2", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 4. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u0430\u043c\u0438 #CheqAndDisc_Cheqdisc\r\n    #region \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043a\u0438\u0434\u043a\u0438, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043a \u0442\u043e\u0432\u0430\u0440\u0443, \u0430 \u0441\u0430\u043c\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0447\u0435\u043a\u0435 \u043d\u0435\u0442, \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0430\u043a\u0443\u044e \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u043a \u0442\u043e\u0432\u0430\u0440\u0443\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq_disc_all_2\") }}\r\n\r\n-- update\r\nSELECT ch.ShiftGUID\r\n     , ch.ChequeGUID\r\n     , ch.DiscIDD\r\n     , ch.CodeCheq\r\n     , ch.AmountDisc + COALESCE(lc.AmountDisc, 0) AS AmountDisc\r\n FROM {{ ref('cheq_and_disc_cheq_disc_all') }} ch\r\n LEFT JOIN {{ ref('cheq_and_disc_cheq_lost_codes') }} lc\r\n   ON lc.ShiftGUID  = ch.ShiftGUID\r\n  AND lc.ChequeGUID = ch.ChequeGUID\r\n  AND lc.DiscIDD    = ch.DiscIDD\r\n\r\nUNION ALL\r\n\r\n-- insert\r\nSELECT lc.ShiftGUID\r\n     , lc.ChequeGUID\r\n     , lc.DiscIDD\r\n     , 0 AS CodeCheq\r\n     , lc.AmountDisc\r\n  FROM {{ ref('cheq_and_disc_cheq_lost_codes') }} lc\r\n  LEFT JOIN {{ ref('cheq_and_disc_cheq_disc_all') }} ch\r\n    ON ch.ShiftGUID  = lc.ShiftGUID\r\n   AND ch.ChequeGUID = lc.ChequeGUID\r\n   AND ch.DiscIDD    = lc.DiscIDD\r\n   AND ch.CodeCheq   = 0\r\n WHERE ch.ShiftGUID IS NULL", "language": "sql", "refs": [["cheq_and_disc_cheq_disc_all"], ["cheq_and_disc_cheq_lost_codes"], ["cheq_and_disc_cheq_lost_codes"], ["cheq_and_disc_cheq_disc_all"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq_lost_codes", "model.gulliver.cheq_and_disc_cheq_lost_codes", "model.gulliver.cheq_and_disc_cheq_disc_all"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_lost_codes": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_lost_codes", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_lost_codes.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_lost_codes.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_lost_codes", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_lost_codes"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_lost_codes", "checksum": {"name": "sha256", "checksum": "82036cc014eaab22fc4e4bf9252818066e57ca41ac4800aff1f2e5af92e84a56"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq_lost_codes", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq_lost_codes"}, "created_at": 1692256682.107478, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_lost_codes", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 4. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 @LostCodes\r\n    #region \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043a\u0438\u0434\u043a\u0438, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043a \u0442\u043e\u0432\u0430\u0440\u0443, \u0430 \u0441\u0430\u043c\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0447\u0435\u043a\u0435 \u043d\u0435\u0442, \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u0430\u043a\u0443\u044e \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u043a \u0442\u043e\u0432\u0430\u0440\u0443\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq_lost_codes\") }}\r\n\r\nSELECT ch.ShiftGUID\r\n     , ch.ChequeGUID\r\n     , ch.DiscIDD\r\n     , SUM(ch.AmountDisc) AS AmountDisc\r\n  FROM {{ ref('cheq_and_disc_cheq_disc_all') }} ch\r\n  LEFT JOIN {{ ref('cheq_and_disc_cheq') }} c\r\n    ON c.ShiftGUID  = ch.ShiftGUID\r\n   AND c.ChequeGUID = ch.ChequeGUID\r\n   AND c.CodeCheq   = ch.CodeCheq\r\nWHERE ch.CodeCheq  <> 0\r\n  AND c.CodeCheq IS NULL\r\n GROUP BY ch.ShiftGUID\r\n        , ch.ChequeGUID\r\n        , ch.DiscIDD", "language": "sql", "refs": [["cheq_and_disc_cheq_disc_all"], ["cheq_and_disc_cheq"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_cheq_total": {"database": null, "schema": "db1", "name": "cheq_and_disc_cheq_total", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_cheq_total.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_cheq_total.sql", "unique_id": "model.gulliver.cheq_and_disc_cheq_total", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_cheq_total"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_total", "checksum": {"name": "sha256", "checksum": "69f5a5a5139def13e96986e4bc9f6075106496a61e19f0df20fec25075aebaf0"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_cheq_total", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_cheq_total"}, "created_at": 1692256682.1100001, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_cheq_total", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 9. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_Cheq_Total\r\n    #region \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_cheq_total\") }}\r\n\r\nSELECT cheq.DD                      AS DD\r\n     , cheq.DivisionGUID            AS DivisionGUID\r\n     , cheq.CodeCheq                AS CodeCheq\r\n     , cheq.Qty                     AS Qty\r\n     , cheq.AmountWoDisc            AS AmountWoDisc\r\n     , COALESCE(disc.AmountDisc, 0) AS AmountDisc\r\n     , COALESCE(cntCheq, 0)         AS cntCheq\r\n  FROM (\r\n    SELECT DD\r\n         , DivisionGUID\r\n         , CodeCheq\r\n         , SUM(cntCheq) cntCheq\r\n         , SUM(Qty) Qty\r\n         , SUM(AmountWoDisc) AmountWoDisc\r\n    FROM (\r\n        SELECT ShiftGUID\r\n             , ShiftDate DD\r\n             , DivisionGUID\r\n             , CodeCheq\r\n             , COUNT(DISTINCT ChequeGUID) cntCheq\r\n             , SUM(Qty) Qty\r\n             , SUM(AmountWoDisc) AmountWoDisc\r\n          FROM {{ ref('cheq_and_disc_cheq_2') }}\r\n         GROUP BY ShiftGUID\r\n                , ShiftDate\r\n                , DivisionGUID\r\n                , CodeCheq\r\n    ) cheq_prepare\r\n    GROUP BY DD\r\n           , DivisionGUID\r\n           , CodeCheq\r\n) cheq\r\nLEFT JOIN (\r\n    SELECT DD\r\n         , DivisionGUID\r\n         , CodeCheq\r\n         , SUM(AmountDisc) AmountDisc\r\n      FROM {{ ref('cheq_and_disc_disc_total') }}\r\n     GROUP BY DD\r\n            , DivisionGUID\r\n            , CodeCheq\r\n) disc\r\n  ON disc.DD           = cheq.DD\r\n AND disc.DivisionGUID = cheq.DivisionGUID\r\n AND disc.CodeCheq     = cheq.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_cheq_2"], ["cheq_and_disc_disc_total"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq_2", "model.gulliver.cheq_and_disc_disc_total"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_disc_by_cheq": {"database": null, "schema": "db1", "name": "cheq_and_disc_disc_by_cheq", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_disc_by_cheq.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_disc_by_cheq.sql", "unique_id": "model.gulliver.cheq_and_disc_disc_by_cheq", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_disc_by_cheq"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_cheq", "checksum": {"name": "sha256", "checksum": "47d051859e9522967de1b3ab8821741078adb0fa57ef1770626abdd59b5d664a"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_disc_by_cheq", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_disc_by_cheq"}, "created_at": 1692256682.1155162, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_cheq", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 6. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_DiscByCheq\r\n    #region \u0424\u043e\u0440\u043c\u0440\u0443\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0441\u043a\u0438\u0434\u0430\u043c, \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043a \u0442\u043e\u0432\u0430\u0440\u0430\u043c \u043f\u0443\u0442\u0435\u043c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u0443\u043c\u043c \u0442\u0430\u043a\u0438\u0445 \u0441\u043a\u0438\u0434\u043e\u043a \u043d\u0430 \u0447\u0435\u043a\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_disc_by_cheq\") }}\r\n\r\nSELECT c.ShiftGUID             AS ShiftGUID\r\n \t , c.ChequeGUID            AS ChequeGUID\r\n \t , r.DiscIDD               AS DiscIDD\r\n \t , c.CodeCheq              AS CodeCheq\r\n \t , c.AmountWoDisc * r.Rate AS AmountDisc\r\n FROM {{ ref('cheq_and_disc_cheq') }} c\r\n JOIN (\r\n    SELECT cd.ShiftGUID\r\n \t\t , cd.ChequeGUID\r\n \t\t , cd.DiscIDD\r\n \t\t , toFloat32(cd.AmountDisc) / toFloat32(cs.AmountWoDisc) AS Rate\r\n   \t  FROM {{ ref('cheq_and_disc_cheq_disc_all_2') }} cd\r\n \t  JOIN (\r\n          SELECT ShiftGUID\r\n               , ChequeGUID\r\n               , SUM(AmountWoDisc) AS AmountWoDisc\r\n        FROM {{ ref('cheq_and_disc_cheq') }}\r\n        GROUP BY\r\n             ShiftGUID\r\n           , ChequeGUID\r\n \t  ) cs\r\n \t    ON cs.ShiftGUID     = cd.ShiftGUID\r\n \t   AND cs.ChequeGUID    = cd.ChequeGUID\r\n \t WHERE cd.CodeCheq      = 0\r\n \t   AND cs.AmountWoDisc <> 0\r\n ) r\r\n   ON r.ShiftGUID=c.ShiftGUID\r\n  AND r.ChequeGUID=c.ChequeGUID\r\n ORDER BY c.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_cheq"], ["cheq_and_disc_cheq_disc_all_2"], ["cheq_and_disc_cheq"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq_disc_all_2", "model.gulliver.cheq_and_disc_cheq"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_disc_by_cheq_sum": {"database": null, "schema": "db1", "name": "cheq_and_disc_disc_by_cheq_sum", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_disc_by_cheq_sum.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_disc_by_cheq_sum.sql", "unique_id": "model.gulliver.cheq_and_disc_disc_by_cheq_sum", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_disc_by_cheq_sum"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_cheq_sum", "checksum": {"name": "sha256", "checksum": "1047988a90c5dd1339f398c47a77ad14c9bc23ce646c867c710544d916bc3b4e"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_disc_by_cheq_sum", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_disc_by_cheq_sum"}, "created_at": 1692256682.1215546, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_cheq_sum", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 8. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 #CheqAndDisc_DiscByCheq\r\n    \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u043e \u0447\u0435\u043a\u0443\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_disc_by_cheq_sum\") }}\r\n\r\nSELECT ch.ShiftDate\r\n     , ch.DivisionGUID\r\n     , d.DiscIDD\r\n     , d.CodeCheq\r\n     , SUM(d.AmountDisc) AmountDisc\r\n  FROM {{ ref('cheq_and_disc_disc_by_cheq') }} d\r\n  JOIN {{ ref('cheq_and_disc_cheq') }} ch\r\n    ON ch.ShiftGUID  = d.ShiftGUID\r\n   AND ch.ChequeGUID = d.ChequeGUID\r\n   AND ch.CodeCheq   = d.CodeCheq\r\n GROUP BY ch.ShiftDate\r\n     , ch.DivisionGUID\r\n     , d.DiscIDD\r\n     , d.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_disc_by_cheq"], ["cheq_and_disc_cheq"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_cheq"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_disc_by_code": {"database": null, "schema": "db1", "name": "cheq_and_disc_disc_by_code", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_disc_by_code.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_disc_by_code.sql", "unique_id": "model.gulliver.cheq_and_disc_disc_by_code", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_disc_by_code"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_code", "checksum": {"name": "sha256", "checksum": "5a8f756ab2d8d3a1dc17f6dfd36f81e830ab601720f7d4f9853b978b16fe7075"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_disc_by_code", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_disc_by_code"}, "created_at": 1692256682.1260924, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_code", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 5. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_DiscByCode\r\n    #region \u0424\u043e\u0440\u043c\u0440\u0443\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0441\u043a\u0438\u0434\u0430\u043c, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043a \u0442\u043e\u0432\u0430\u0440\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_disc_by_code\") }}\r\n\r\nSELECT ShiftGUID\r\n \t , ChequeGUID\r\n \t , DiscIDD\r\n     , CodeCheq\r\n \t , AmountDisc\r\n FROM {{ ref('cheq_and_disc_cheq_disc_all_2') }}\r\nWHERE CodeCheq <> 0", "language": "sql", "refs": [["cheq_and_disc_cheq_disc_all_2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_cheq_disc_all_2"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_disc_by_code_sum": {"database": null, "schema": "db1", "name": "cheq_and_disc_disc_by_code_sum", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_disc_by_code_sum.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_disc_by_code_sum.sql", "unique_id": "model.gulliver.cheq_and_disc_disc_by_code_sum", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_disc_by_code_sum"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_code_sum", "checksum": {"name": "sha256", "checksum": "46acc75568b3efb9cecc354ca2214bc08a96b4b3ba46f59c426e342a0d1f0ed9"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_disc_by_code_sum", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_disc_by_code_sum"}, "created_at": 1692256682.1291013, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_by_code_sum", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 8. \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u0445\u0435\u043c\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 #CheqAndDisc_DiscByCode\r\n    \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 - \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u043e \u043a\u043e\u0434\u0443\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_disc_by_code_sum\") }}\r\n\r\nSELECT ch.ShiftDate\r\n     , ch.DivisionGUID\r\n     , d.DiscIDD\r\n     , d.CodeCheq\r\n     , SUM(d.AmountDisc) AmountDisc\r\n  FROM {{ ref('cheq_and_disc_disc_by_code') }} d\r\n  JOIN {{ ref('cheq_and_disc_cheq') }} ch\r\n    ON ch.ShiftGUID = d.ShiftGUID\r\n   AND ch.ChequeGUID = d.ChequeGUID\r\n   AND ch.CodeCheq = d.CodeCheq\r\n GROUP BY ch.ShiftDate\r\n     , ch.DivisionGUID\r\n     , d.DiscIDD\r\n     , d.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_disc_by_code"], ["cheq_and_disc_cheq"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_disc_by_code", "model.gulliver.cheq_and_disc_cheq"]}, "compiled_path": null}, "model.gulliver.cheq_and_disc_disc_total": {"database": null, "schema": "db1", "name": "cheq_and_disc_disc_total", "resource_type": "model", "package_name": "gulliver", "path": "cheq_and_disc\\cheq_and_disc_disc_total.sql", "original_file_path": "models\\cheq_and_disc\\cheq_and_disc_disc_total.sql", "unique_id": "model.gulliver.cheq_and_disc_disc_total", "fqn": ["gulliver", "cheq_and_disc", "cheq_and_disc_disc_total"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_total", "checksum": {"name": "sha256", "checksum": "ecbe74a160c6cb600b39df61a708028af8a8fd5f8887a4eaae1684fa5eddc560"}, "config": {"enabled": true, "alias": "dbt_temp_cheq_and_disc_disc_total", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_cheq_and_disc_disc_total"}, "created_at": 1692256682.1331322, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_cheq_and_disc_disc_total", "raw_code": "/*\r\n    \u0427\u0435\u043a\u0438. \u0428\u0430\u0433 8. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #CheqAndDisc_Disc_Total\r\n    \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0441\u043a\u0438\u0434\u043a\u0430\u043c\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_cheq_and_disc_disc_total\") }}\r\n\r\nSELECT basis.ShiftDate                                          AS DD\r\n     , basis.DivisionGUID                                       AS DivisionGUID\r\n     , basis.DiscIDD                                            AS DiscIDD\r\n\t , basis.CodeCheq                                           AS CodeCheq\r\n\t , COALESCE(d1.AmountDisc, 0) + COALESCE(d2.AmountDisc, 0)  AS AmountDisc\r\nFROM (\r\n    SELECT DISTINCT ShiftDate\r\n         , DivisionGUID\r\n         , DiscIDD\r\n         , CodeCheq\r\n      FROM (\r\n        SELECT DISTINCT ShiftDate\r\n             , DivisionGUID\r\n             , DiscIDD\r\n             , CodeCheq\r\n          FROM {{ ref('cheq_and_disc_disc_by_cheq_sum') }}\r\n\t     UNION ALL\r\n\t     SELECT DISTINCT ShiftDate\r\n             , DivisionGUID\r\n             , DiscIDD\r\n             , CodeCheq\r\n          FROM {{ ref('cheq_and_disc_disc_by_code_sum') }}\r\n      ) basis_prepare\r\n) basis\r\nLEFT JOIN {{ ref('cheq_and_disc_disc_by_cheq_sum') }} d1\r\n  ON d1.ShiftDate    = basis.ShiftDate\r\n AND d1.DivisionGUID = basis.DivisionGUID\r\n AND d1.DiscIDD      = basis.DiscIDD\r\n AND d1.CodeCheq     = basis.CodeCheq\r\nLEFT JOIN {{ ref('cheq_and_disc_disc_by_code_sum') }} d2\r\n  ON d2.ShiftDate    = basis.ShiftDate\r\n AND d2.DivisionGUID = basis.DivisionGUID\r\n AND d2.DiscIDD      = basis.DiscIDD\r\n AND d2.CodeCheq     = basis.CodeCheq", "language": "sql", "refs": [["cheq_and_disc_disc_by_cheq_sum"], ["cheq_and_disc_disc_by_code_sum"], ["cheq_and_disc_disc_by_cheq_sum"], ["cheq_and_disc_disc_by_code_sum"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cheq_and_disc_disc_by_cheq_sum", "model.gulliver.cheq_and_disc_disc_by_code_sum", "model.gulliver.cheq_and_disc_disc_by_cheq_sum", "model.gulliver.cheq_and_disc_disc_by_code_sum"]}, "compiled_path": null}, "model.gulliver.orders": {"database": null, "schema": "db1", "name": "orders", "resource_type": "model", "package_name": "gulliver", "path": "orders\\orders.sql", "original_file_path": "models\\orders\\orders.sql", "unique_id": "model.gulliver.orders", "fqn": ["gulliver", "orders", "orders"], "alias": "orders_tbl3", "checksum": {"name": "sha256", "checksum": "4b77a96b32d0f7388bc26e6baedc57693961d7da1d8cbbb783839b68cf56c695"}, "config": {"enabled": true, "alias": "orders_tbl3", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "order_by": ["size", "color"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\orders\\orders.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "orders_tbl3", "order_by": ["size", "color"]}, "created_at": 1692256682.1431007, "relation_name": "db1.orders_tbl3", "raw_code": "/*\r\n\t \u0434\u0430\u043d\u043d\u044be \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\r\n*/\r\n\r\n{{ config(\r\n    materialized = 'table',\r\n    alias = 'orders_tbl3',\r\n    order_by = (\"size\", \"color\")\r\n) }}\r\n\r\n\r\nSELECT\r\n   t.*\r\nFROM\r\n   db1.orders t", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\orders\\orders.sql", "compiled": true, "compiled_code": "/*\n\t \u0434\u0430\u043d\u043d\u044be \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\n*/\n\n\n\n\nSELECT\n   t.*\nFROM\n   db1.orders t", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.all_outgo_goods": {"database": null, "schema": "db1", "name": "all_outgo_goods", "resource_type": "model", "package_name": "gulliver", "path": "sale_with_outgo_goods_change\\all_outgo_goods.sql", "original_file_path": "models\\sale_with_outgo_goods_change\\all_outgo_goods.sql", "unique_id": "model.gulliver.all_outgo_goods", "fqn": ["gulliver", "sale_with_outgo_goods_change", "all_outgo_goods"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_all_outgo_goods", "checksum": {"name": "sha256", "checksum": "6531ef8b59f1cccfe623eba13b88359e8a32d81b89914085dce1f09f8c7ed7d1"}, "config": {"enabled": true, "alias": "dbt_temp_all_outgo_goods", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_all_outgo_goods"}, "created_at": 1692256682.1516242, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_all_outgo_goods", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_all_outgo_goods\") }}\r\n\r\nSELECT\r\n    DocGUID\r\n    ,DD\r\n    ,DivisionGUID\r\n    ,DivisionPlacementGUID\r\n    ,CodeDoc\r\n    ,0 AS CodeCheq\r\n    ,`sum(Qty)` AS Qty\r\n    ,PricePrimeCodeDoc\r\n    ,VatPrimeCodeDoc\r\n    ,PriceCodeDoc\r\n    ,VatCodeDoc\r\nFROM (\r\n    SELECT\r\n        GUID AS DocGUID\r\n        ,DateAccept AS DD\r\n        ,DivisionGUIDout AS DivisionGUID\r\n        ,DivisionPlacementGUIDout AS DivisionPlacementGUID\r\n        ,Code AS CodeDoc\r\n        ,SUM(Qty)\r\n        ,toFloat32(SUM(Qty*PricePrime))/toFloat32(SUM(Qty)) AS PricePrimeCodeDoc\r\n        ,Vat AS VatPrimeCodeDoc\r\n        ,toFloat32(SUM(Qty*Price))/toFloat32(SUM(Qty)) AS PriceCodeDoc\r\n        ,Vat1 AS VatCodeDoc\r\n\r\n    FROM (\r\n        SELECT\r\n             o.GUID AS GUID\r\n             ,o.DateAccept AS DateAccept\r\n             ,o.DivisionGUIDout AS DivisionGUIDout\r\n             ,o.DivisionPlacementGUIDout AS DivisionPlacementGUIDout\r\n             ,og.Code AS Code\r\n             ,coalesce(rg.Qty,0) AS Qty\r\n             ,coalesce(ig.PricePrime,ig.Price,0) AS PricePrime\r\n             ,coalesce(ig.Vat,0) AS Vat\r\n             ,coalesce(og.Vat,0) AS Vat1\r\n             ,coalesce(og.Price,0) AS Price\r\n        FROM {{ ref('goods_movement_outgo') }} o\r\n        JOIN {{ ref('goods_movement_outgogoods') }} og ON og.OutgoGUID = o.GUID AND og.DivisionGUID = o.DivisionGUIDout\r\n        JOIN {{ ref('goods_movement_relationgoods') }} rg ON rg.DivisionGUID = og.DivisionGUID AND rg.OutgoGoodsGUID = og.GUID\r\n        JOIN {{ ref('goods_movement_incomegoods') }} ig ON ig.GUID = rg.IncomeGoodsGUID AND ig.DivisionGUID = rg.DivisionGUID\r\n        WHERE o.Type1IDD=52 AND o.DateAccept IS NOT NULL AND o.DateAccept BETWEEN {{ var('start_date') }} AND {{ var('end_date') }}\r\n    )\r\n\r\n    GROUP BY\r\n           GUID\r\n           ,DateAccept\r\n           ,DivisionGUIDout\r\n           ,DivisionPlacementGUIDout\r\n           ,Code\r\n           ,Vat\r\n           ,Vat1\r\n    HAVING SUM(Qty)>0\r\n)", "language": "sql", "refs": [["goods_movement_outgo"], ["goods_movement_outgogoods"], ["goods_movement_relationgoods"], ["goods_movement_incomegoods"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_outgo", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_relationgoods", "model.gulliver.goods_movement_incomegoods"]}, "compiled_path": null}, "model.gulliver.outgo_goods_change_list": {"database": null, "schema": "db1", "name": "outgo_goods_change_list", "resource_type": "model", "package_name": "gulliver", "path": "sale_with_outgo_goods_change\\outgo_goods_change_list.sql", "original_file_path": "models\\sale_with_outgo_goods_change\\outgo_goods_change_list.sql", "unique_id": "model.gulliver.outgo_goods_change_list", "fqn": ["gulliver", "sale_with_outgo_goods_change", "outgo_goods_change_list"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_change_list", "checksum": {"name": "sha256", "checksum": "c686b000ef63d88169b137971c7b5193ce2d095901bf2dd247d0308faec1dbba"}, "config": {"enabled": true, "alias": "dbt_temp_outgo_goods_change_list", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_outgo_goods_change_list"}, "created_at": 1692256682.1631951, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_change_list", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_outgo_goods_change_list\") }}\r\n\r\nSELECT\r\n        ogc.OutgoGUID AS DocGUID\r\n       ,ogc.DivisionGUID AS DivisionGUID\r\n       ,r.DivisionPlacementGUID AS DivisionPlacementGUID\r\n       ,ogc.CodeSource AS CodeCheq\r\n       ,ogc.CodeDest AS CodeDoc\r\n       ,SUM(ogc.Qty) AS Qty\r\nFROM {{ ref('goods_movement_outgoodschange') }} ogc\r\nJOIN (\r\n    SELECT DISTINCT\r\n        DocGUID\r\n        ,DivisionGUID\r\n        ,DivisionPlacementGUID\r\n    FROM {{ ref('all_outgo_goods') }}\r\n) r ON r.DocGUID=ogc.OutgoGUID AND r.DivisionGUID=ogc.DivisionGUID\r\nGROUP BY\r\n        ogc.OutgoGUID\r\n       ,ogc.DivisionGUID\r\n       ,r.DivisionPlacementGUID\r\n       ,ogc.CodeSource\r\n       ,ogc.CodeDest\r\nHAVING SUM(ogc.Qty)>0", "language": "sql", "refs": [["goods_movement_outgoodschange"], ["all_outgo_goods"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_outgoodschange", "model.gulliver.all_outgo_goods"]}, "compiled_path": null}, "model.gulliver.outgo_goods_need_change": {"database": null, "schema": "db1", "name": "outgo_goods_need_change", "resource_type": "model", "package_name": "gulliver", "path": "sale_with_outgo_goods_change\\outgo_goods_need_change.sql", "original_file_path": "models\\sale_with_outgo_goods_change\\outgo_goods_need_change.sql", "unique_id": "model.gulliver.outgo_goods_need_change", "fqn": ["gulliver", "sale_with_outgo_goods_change", "outgo_goods_need_change"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_need_change", "checksum": {"name": "sha256", "checksum": "f12978a09b7d91f61035040dc12d73d64c49e6fd78dc03b6ea4de63a5e90f624"}, "config": {"enabled": true, "alias": "dbt_temp_outgo_goods_need_change", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_outgo_goods_need_change"}, "created_at": 1692256682.1631951, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_need_change", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_outgo_goods_need_change\") }}\r\n\r\nSELECT g.*\r\nFROM {{ ref('all_outgo_goods') }} AS g\r\nJOIN {{ ref('outgo_goods_change_list') }} gc\r\n    ON g.DocGUID=gc.DocGUID AND g.DivisionGUID=gc.DivisionGUID AND g.DivisionPlacementGUID=gc.DivisionPlacementGUID AND g.CodeDoc=gc.CodeDoc", "language": "sql", "refs": [["all_outgo_goods"], ["outgo_goods_change_list"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.all_outgo_goods", "model.gulliver.outgo_goods_change_list"]}, "compiled_path": null}, "model.gulliver.outgo_goods_no_need_change": {"database": null, "schema": "db1", "name": "outgo_goods_no_need_change", "resource_type": "model", "package_name": "gulliver", "path": "sale_with_outgo_goods_change\\outgo_goods_no_need_change.sql", "original_file_path": "models\\sale_with_outgo_goods_change\\outgo_goods_no_need_change.sql", "unique_id": "model.gulliver.outgo_goods_no_need_change", "fqn": ["gulliver", "sale_with_outgo_goods_change", "outgo_goods_no_need_change"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_no_need_change", "checksum": {"name": "sha256", "checksum": "8505eae1349bbeafcf541bd446b0dd721a3005b40c4eb04b8240eba5438da52d"}, "config": {"enabled": true, "alias": "dbt_temp_outgo_goods_no_need_change", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_outgo_goods_no_need_change"}, "created_at": 1692256682.1727602, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_outgo_goods_no_need_change", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_outgo_goods_no_need_change\") }}\r\n\r\nSELECT g.*\r\nFROM {{ ref('all_outgo_goods') }} AS g\r\nLEFT ANTI JOIN {{ ref('outgo_goods_change_list') }} gc\r\n    ON g.DocGUID=gc.DocGUID AND g.DivisionGUID=gc.DivisionGUID AND g.DivisionPlacementGUID=gc.DivisionPlacementGUID AND g.CodeDoc=gc.CodeDoc", "language": "sql", "refs": [["all_outgo_goods"], ["outgo_goods_change_list"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.all_outgo_goods", "model.gulliver.outgo_goods_change_list"]}, "compiled_path": null}, "model.gulliver.sale_with_outgo_goods_change_total": {"database": null, "schema": "db1", "name": "sale_with_outgo_goods_change_total", "resource_type": "model", "package_name": "gulliver", "path": "sale_with_outgo_goods_change\\sale_with_outgo_goods_change_total.sql", "original_file_path": "models\\sale_with_outgo_goods_change\\sale_with_outgo_goods_change_total.sql", "unique_id": "model.gulliver.sale_with_outgo_goods_change_total", "fqn": ["gulliver", "sale_with_outgo_goods_change", "sale_with_outgo_goods_change_total"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_sale_with_outgo_goods_change_total", "checksum": {"name": "sha256", "checksum": "b7bed6f0ef49b6918df7206b482808e56ef17f3a807f3786fe49b3989099673e"}, "config": {"enabled": true, "alias": "dbt_temp_sale_with_outgo_goods_change_total", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_sale_with_outgo_goods_change_total"}, "created_at": 1692256682.1742942, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_sale_with_outgo_goods_change_total", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_sale_with_outgo_goods_change_total\") }}\r\n\r\nSELECT DD               AS DD\r\n     , DivisionGUID     AS DivisionGUID\r\n     , CodeDoc          AS CodeDoc\r\n     , CodeCheq         AS CodeCheq\r\n     ,`sum(Qty)`        AS Qty\r\n     , SumPrimeCodeDoc  AS SumPrimeCodeDoc\r\n     , SumCodeDoc       AS SumCodeDoc\r\nFROM (\r\n    SELECT\r\n        DD AS DD\r\n        ,DivisionGUID AS DivisionGUID\r\n        ,CodeDoc AS CodeDoc\r\n        ,coalesce(CodeCheq,0) AS CodeCheq\r\n        ,SUM(Qty)\r\n        ,SUM(PricePrimeCodeDoc*Qty) AS SumPrimeCodeDoc\r\n        ,SUM(PriceCodeDoc*Qty) AS SumCodeDoc\r\n    FROM (\r\n        SELECT * FROM {{ ref('outgo_goods_no_need_change') }}\r\n        UNION ALL\r\n        SELECT\r\n            toUUID(DocGUID) AS DocGUID\r\n            ,DD\r\n            ,toUUID(DivisionGUID) AS DivisionGUID\r\n            ,toUUID(DivisionPlacementGUID) AS DivisionPlacementGUID\r\n            ,CodeDoc\r\n            ,CodeCheq\r\n            ,Qty\r\n            ,toFloat64(PricePrimeCodeDoc) AS PricePrimeCodeDoc\r\n            ,VatPrimeCodeDoc\r\n            ,toFloat64(PriceCodeDoc) AS PriceCodeDoc\r\n            ,VatCodeDoc\r\n        FROM {{ get_invoke_id() ~ '_' ~ 'dbt_temp_outgo_goods_changed' }}\r\n    )\r\n    GROUP BY\r\n        DD\r\n        ,DivisionGUID\r\n        ,CodeDoc\r\n        ,CodeCheq\r\n)", "language": "sql", "refs": [["outgo_goods_no_need_change"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gulliver.get_invoke_id"], "nodes": ["model.gulliver.outgo_goods_no_need_change"]}, "compiled_path": null}, "model.gulliver.simple_rest": {"database": null, "schema": "db1", "name": "simple_rest", "resource_type": "model", "package_name": "gulliver", "path": "Simple_Rest\\simple_rest.sql", "original_file_path": "models\\Simple_Rest\\simple_rest.sql", "unique_id": "model.gulliver.simple_rest", "fqn": ["gulliver", "Simple_Rest", "simple_rest"], "alias": "simple_rest", "checksum": {"name": "sha256", "checksum": "263537ba31b0abc968e298d96c43e498c551481f6e691776507645fff9184e47"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "MergeTree()", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "engine": "MergeTree()"}, "created_at": 1692256682.1901877, "relation_name": "db1.simple_rest", "raw_code": "/*\r\n    \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u043d\u0444\u0443 \u043f\u043e \u043e\u0441\u0442\u0430\u0442\u043a\u0430\u043c.\r\n*/\r\n\r\n{{config(\r\n    materialized='table',\r\n    engine='MergeTree()'\r\n        )\r\n}}\r\n\r\n{% set DD =  var(\"simple_rest_date\") %}\r\n{% set DivList = [] %}\r\n{% set tmpTableRest = NULL %}\r\n{% set typePrice = 'price' %}\r\n{% set isByPlace = 1 %}\r\n{% set tmpGoods = [] %}\r\n{% set tmpIgnoreIncomes = [] %}\r\n{% if DD < '20190101' %}\r\n    {% set DefaultVat = 18 %}\r\n{% else %}\r\n    {% set DefaultVat = 20 %}\r\n{% endif %}\r\n\r\n\r\nSELECT\r\n\tr.DivisionGUID AS DivisionGUID\r\n\t,r.DivisionPlacementGUID AS DivisionPlacementGUID\r\n\t,r.Code AS Code\r\n\t,r.Vat AS Vat\r\n\t,r.Qty AS Qty\r\n\t,r.Summ AS Summ\r\n\t,if(COALESCE(d.NameShort,d.NameLong,'???') == '', '???', COALESCE(d.NameShort,d.NameLong,'???')) AS DivisionName\r\n\t,if(COALESCE(a.NameShort,a.NameLong,'???') == '', '???', COALESCE(a.NameShort,a.NameLong,'???')) AS AssortmentName\r\nFROM\r\n    (SELECT\r\n         QQQ.DivisionGUID\r\n        ,QQQ.DivisionPlacementGUID\r\n        ,QQQ.Code\r\n        ,QQQ.Vat\r\n        ,SUM(QQQ.Qty) AS Qty\r\n        ,SUM(QQQ.Qty * if(isNull(QQQ.Price), 0, QQQ.Price)) AS Summ\r\n    FROM (\r\n        SELECT\r\n             ig.GUID\r\n            {% if isByPlace == 1 %}\r\n                ,i.DivisionPlacementGUIDin\r\n            {% else %}\r\n               ,NULL\r\n            {% endif %}\r\n            AS DivisionPlacementGUID\r\n            ,i.DivisionGUIDin AS DivisionGUID\r\n            ,ig.Code AS Code\r\n            ,coalesce(ig.Vat, {{DefaultVat}} ) AS Vat\r\n            ,ig.Qty - SUM(if(o.GUID IS NOT Null, rg.Qty, 0)) AS Qty\r\n            ,{% if typePrice == 'price' %}\r\n                ig.Price\r\n             {% elif typePrice == 'pricesingle' %}\r\n                ig.Price\r\n             {% elif typePrice == 'priceprime' %}\r\n                coalesce(ig.PricePrime, ig.Price)\r\n             {% elif typePrice == 'priceprimesingle' %}\r\n                coalesce(ig.PricePrime, ig.Price)\r\n             {% endif %}  AS Price\r\n        FROM {{ ref('goods_movement_income') }} i\r\n        JOIN {{ ref('goods_movement_incomegoods') }} ig  ON ig.IncomeGUID = i.GUID\r\n            AND ig.DivisionGUID =\r\n            {% if DivList|count != 1 %}\r\n                i.DivisionGUIDin\r\n            {% else %}\r\n                '{{ DivList[0] }}'\r\n            {% endif %}\r\n        LEFT JOIN {{ ref('goods_movement_relationgoods') }} rg  ON rg.IncomeGoodsGUID = ig.GUID\r\n            AND rg.DivisionGUID =\r\n            {% if DivList|count != 1 %}\r\n                ig.DivisionGUID\r\n            {% else %}\r\n                '{{ DivList[0] }}'\r\n            {% endif %}\r\n        LEFT JOIN {{ ref('goods_movement_outgogoods') }} og  ON og.GUID = rg.OutgoGoodsGUID\r\n            AND og.DivisionGUID =\r\n            {% if DivList|count != 1 %}\r\n                rg.DivisionGUID\r\n            {% else %}\r\n                '{{ DivList[0] }}'\r\n            {% endif %}\r\n        LEFT JOIN {{ ref('goods_movement_outgo') }} o  ON o.GUID = og.OutgoGUID\r\n            AND o.DivisionGUIDout =\r\n            {% if DivList|count != 1 %}\r\n                og.DivisionGUID\r\n            {% else %}\r\n                '{{ DivList[0] }}'\r\n            {% endif %}\r\n            AND o.DateAccept <= '{{ DD }}'\r\n        WHERE\r\n            i.DateAccept IS NOT NULL\r\n            AND i.DateAccept <= '{{ DD }}'\r\n            {% if DivList|count != 0 %}\r\n                AND i.DivisionGUIDin IN (\r\n                {% for division in DivList %}\r\n                    '{{division}}'\r\n                    {% if not loop.last%},{% endif %}\r\n                {% endfor %}\r\n                )\r\n            {% endif %}\r\n            {% if tmpIgnoreIncomes|count != 0 %}\r\n                AND i.GUID NOT IN (\r\n                {% for income in tmpIgnoreIncomes %}\r\n                    '{{income}}'\r\n                    {% if not loop.last%},{% endif %}\r\n                {% endfor %}\r\n                )\r\n            {% endif %}\r\n            {% if tmpGoods|count != 0 %}\r\n                AND ig.Code IN (\r\n                {% for good in tmpGoods %}\r\n                    '{{good}}'\r\n                    {% if not loop.last %},{% endif %}\r\n                {% endfor %}\r\n                )\r\n            {% endif %}\r\n        GROUP BY\r\n            ig.GUID\r\n            {% if isByPlace == 1 %}\r\n                ,i.DivisionPlacementGUIDin\r\n            {% endif %}\r\n            ,i.DivisionGUIDin\r\n            ,ig.Code\r\n            ,coalesce(ig.Vat, {{ DefaultVat }})\r\n            ,ig.Qty\r\n            ,{% if typePrice == 'price' %}\r\n                ig.Price\r\n             {% elif typePrice == 'pricesingle' %}\r\n                ig.Price\r\n             {% elif typePrice == 'priceprime' %}\r\n                coalesce(ig.PricePrime, ig.Price)\r\n             {% elif typePrice == 'priceprimesingle' %}\r\n                coalesce(ig.PricePrime, ig.Price)\r\n             {% endif %}\r\n        HAVING ig.Qty-SUM(if(o.GUID IS NOT Null, rg.Qty, 0)) > 0\r\n    ) QQQ\r\n    GROUP BY\r\n         QQQ.DivisionPlacementGUID\r\n        ,QQQ.DivisionGUID\r\n        ,QQQ.Code\r\n        ,QQQ.Vat\r\n        {% if typePrice in ['pricesingle','priceprimesingle'] %}\r\n            QQQ.Price\r\n        {% endif %}\r\n    ) r\r\nLEFT JOIN {{ ref('master_data_division') }} d ON d.GUID=r.DivisionGUID\r\nLEFT JOIN {{ ref('master_data_assortment') }} a ON a.Code=r.Code\r\nORDER BY\r\n     DivisionName\r\n    ,r.Code\r\n    ,r.Vat", "language": "sql", "refs": [["goods_movement_income"], ["goods_movement_incomegoods"], ["goods_movement_relationgoods"], ["goods_movement_outgogoods"], ["goods_movement_outgo"], ["master_data_division"], ["master_data_assortment"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_income", "model.gulliver.goods_movement_incomegoods", "model.gulliver.goods_movement_relationgoods", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_outgo", "model.gulliver.master_data_division", "model.gulliver.master_data_assortment"]}, "compiled_path": null}, "model.gulliver.binlabel_otbor_hranenie_new": {"database": null, "schema": "db1", "name": "binlabel_otbor_hranenie_new", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_binlabel_otbor_hranenie_new\\binlabel_otbor_hranenie_new.sql", "original_file_path": "models\\sp_web_rep_binlabel_otbor_hranenie_new\\binlabel_otbor_hranenie_new.sql", "unique_id": "model.gulliver.binlabel_otbor_hranenie_new", "fqn": ["gulliver", "sp_web_rep_binlabel_otbor_hranenie_new", "binlabel_otbor_hranenie_new"], "alias": "binlabel_otbor_hranenie_new", "checksum": {"name": "sha256", "checksum": "5f1505b61c1d9c16990c127d7b55fcc91134c6e4d9c8f9c76097cdf76d8cbd4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692256682.288838, "relation_name": "db1.binlabel_otbor_hranenie_new", "raw_code": "select toString(t.date_time) as date_time1, * from (\r\nselect * from {{ref('itog')}} where name_o = '\u041e\u0442\u0431\u043e\u0440'\r\nunion all\r\nselect * from {{ref('itog')}} where name_o = '\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435'\r\nunion all\r\nselect * from {{ref('itog')}} where name_o = '\u041e\u0442\u0431\u043e\u0440+\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435'\r\n) t", "language": "sql", "refs": [["itog"], ["itog"], ["itog"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.itog", "model.gulliver.itog", "model.gulliver.itog"]}, "compiled_path": null}, "model.gulliver.binloc": {"database": null, "schema": "db1", "name": "binloc", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_binlabel_otbor_hranenie_new\\binloc.sql", "original_file_path": "models\\sp_web_rep_binlabel_otbor_hranenie_new\\binloc.sql", "unique_id": "model.gulliver.binloc", "fqn": ["gulliver", "sp_web_rep_binlabel_otbor_hranenie_new", "binloc"], "alias": "binloc", "checksum": {"name": "sha256", "checksum": "1abce6131c587f9801f30ece24a3b55b7607fa348fa7791b36320cc64df0475e"}, "config": {"enabled": true, "alias": "binloc", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_binlabel_otbor_hranenie_new\\binloc.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "binloc"}, "created_at": 1692256682.2932644, "relation_name": "db1.binloc", "raw_code": "{{ config(materialized='table', alias=\"binloc\") }}\r\n\r\nWITH binloc as (\r\n                select\r\n                        p.attribute1  as client,\r\n                        bl.binlabel  as binlabel,\r\n                        bl.`zone`  as `zone`,\r\n                        multiIf(bt.descript = 'Random','\u041e\u0442\u0431\u043e\u0440',\r\n                                bt.descript = 'Carton','\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\r\n                                bt.descript\r\n                                ) as descript\r\n                from WMSBinLocat bl\r\n                inner join WMSProdMstr p on p.extended  =bl.extended\r\n                join WMSTBinType  bt on bt.bintype = bl.bintype\r\n                where bl.`zone`  in ('A','C','D','E','F','H','G','V','\u0417','\u0424','\u042f','\u0413','\u0414','\u041b')\r\n                group by p.attribute1, bl.`zone` , bt.descript, bl.binlabel\r\n)\r\n,binloc_shabel as (\r\n                select\r\n                    pr.attribute1 as client,\r\n                    bl.binlabel as binlabel,\r\n                    bl.`zone`  as `zone`,\r\n                    multiIf(bt.descript = 'Random','\u041e\u0442\u0431\u043e\u0440'\r\n                    \t\t,bt.descript = 'Carton','\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435'\r\n                    \t\t,bt.descript) as descript,\r\n                    pr.size4 as size4,\r\n                    sum(bl.quantity *bl.packsize) as quantity\r\n                from WMSBinLocat bl\r\n                inner join WMSProdMstr  pr on pr.extended =bl.extended\r\n                join WMSTBinType bt on bt.bintype = bl.bintype\r\n                where 1 = 1\r\n                and bl.`zone` in ('A','\u0414') and substring(bl.binlabel,1,2) in ('1A','VI')\r\n                group by pr.attribute1\r\n                        , bl.`zone`\r\n                        , bt.descript\r\n                        , bl.binlabel\r\n                        , pr.size4\r\n)\r\n, binloc_shabel_new as (\r\n                        select\r\n                            client,\r\n                            binlabel,\r\n                            `zone`,\r\n                            descript,\r\n                            size4,\r\n                            sum(quantity) as quantity\r\n                        from binloc_shabel\r\n                        group by client, binlabel, `zone`, descript, size4\r\n)\r\n,binlocByZone as (\r\n                select\r\n                    client,\r\n                    descript,\r\n                    multiIf(\r\n                        `zone` in ('A','C','\u0413','\u0414','V') and substring(binlabel,1,2) in ('1B','1C','1D','1E','1F','1G','1H','1I','1J','1K','1L','1M','VA','VB','VC','VD','VE','VF','VG','VH','VJ','VK'),'suhoy'\r\n                        ,(`zone` in ('H','E','F') and substring(binlabel,1,2) in ('1P','1Q','1R','1S','1T','3Q','3S','1A')) or (`zone` in ('H') and substring(binlabel,1,2) in ('1U')),'frov'\r\n                        ,`zone` in ('G','V') and substring(binlabel,1,2) in ('1N','1O'),'akciz'\r\n                        ,(`zone` in ('\u0424','\u042f') and substring(binlabel,1,2) in ('1U','1V','1W','1X','1Y','ZA','ZB','ZC','ZD','ZE','ZP','ZQ')),'holod'\r\n                        ,(`zone` in ('\u0417','\u041b') and substring(binlabel,1,2) in ('1Z','5A','ZF','ZG','ZH','ZI','ZJ','ZK','ZL','ZM','ZN','ZO')),'zamorozka'\r\n                        ,`zone` in ('D') and substring(binlabel,1,2) in ('2A','2C','2D','2E','2F','2G','2H','2I','2J'),'mezonin'\r\n                        ,''\r\n                    ) as typeZone,\r\n                    1 as qty,\r\n                    0 as size4,\r\n                    0 as quantity\r\n                from binloc\r\n                union all\r\n                select\r\n                    client,\r\n                    descript,\r\n                    if( `zone` in ('A','\u0414') and substring(binlabel,1,2) in ('1A','VI'), 'shtabel',NULL) as typeZone,\r\n                    1 as qty,\r\n                    size4,\r\n                    quantity\r\n                from binloc_shabel_new\r\n),\r\nreport as (\r\n            select\r\n                client,\r\n                toDate(now()) as `date`,\r\n                descript,\r\n                sum(if(typeZone='suhoy', qty, 0)) as qtySuhoy,\r\n                sum(if(typeZone='frov', qty, 0)) as qtyFrov,\r\n                sum(if(typeZone='akciz', qty, 0)) as qtyAkciz,\r\n                sum(if(typeZone='holod', qty, 0)) as qtyHolod,\r\n                sum(if(typeZone='zamorozka', qty, 0)) as qtyZamorozka,\r\n                sum(if((typeZone='shtabel' and size4<>0), ceiling(quantity/size4), 0)) as qtyShtabel,\r\n                sum(if(typeZone='mezonin', qty, 0)) as qtyMezonin\r\n            from binlocByZone\r\n            where typeZone <> ''\r\n            group by client, descript\r\n)\r\nselect\r\n    multiIf(\r\n        client='GUL', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\r\n        ,client='POB', '\u041f\u043e\u0431\u0435\u0434\u0430'\r\n        ,''\r\n    ) as client,\r\n\t`date` as date_time,\r\n\ttoString(descript) as name_o,\r\n\ttoUInt32(descript) as descript,\r\n\ttoUInt32(qtySuhoy) as qty_suhoy,\r\n\ttoUInt32(qtyFrov) as qty_frov,\r\n\ttoUInt32(qtyAkciz) as qty_akciz,\r\n\ttoUInt32(qtyHolod) as qty_holod,\r\n\ttoUInt32(qtyZamorozka) as qty_zam,\r\n\ttoUInt32(qtyShtabel) as qty_sht,\r\n\ttoUInt32(qtyMezonin) as qty_mez\r\nfrom report\r\nwhere\r\n(toDate(`date`) between toDate('{{var('start_date')}}') and toDate('{{var('end_date')}}'))\r\nand ('{{var('client')}}' in( '','0') or '{{var('client')}}'=client)\r\nand ((ifNull('{{var('bin_type')}}','')='\u0412\u0441\u0435') or (ifNull('{{var('bin_type')}}','')=toString(descript)))\r\nand toTime(now()) between toTime(toDateTime('2000-01-01 01:00:00')) and toTime(toDateTime('2000-01-01 19:00:00'))\r\nunion all\r\nselect\r\n    multiIf(\r\n\tclient ='GUL', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\r\n\t,client ='POB', '\u041f\u043e\u0431\u0435\u0434\u0430'\r\n\t,''\r\n    ) as client,\r\n\t`date` as date_time,\r\n\ttoString(descript) as name_o,\r\n\ttoUInt32(descript) as descript,\r\n\ttoUInt32(qtySuhoy) as qty_suhoy,\r\n\ttoUInt32(qtyFrov) as qty_frov,\r\n\ttoUInt32(qtyAkciz) as qty_akciz,\r\n\ttoUInt32(qtyHolod) as qty_holod,\r\n\ttoUInt32(qtyZamorozka) as qty_zam,\r\n\ttoUInt32(qtyShtabel) as qty_sht,\r\n\ttoUInt32(qtyMezonin) as qty_mez\r\nfrom WMSRepBinlabelOtborHranenie\r\nwhere\r\n (toDate(`date`) between toDate('{{var('start_date')}}') and toDate('{{var('end_date')}}'))\r\nand ('{{var('client')}}' in( '','0') or '{{var('client')}}'=client)\r\nand (ifNull('{{var('bin_type')}}','')='\u0412\u0441\u0435' or ifNull('{{var('bin_type')}}','')=toString(descript))", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_binlabel_otbor_hranenie_new\\binloc.sql", "compiled": true, "compiled_code": "\n\nWITH binloc as (\n                select\n                        p.attribute1  as client,\n                        bl.binlabel  as binlabel,\n                        bl.`zone`  as `zone`,\n                        multiIf(bt.descript = 'Random','\u041e\u0442\u0431\u043e\u0440',\n                                bt.descript = 'Carton','\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\n                                bt.descript\n                                ) as descript\n                from WMSBinLocat bl\n                inner join WMSProdMstr p on p.extended  =bl.extended\n                join WMSTBinType  bt on bt.bintype = bl.bintype\n                where bl.`zone`  in ('A','C','D','E','F','H','G','V','\u0417','\u0424','\u042f','\u0413','\u0414','\u041b')\n                group by p.attribute1, bl.`zone` , bt.descript, bl.binlabel\n)\n,binloc_shabel as (\n                select\n                    pr.attribute1 as client,\n                    bl.binlabel as binlabel,\n                    bl.`zone`  as `zone`,\n                    multiIf(bt.descript = 'Random','\u041e\u0442\u0431\u043e\u0440'\n                    \t\t,bt.descript = 'Carton','\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435'\n                    \t\t,bt.descript) as descript,\n                    pr.size4 as size4,\n                    sum(bl.quantity *bl.packsize) as quantity\n                from WMSBinLocat bl\n                inner join WMSProdMstr  pr on pr.extended =bl.extended\n                join WMSTBinType bt on bt.bintype = bl.bintype\n                where 1 = 1\n                and bl.`zone` in ('A','\u0414') and substring(bl.binlabel,1,2) in ('1A','VI')\n                group by pr.attribute1\n                        , bl.`zone`\n                        , bt.descript\n                        , bl.binlabel\n                        , pr.size4\n)\n, binloc_shabel_new as (\n                        select\n                            client,\n                            binlabel,\n                            `zone`,\n                            descript,\n                            size4,\n                            sum(quantity) as quantity\n                        from binloc_shabel\n                        group by client, binlabel, `zone`, descript, size4\n)\n,binlocByZone as (\n                select\n                    client,\n                    descript,\n                    multiIf(\n                        `zone` in ('A','C','\u0413','\u0414','V') and substring(binlabel,1,2) in ('1B','1C','1D','1E','1F','1G','1H','1I','1J','1K','1L','1M','VA','VB','VC','VD','VE','VF','VG','VH','VJ','VK'),'suhoy'\n                        ,(`zone` in ('H','E','F') and substring(binlabel,1,2) in ('1P','1Q','1R','1S','1T','3Q','3S','1A')) or (`zone` in ('H') and substring(binlabel,1,2) in ('1U')),'frov'\n                        ,`zone` in ('G','V') and substring(binlabel,1,2) in ('1N','1O'),'akciz'\n                        ,(`zone` in ('\u0424','\u042f') and substring(binlabel,1,2) in ('1U','1V','1W','1X','1Y','ZA','ZB','ZC','ZD','ZE','ZP','ZQ')),'holod'\n                        ,(`zone` in ('\u0417','\u041b') and substring(binlabel,1,2) in ('1Z','5A','ZF','ZG','ZH','ZI','ZJ','ZK','ZL','ZM','ZN','ZO')),'zamorozka'\n                        ,`zone` in ('D') and substring(binlabel,1,2) in ('2A','2C','2D','2E','2F','2G','2H','2I','2J'),'mezonin'\n                        ,''\n                    ) as typeZone,\n                    1 as qty,\n                    0 as size4,\n                    0 as quantity\n                from binloc\n                union all\n                select\n                    client,\n                    descript,\n                    if( `zone` in ('A','\u0414') and substring(binlabel,1,2) in ('1A','VI'), 'shtabel',NULL) as typeZone,\n                    1 as qty,\n                    size4,\n                    quantity\n                from binloc_shabel_new\n),\nreport as (\n            select\n                client,\n                toDate(now()) as `date`,\n                descript,\n                sum(if(typeZone='suhoy', qty, 0)) as qtySuhoy,\n                sum(if(typeZone='frov', qty, 0)) as qtyFrov,\n                sum(if(typeZone='akciz', qty, 0)) as qtyAkciz,\n                sum(if(typeZone='holod', qty, 0)) as qtyHolod,\n                sum(if(typeZone='zamorozka', qty, 0)) as qtyZamorozka,\n                sum(if((typeZone='shtabel' and size4<>0), ceiling(quantity/size4), 0)) as qtyShtabel,\n                sum(if(typeZone='mezonin', qty, 0)) as qtyMezonin\n            from binlocByZone\n            where typeZone <> ''\n            group by client, descript\n)\nselect\n    multiIf(\n        client='GUL', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\n        ,client='POB', '\u041f\u043e\u0431\u0435\u0434\u0430'\n        ,''\n    ) as client,\n\t`date` as date_time,\n\ttoString(descript) as name_o,\n\ttoUInt32(descript) as descript,\n\ttoUInt32(qtySuhoy) as qty_suhoy,\n\ttoUInt32(qtyFrov) as qty_frov,\n\ttoUInt32(qtyAkciz) as qty_akciz,\n\ttoUInt32(qtyHolod) as qty_holod,\n\ttoUInt32(qtyZamorozka) as qty_zam,\n\ttoUInt32(qtyShtabel) as qty_sht,\n\ttoUInt32(qtyMezonin) as qty_mez\nfrom report\nwhere\n(toDate(`date`) between toDate('2022-12-31') and toDate('2022-12-31'))\nand ('' in( '','0') or ''=client)\nand ((ifNull('\u0412\u0441\u0435','')='\u0412\u0441\u0435') or (ifNull('\u0412\u0441\u0435','')=toString(descript)))\nand toTime(now()) between toTime(toDateTime('2000-01-01 01:00:00')) and toTime(toDateTime('2000-01-01 19:00:00'))\nunion all\nselect\n    multiIf(\n\tclient ='GUL', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\n\t,client ='POB', '\u041f\u043e\u0431\u0435\u0434\u0430'\n\t,''\n    ) as client,\n\t`date` as date_time,\n\ttoString(descript) as name_o,\n\ttoUInt32(descript) as descript,\n\ttoUInt32(qtySuhoy) as qty_suhoy,\n\ttoUInt32(qtyFrov) as qty_frov,\n\ttoUInt32(qtyAkciz) as qty_akciz,\n\ttoUInt32(qtyHolod) as qty_holod,\n\ttoUInt32(qtyZamorozka) as qty_zam,\n\ttoUInt32(qtyShtabel) as qty_sht,\n\ttoUInt32(qtyMezonin) as qty_mez\nfrom WMSRepBinlabelOtborHranenie\nwhere\n (toDate(`date`) between toDate('2022-12-31') and toDate('2022-12-31'))\nand ('' in( '','0') or ''=client)\nand (ifNull('\u0412\u0441\u0435','')='\u0412\u0441\u0435' or ifNull('\u0412\u0441\u0435','')=toString(descript))", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.binmstr": {"database": null, "schema": "db1", "name": "binmstr", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_binlabel_otbor_hranenie_new\\binmstr.sql", "original_file_path": "models\\sp_web_rep_binlabel_otbor_hranenie_new\\binmstr.sql", "unique_id": "model.gulliver.binmstr", "fqn": ["gulliver", "sp_web_rep_binlabel_otbor_hranenie_new", "binmstr"], "alias": "binmstr", "checksum": {"name": "sha256", "checksum": "62be56663e7828e83551199cdd3796c82e4ecc36177644c1ee3a0dbcfbe203d5"}, "config": {"enabled": true, "alias": "binmstr", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_binlabel_otbor_hranenie_new\\binmstr.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "binmstr"}, "created_at": 1692256682.3018634, "relation_name": "db1.binmstr", "raw_code": "{{ config(materialized='table', alias=\"binmstr\") }}\r\n\r\nwith bin as (\r\n  select\r\n    '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\r\n    now() as date_time,\r\n    ifNull(wpl.name, '') as nameline,\r\n    upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ) as line,\r\n    bz.`zone` as `zone`,\r\n    toInt32(\r\n      if(\r\n        upper(\r\n          substring(bm.binlabel, 1, 2)\r\n        )= '1A'\r\n        and bz.`zone` = 'T',\r\n        count(bm.binlabel) * 29,\r\n        count(bm.binlabel)\r\n      )\r\n    ) as qty,\r\n    toInt32(\r\n      if(\r\n        client = 'GUL',\r\n        ifNull(bzl.procent, 50),\r\n        50\r\n      )/ 100.00\r\n    ) as gulproc,\r\n    toInt32(\r\n      if(\r\n        client = 'POB',\r\n        ifNull(bzl.procent, 50),\r\n        50\r\n      )/ 100.00\r\n    ) as pobproc\r\n  from\r\n    WMSTBinMaster bm\r\n    inner join WMSdataBinZone bz on bz.bin_zone_id = bm.`bin_zone_id`\r\n    left join WMSPlanogrammaByZone bzl on bzl.`zone` = bz.`zone`\r\n    AND bzl.binlabel = upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    )\r\n    left join WMSPlanogrammaLeto wpl on wpl.binlabel = upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    )\r\n  where\r\n    bm.binlabel like '%A-Z0-9%'\r\n    and bz.`zone` in (\r\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\r\n      '\u042f', '\u0417', '\u041b', '\u0413', '\u0414', '\u0411',\r\n      'E', 'F', 'H', 'D'\r\n    )\r\n    and bm.binlabel not in (\r\n      '1OGM1', '1WTR01', '1PTR01', '3FS1'\r\n    )\r\n    and upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ) not in ('1A', '5A') --'1T'\r\n    and bm.status != 'B'\r\n  group by\r\n    upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ),\r\n    bz.`zone`,\r\n    gulproc,\r\n    pobproc,\r\n    nameline\r\n  union all\r\n  select\r\n    concat(\r\n      toString(date_time),\r\n      ' ',\r\n      toString(date_time)\r\n    ) as date_time1,\r\n    *\r\n  from\r\n    WMSDWLDBinStrAll wsa\r\n  where\r\n    `zone` in (\r\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\r\n      '\u042f', '\u0417', '\u041b', '\u0413', '\u0414', '\u0411',\r\n      'E', 'F', 'H', 'D'\r\n    )\r\n    and `line` not in ('1A', '3F')\r\n  union all\r\n  select\r\n    '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\r\n    now() as DATE_TIME,\r\n    ifNull(wpl.name, '') as nameline,\r\n    upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ) as line,\r\n    bz.`zone` as `zone`,\r\n    toInt32(\r\n      if (\r\n        upper(\r\n          substring(bm.binlabel, 1, 2)\r\n        )= 'A'\r\n        and bz.`zone` = 'T',\r\n        count(bm.binlabel) * 29,\r\n        count(bm.binlabel)\r\n      )\r\n    ) as qty,\r\n    toInt32(\r\n      if(\r\n        client = 'GUL',\r\n        ifNull(bzl.procent, 50),\r\n        50\r\n      )/ 100.00\r\n    ) as gulproc,\r\n    toInt32(\r\n      if(\r\n        client = 'POB',\r\n        ifNull(bzl.procent, 50),\r\n        50\r\n      )/ 100.00\r\n    ) as pobproc\r\n  from\r\n    WMSTBinMaster  bm\r\n    inner join WMSdataBinZone bz on bz.bin_zone_id = bm.`bin_zone_id`\r\n    left join WMSPlanogrammaByZone bzl on bzl.`zone` = bz.`zone`\r\n    AND bzl.binlabel = upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    )\r\n    left join WMSPlanogrammaLeto wpl on wpl.binlabel = upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    )\r\n  where\r\n    bm.binlabel like '%A-Z0-9%'\r\n    and bz.`zone` in (\r\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\r\n      '\u042f', '\u0417', '\u041b'\r\n    )\r\n    and bm.binlabel not in (\r\n      '1OGM1', '1WTR01', '1PTR01', '3FS1'\r\n    )\r\n    and upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ) = '5A'\r\n    and bm.status != 'B'\r\n  group by\r\n    upper(\r\n      substring(bm.binlabel, 1, 2)\r\n    ),\r\n    bz.`zone`,\r\n    gulproc,\r\n    pobproc,\r\n    nameline\r\n),\r\nsht as (\r\nselect\r\n  '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\r\n  now() as date_time,\r\n  null as nameline1,\r\n  multiIf(\r\n    pr.attribute1 = 'GUL', 'Gulliver',\r\n    pr.attribute1 = 'POB', 'Pobeda', '-'\r\n  ) as attribute1,\r\n  substring(bm.binlabel, 1, 2) as line1,\r\n  bm.`zone` as zone1,\r\n  bm.binlabel as binlabel1,\r\n  toInt32(bms.seat) as qty1,\r\n  toInt32(\r\n    sum(\r\n      if(\r\n        pr.attribute1 in ('GUL')\r\n        and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\r\n        and pr.size4 <> 0,\r\n        ceiling(\r\n          bl.quantity * bl.packsize / pr.size4\r\n        ),\r\n        0\r\n      )\r\n    )\r\n  ) as gul1,\r\n  toInt32(\r\n    sum(\r\n      if (\r\n        pr.attribute1 in ('POB')\r\n        and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\r\n        and pr.size4 <> 0,\r\n        ceiling(\r\n          bl.quantity * bl.packsize / pr.size4\r\n        ),\r\n        0\r\n      )\r\n    )\r\n  ) as pob1,\r\n  ifNull(\r\n    (\r\n      select\r\n        count(distinct extended)\r\n      from\r\n        WMSBinLocat t\r\n      where\r\n        t.binlabel = binlabel\r\n    ),\r\n    0\r\n  ) as qtybin1,\r\n  toInt32(\r\n    ifNull(\r\n      (\r\n        select\r\n          count(*)\r\n        from\r\n          WMSBinLocat b1\r\n          inner join WMSProdMstr p1 on p1.extended = b1.extended\r\n        where\r\n          b1.binlabel = binlabel\r\n          and p1.attribute1 <> attribute1\r\n      ),\r\n      0\r\n    )\r\n  ) as qtypr1,\r\n  null as code1\r\nfrom\r\n  WMSBinStr bm\r\n  left join WMSBinLocat bl on bm.binlabel = bl.binlabel\r\n  left join WMSProdMstr pr on pr.extended = bl.extended\r\n  INNER JOIN WMSTBinMaster bms ON bms.binlabel = bm.binlabel\r\nwhere\r\n  bm.binlabel like '%A-Z0-9%'\r\n  and bm.`zone` in ('A', 'P', '\u0414')\r\n  and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\r\n  and bms.status != 'B'\r\ngroup by\r\n  substring(bm.binlabel, 1, 2),\r\n  bm.`zone`,\r\n  bm.binlabel,\r\n  multiIf(\r\n    pr.attribute1 = 'GUL', 'Gulliver',\r\n    pr.attribute1 = 'POB', 'Pobeda', '-'\r\n  ),\r\n  pr.attribute1,\r\n  bms.seat\r\nunion all\r\nselect\r\n  concat(\r\n    toString(date_time),\r\n    ' ',\r\n    toString(date_time)\r\n  ) as date_time1,\r\n  date_time,\r\n  null as NAMELINE1,\r\n  attribute1,\r\n  line1,\r\n  zone1,\r\n  binlabel,\r\n  toUInt32(bms.seat) as qty1,\r\n  toUInt32(gul1) as gul1,\r\n  toUInt32(pob1) as pob1,\r\n  toUInt32(qtybin1) as qtybin1,\r\n  toUInt32(qtypr1) as qtypr1,\r\n  null as producyt1\r\nfrom\r\n  WMSDWLDBinStrShtabel bm\r\n  INNER JOIN WMSTBinMaster bms ON bms.binlabel = bm.binlabel1\r\nwhere\r\n  binlabel like '%A-Z0-9%'\r\n  and zone1 in ('A', 'P', '\u0414')\r\n  and substring(binlabel, 1, 2) in ('1A', 'VI')\r\n    )\r\n  select\r\n    t1.client,\r\n    t1.date_time as date_time,\r\n    t1.name_o,\r\n    sum(t1.qty_suhoy_all) as qty_suhoy_all,\r\n    --sum(t1.qty_suhoy_busy) as qty_suhoy_busy,\r\n    sum(t1.qty_frov_all) as qty_frov_all,\r\n    --sum(t1.qty_frov_busy) as qty_frov_busy,\r\n    sum(t1.qty_akciz_all) as qty_akciz_all,\r\n    --sum(t1.qty_akciz_busy) as qty_akciz_busy,\r\n    sum(t1.qty_holod_all) as qty_holod_all,\r\n    --sum(t1.qty_holod_busy) as qty_holod_busy,\r\n    sum(t1.qty_zam_all) as qty_zam_all,\r\n    --sum(t1.qty_zam_busy) as qty_zam_busy,\r\n    sum(t1.qty_sht_all) as qty_sht_all,\r\n    --sum(t1.qty_sht_busy) as qty_sht_busy,\r\n    sum(t1.qty_mez_all) as qty_mez_all --sum(t1.qty_mez_busy) as qty_mez_busy\r\n  from\r\n    (\r\n            select\r\n        '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440' as client,\r\n        date_time,\r\n        `zone`,\r\n        multiIf(\r\n          `zone` in ('A', 'E', 'G', '\u0424', '\u0417', 'D'),\r\n          '\u041e\u0442\u0431\u043e\u0440' ,`zone` in ('C', 'H', 'V', '\u042f', '\u041b'),\r\n          '\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\r\n          NULL\r\n        ) as name_o,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('A')\r\n            and line in (\r\n              '1D', '1E', '1F', '1G', '1H', '1I', '1J',\r\n              '1K', '1L', '1M'\r\n            ),\r\n            round(qty * gulproc, 0) --\u0441\u0443\u0445\u043e\u0439\r\n            ,\r\n            `zone` in ('C', 'V')\r\n            and line in (\r\n              '1D', '1E', '1F', '1G', '1H', '1I', '1J',\r\n              '1K', '1L', '1M'\r\n            ),\r\n            round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_suhoy_all,\r\n        0 as qty_suhoy_busy,\r\n        sum(\r\n          multiIf (\r\n            `zone` in ('E'),\r\n            round(qty * gulproc, 0) --\u0444\u0440\u043e\u0432\r\n            ,\r\n            `zone` in ('H'),\r\n            round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_frov_all,\r\n        0 as qty_frov_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('G')\r\n            and line in ('1N', '1O'),\r\n            round(qty * gulproc, 0) --\u0430\u043a\u0446\u0438\u0437\r\n            ,\r\n            `zone` in ('V')\r\n            and line in ('1N', '1O'),\r\n            round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_akciz_all,\r\n        0 as qty_akciz_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('\u0424'), round(qty * gulproc, 0), --\u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0445\u043e\u043b\u043e\u0434\r\n\r\n            `zone` in ('\u042f'), round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_holod_all,\r\n        0 as qty_holod_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('\u0417'),\r\n            round(qty * gulproc, 0) --\u0437\u0430\u043c\u043e\u0440\u043e\u0437\u043a\u0430\r\n            ,\r\n            `zone` in ('\u041b'),\r\n            round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_zam_all,\r\n        0 as qty_zam_busy,\r\n        0 as qty_sht_all,\r\n--        \u0448\u0442\u0430\u0431\u0435\u043b\u044c\r\n        0 as qty_sht_busy,\r\n        sum(\r\n          if(\r\n            `zone` in ('D'),\r\n            round(qty * gulproc, 0) --\u043c\u0435\u0437\u043e\u043d\u0438\u043d\r\n            ,NULL)\r\n        ) as qty_mez_all,\r\n        0 as qty_mez_busy\r\n      from\r\n        bin\r\n      where\r\n        toDate(date_time) between toDate(\r\n          {{var('start_date') }}\r\n        )\r\n        and toDate(\r\n          {{var('end_date') }}\r\n        )\r\n        and (\r\n          toHour(date_time) = {{var('hour') }}\r\n          or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\r\n        )\r\n        and\r\n        `zone` in (\r\n          'A', 'C', 'E', 'H', 'G', 'V', '\u0424', '\u042f',\r\n          '\u0417', '\u041b', 'D'\r\n        ) --\u043e\u0442\u0431\u043e\u0440/\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\r\n      group by\r\n        date_time,\r\n        `zone`\r\n        union all\r\n      select\r\n        '\u041f\u043e\u0431\u0435\u0434\u0430' as client,\r\n        date_time,\r\n        `zone`,\r\n        multiIf(\r\n          `zone` in ('\u0414', 'F', 'G', '\u0424', '\u0417', 'D'),\r\n          '\u041e\u0442\u0431\u043e\u0440',\r\n          `zone` in ('\u0413', 'H', 'V', '\u042f', '\u041b', 'C'),\r\n          '\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\r\n          NULL\r\n        ) as name_o,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('\u0414')\r\n            and `line` in (\r\n              'VA', 'VB', 'VC', 'VD', 'VE', 'VF', 'VG',\r\n              'VH', 'VJ', 'VK', '1D'\r\n            ),\r\n            qty - round(qty * gulproc, 0) --\u0441\u0443\u0445\u043e\u0439\r\n            ,\r\n            `zone` in ('\u0413', 'C', 'V')\r\n            and `line` in (\r\n              'VA', 'VB', 'VC', 'VD', 'VE', 'VF', 'VG',\r\n              'VH', 'VJ', 'VK', '1D', '1M'\r\n            ),\r\n            qty - round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_suhoy_all,\r\n        0 as qty_suhoy_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('F'),\r\n            qty - round(qty * gulproc, 0) --\u0444\u0440\u043e\u0432\r\n            ,\r\n            `zone` in ('H'),\r\n            qty - round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_frov_all,\r\n        0 as qty_frov_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('G')\r\n            and `line` in ('1N', '1O'),\r\n            qty - round(qty * gulproc, 0) --\u0430\u043a\u0446\u0438\u0437\r\n            ,\r\n            `zone` in ('V')\r\n            and `line` in ('1N', '1O'),\r\n            qty - round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_akciz_all,\r\n        0 as qty_akciz_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('\u0424'),\r\n            qty - round(qty * gulproc, 0) --\u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0445\u043e\u043b\u043e\u0434\r\n            ,\r\n            `zone` in ('\u042f'),\r\n            qty - round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_holod_all,\r\n        0 as qty_holod_busy,\r\n        sum(\r\n          multiIf(\r\n            `zone` in ('\u0417'),\r\n            qty - round(qty * gulproc, 0) --\u0437\u0430\u043c\u043e\u0440\u043e\u0437\u043a\u0430\r\n            ,\r\n            `zone` in ('\u041b'),\r\n            qty - round(qty * gulproc, 0),\r\n            NULL\r\n          )\r\n        ) as qty_zam_all,\r\n        0 as qty_zam_busy,\r\n        0 as qty_sht_all,\r\n        0 as qty_sht_busy,\r\n        sum(\r\n          if(\r\n            `zone` in ('D'),\r\n            qty - round(qty * gulproc, 0) --\u043c\u0435\u0437\u043e\u043d\u0438\u043d\r\n            ,\r\n            NULL\r\n          )\r\n        ) as qty_mez_all,\r\n        0 as qty_mez_busy\r\n      from\r\n        bin\r\n      where\r\n        toDate(date_time) between toDate(\r\n          {{var('start_date') }}\r\n        )\r\n        and toDate(\r\n          {{var('end_date') }}\r\n        )\r\n        and (\r\n          toHour(date_time) = {{var('hour') }}\r\n          or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\r\n        )\r\n        and\r\n        `zone` in (\r\n          '\u0414', '\u0413', 'F', 'H', 'G', 'V', '\u0424',\r\n          '\u042f', '\u0417', '\u041b', 'D', 'C'\r\n        ) --\u043e\u0442\u0431\u043e\u0440/\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\r\n         and line not in ('1M')\r\n      group by\r\n        date_time,\r\n        `zone`\r\nunion all\r\n      select\r\n        multiIf(\r\n          zone1 = 'A', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\r\n          , zone1 = '\u0414', '\u041f\u043e\u0431\u0435\u0434\u0430'\r\n          , NULL\r\n        ) as client,\r\n        date_time,\r\n        zone1,\r\n        '\u041e\u0442\u0431\u043e\u0440' as name_o,\r\n        0 as qty_suhoy_all,\r\n        0 as qty_suhoy_busy,\r\n        0 as qty_frov_all,\r\n        0 as qty_frov_busy,\r\n        0 as qty_akciz_all,\r\n        0 as qty_akciz_busy,\r\n        0 as qty_holod_all,\r\n        0 as qty_holod_busy,\r\n        0 as qty_zam_all,\r\n        0 as qty_zam_busy,\r\n        sum(\r\n          multiIf(\r\n            zone1 = 'A', qty1\r\n            , zone1 = '\u0414', qty1,\r\n            NULL\r\n          )) as qty_sht_all,\r\n          0 as qty_sht_busy,\r\n          0 as qty_mez_all,\r\n          0 as qty_mez_busy\r\n          from sht\r\n          where\r\n            toDate(date_time) between toDate(\r\n                 {{var('start_date') }}\r\n            )\r\n            and toDate(\r\n              {{var('end_date') }}\r\n            )\r\n            and (\r\n              toHour(date_time) = {{var('hour') }}\r\n              or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\r\n            )\r\n          GROUP BY\r\n            date_time,\r\n            zone1\r\n\r\n        ) t1\r\n        GROUP BY\r\n        t1.client,\r\n        t1.date_time,\r\n        t1.name_o", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_binlabel_otbor_hranenie_new\\binmstr.sql", "compiled": true, "compiled_code": "\n\nwith bin as (\n  select\n    '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\n    now() as date_time,\n    ifNull(wpl.name, '') as nameline,\n    upper(\n      substring(bm.binlabel, 1, 2)\n    ) as line,\n    bz.`zone` as `zone`,\n    toInt32(\n      if(\n        upper(\n          substring(bm.binlabel, 1, 2)\n        )= '1A'\n        and bz.`zone` = 'T',\n        count(bm.binlabel) * 29,\n        count(bm.binlabel)\n      )\n    ) as qty,\n    toInt32(\n      if(\n        client = 'GUL',\n        ifNull(bzl.procent, 50),\n        50\n      )/ 100.00\n    ) as gulproc,\n    toInt32(\n      if(\n        client = 'POB',\n        ifNull(bzl.procent, 50),\n        50\n      )/ 100.00\n    ) as pobproc\n  from\n    WMSTBinMaster bm\n    inner join WMSdataBinZone bz on bz.bin_zone_id = bm.`bin_zone_id`\n    left join WMSPlanogrammaByZone bzl on bzl.`zone` = bz.`zone`\n    AND bzl.binlabel = upper(\n      substring(bm.binlabel, 1, 2)\n    )\n    left join WMSPlanogrammaLeto wpl on wpl.binlabel = upper(\n      substring(bm.binlabel, 1, 2)\n    )\n  where\n    bm.binlabel like '%A-Z0-9%'\n    and bz.`zone` in (\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\n      '\u042f', '\u0417', '\u041b', '\u0413', '\u0414', '\u0411',\n      'E', 'F', 'H', 'D'\n    )\n    and bm.binlabel not in (\n      '1OGM1', '1WTR01', '1PTR01', '3FS1'\n    )\n    and upper(\n      substring(bm.binlabel, 1, 2)\n    ) not in ('1A', '5A') --'1T'\n    and bm.status != 'B'\n  group by\n    upper(\n      substring(bm.binlabel, 1, 2)\n    ),\n    bz.`zone`,\n    gulproc,\n    pobproc,\n    nameline\n  union all\n  select\n    concat(\n      toString(date_time),\n      ' ',\n      toString(date_time)\n    ) as date_time1,\n    *\n  from\n    WMSDWLDBinStrAll wsa\n  where\n    `zone` in (\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\n      '\u042f', '\u0417', '\u041b', '\u0413', '\u0414', '\u0411',\n      'E', 'F', 'H', 'D'\n    )\n    and `line` not in ('1A', '3F')\n  union all\n  select\n    '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\n    now() as DATE_TIME,\n    ifNull(wpl.name, '') as nameline,\n    upper(\n      substring(bm.binlabel, 1, 2)\n    ) as line,\n    bz.`zone` as `zone`,\n    toInt32(\n      if (\n        upper(\n          substring(bm.binlabel, 1, 2)\n        )= 'A'\n        and bz.`zone` = 'T',\n        count(bm.binlabel) * 29,\n        count(bm.binlabel)\n      )\n    ) as qty,\n    toInt32(\n      if(\n        client = 'GUL',\n        ifNull(bzl.procent, 50),\n        50\n      )/ 100.00\n    ) as gulproc,\n    toInt32(\n      if(\n        client = 'POB',\n        ifNull(bzl.procent, 50),\n        50\n      )/ 100.00\n    ) as pobproc\n  from\n    WMSTBinMaster  bm\n    inner join WMSdataBinZone bz on bz.bin_zone_id = bm.`bin_zone_id`\n    left join WMSPlanogrammaByZone bzl on bzl.`zone` = bz.`zone`\n    AND bzl.binlabel = upper(\n      substring(bm.binlabel, 1, 2)\n    )\n    left join WMSPlanogrammaLeto wpl on wpl.binlabel = upper(\n      substring(bm.binlabel, 1, 2)\n    )\n  where\n    bm.binlabel like '%A-Z0-9%'\n    and bz.`zone` in (\n      'A', 'G', 'C', 'N', 'P', 'B', 'V', '\u0424',\n      '\u042f', '\u0417', '\u041b'\n    )\n    and bm.binlabel not in (\n      '1OGM1', '1WTR01', '1PTR01', '3FS1'\n    )\n    and upper(\n      substring(bm.binlabel, 1, 2)\n    ) = '5A'\n    and bm.status != 'B'\n  group by\n    upper(\n      substring(bm.binlabel, 1, 2)\n    ),\n    bz.`zone`,\n    gulproc,\n    pobproc,\n    nameline\n),\nsht as (\nselect\n  '\u0422\u0435\u043a\u0443\u0449\u0430\u044f' date_time1,\n  now() as date_time,\n  null as nameline1,\n  multiIf(\n    pr.attribute1 = 'GUL', 'Gulliver',\n    pr.attribute1 = 'POB', 'Pobeda', '-'\n  ) as attribute1,\n  substring(bm.binlabel, 1, 2) as line1,\n  bm.`zone` as zone1,\n  bm.binlabel as binlabel1,\n  toInt32(bms.seat) as qty1,\n  toInt32(\n    sum(\n      if(\n        pr.attribute1 in ('GUL')\n        and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\n        and pr.size4 <> 0,\n        ceiling(\n          bl.quantity * bl.packsize / pr.size4\n        ),\n        0\n      )\n    )\n  ) as gul1,\n  toInt32(\n    sum(\n      if (\n        pr.attribute1 in ('POB')\n        and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\n        and pr.size4 <> 0,\n        ceiling(\n          bl.quantity * bl.packsize / pr.size4\n        ),\n        0\n      )\n    )\n  ) as pob1,\n  ifNull(\n    (\n      select\n        count(distinct extended)\n      from\n        WMSBinLocat t\n      where\n        t.binlabel = binlabel\n    ),\n    0\n  ) as qtybin1,\n  toInt32(\n    ifNull(\n      (\n        select\n          count(*)\n        from\n          WMSBinLocat b1\n          inner join WMSProdMstr p1 on p1.extended = b1.extended\n        where\n          b1.binlabel = binlabel\n          and p1.attribute1 <> attribute1\n      ),\n      0\n    )\n  ) as qtypr1,\n  null as code1\nfrom\n  WMSBinStr bm\n  left join WMSBinLocat bl on bm.binlabel = bl.binlabel\n  left join WMSProdMstr pr on pr.extended = bl.extended\n  INNER JOIN WMSTBinMaster bms ON bms.binlabel = bm.binlabel\nwhere\n  bm.binlabel like '%A-Z0-9%'\n  and bm.`zone` in ('A', 'P', '\u0414')\n  and substring(bm.binlabel, 1, 2) in ('1A', 'VI')\n  and bms.status != 'B'\ngroup by\n  substring(bm.binlabel, 1, 2),\n  bm.`zone`,\n  bm.binlabel,\n  multiIf(\n    pr.attribute1 = 'GUL', 'Gulliver',\n    pr.attribute1 = 'POB', 'Pobeda', '-'\n  ),\n  pr.attribute1,\n  bms.seat\nunion all\nselect\n  concat(\n    toString(date_time),\n    ' ',\n    toString(date_time)\n  ) as date_time1,\n  date_time,\n  null as NAMELINE1,\n  attribute1,\n  line1,\n  zone1,\n  binlabel,\n  toUInt32(bms.seat) as qty1,\n  toUInt32(gul1) as gul1,\n  toUInt32(pob1) as pob1,\n  toUInt32(qtybin1) as qtybin1,\n  toUInt32(qtypr1) as qtypr1,\n  null as producyt1\nfrom\n  WMSDWLDBinStrShtabel bm\n  INNER JOIN WMSTBinMaster bms ON bms.binlabel = bm.binlabel1\nwhere\n  binlabel like '%A-Z0-9%'\n  and zone1 in ('A', 'P', '\u0414')\n  and substring(binlabel, 1, 2) in ('1A', 'VI')\n    )\n  select\n    t1.client,\n    t1.date_time as date_time,\n    t1.name_o,\n    sum(t1.qty_suhoy_all) as qty_suhoy_all,\n    --sum(t1.qty_suhoy_busy) as qty_suhoy_busy,\n    sum(t1.qty_frov_all) as qty_frov_all,\n    --sum(t1.qty_frov_busy) as qty_frov_busy,\n    sum(t1.qty_akciz_all) as qty_akciz_all,\n    --sum(t1.qty_akciz_busy) as qty_akciz_busy,\n    sum(t1.qty_holod_all) as qty_holod_all,\n    --sum(t1.qty_holod_busy) as qty_holod_busy,\n    sum(t1.qty_zam_all) as qty_zam_all,\n    --sum(t1.qty_zam_busy) as qty_zam_busy,\n    sum(t1.qty_sht_all) as qty_sht_all,\n    --sum(t1.qty_sht_busy) as qty_sht_busy,\n    sum(t1.qty_mez_all) as qty_mez_all --sum(t1.qty_mez_busy) as qty_mez_busy\n  from\n    (\n            select\n        '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440' as client,\n        date_time,\n        `zone`,\n        multiIf(\n          `zone` in ('A', 'E', 'G', '\u0424', '\u0417', 'D'),\n          '\u041e\u0442\u0431\u043e\u0440' ,`zone` in ('C', 'H', 'V', '\u042f', '\u041b'),\n          '\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\n          NULL\n        ) as name_o,\n        sum(\n          multiIf(\n            `zone` in ('A')\n            and line in (\n              '1D', '1E', '1F', '1G', '1H', '1I', '1J',\n              '1K', '1L', '1M'\n            ),\n            round(qty * gulproc, 0) --\u0441\u0443\u0445\u043e\u0439\n            ,\n            `zone` in ('C', 'V')\n            and line in (\n              '1D', '1E', '1F', '1G', '1H', '1I', '1J',\n              '1K', '1L', '1M'\n            ),\n            round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_suhoy_all,\n        0 as qty_suhoy_busy,\n        sum(\n          multiIf (\n            `zone` in ('E'),\n            round(qty * gulproc, 0) --\u0444\u0440\u043e\u0432\n            ,\n            `zone` in ('H'),\n            round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_frov_all,\n        0 as qty_frov_busy,\n        sum(\n          multiIf(\n            `zone` in ('G')\n            and line in ('1N', '1O'),\n            round(qty * gulproc, 0) --\u0430\u043a\u0446\u0438\u0437\n            ,\n            `zone` in ('V')\n            and line in ('1N', '1O'),\n            round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_akciz_all,\n        0 as qty_akciz_busy,\n        sum(\n          multiIf(\n            `zone` in ('\u0424'), round(qty * gulproc, 0), --\u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0445\u043e\u043b\u043e\u0434\n\n            `zone` in ('\u042f'), round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_holod_all,\n        0 as qty_holod_busy,\n        sum(\n          multiIf(\n            `zone` in ('\u0417'),\n            round(qty * gulproc, 0) --\u0437\u0430\u043c\u043e\u0440\u043e\u0437\u043a\u0430\n            ,\n            `zone` in ('\u041b'),\n            round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_zam_all,\n        0 as qty_zam_busy,\n        0 as qty_sht_all,\n--        \u0448\u0442\u0430\u0431\u0435\u043b\u044c\n        0 as qty_sht_busy,\n        sum(\n          if(\n            `zone` in ('D'),\n            round(qty * gulproc, 0) --\u043c\u0435\u0437\u043e\u043d\u0438\u043d\n            ,NULL)\n        ) as qty_mez_all,\n        0 as qty_mez_busy\n      from\n        bin\n      where\n        toDate(date_time) between toDate(\n          2022-12-31\n        )\n        and toDate(\n          2022-12-31\n        )\n        and (\n          toHour(date_time) = 19\n          or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\n        )\n        and\n        `zone` in (\n          'A', 'C', 'E', 'H', 'G', 'V', '\u0424', '\u042f',\n          '\u0417', '\u041b', 'D'\n        ) --\u043e\u0442\u0431\u043e\u0440/\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\n      group by\n        date_time,\n        `zone`\n        union all\n      select\n        '\u041f\u043e\u0431\u0435\u0434\u0430' as client,\n        date_time,\n        `zone`,\n        multiIf(\n          `zone` in ('\u0414', 'F', 'G', '\u0424', '\u0417', 'D'),\n          '\u041e\u0442\u0431\u043e\u0440',\n          `zone` in ('\u0413', 'H', 'V', '\u042f', '\u041b', 'C'),\n          '\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435',\n          NULL\n        ) as name_o,\n        sum(\n          multiIf(\n            `zone` in ('\u0414')\n            and `line` in (\n              'VA', 'VB', 'VC', 'VD', 'VE', 'VF', 'VG',\n              'VH', 'VJ', 'VK', '1D'\n            ),\n            qty - round(qty * gulproc, 0) --\u0441\u0443\u0445\u043e\u0439\n            ,\n            `zone` in ('\u0413', 'C', 'V')\n            and `line` in (\n              'VA', 'VB', 'VC', 'VD', 'VE', 'VF', 'VG',\n              'VH', 'VJ', 'VK', '1D', '1M'\n            ),\n            qty - round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_suhoy_all,\n        0 as qty_suhoy_busy,\n        sum(\n          multiIf(\n            `zone` in ('F'),\n            qty - round(qty * gulproc, 0) --\u0444\u0440\u043e\u0432\n            ,\n            `zone` in ('H'),\n            qty - round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_frov_all,\n        0 as qty_frov_busy,\n        sum(\n          multiIf(\n            `zone` in ('G')\n            and `line` in ('1N', '1O'),\n            qty - round(qty * gulproc, 0) --\u0430\u043a\u0446\u0438\u0437\n            ,\n            `zone` in ('V')\n            and `line` in ('1N', '1O'),\n            qty - round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_akciz_all,\n        0 as qty_akciz_busy,\n        sum(\n          multiIf(\n            `zone` in ('\u0424'),\n            qty - round(qty * gulproc, 0) --\u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0445\u043e\u043b\u043e\u0434\n            ,\n            `zone` in ('\u042f'),\n            qty - round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_holod_all,\n        0 as qty_holod_busy,\n        sum(\n          multiIf(\n            `zone` in ('\u0417'),\n            qty - round(qty * gulproc, 0) --\u0437\u0430\u043c\u043e\u0440\u043e\u0437\u043a\u0430\n            ,\n            `zone` in ('\u041b'),\n            qty - round(qty * gulproc, 0),\n            NULL\n          )\n        ) as qty_zam_all,\n        0 as qty_zam_busy,\n        0 as qty_sht_all,\n        0 as qty_sht_busy,\n        sum(\n          if(\n            `zone` in ('D'),\n            qty - round(qty * gulproc, 0) --\u043c\u0435\u0437\u043e\u043d\u0438\u043d\n            ,\n            NULL\n          )\n        ) as qty_mez_all,\n        0 as qty_mez_busy\n      from\n        bin\n      where\n        toDate(date_time) between toDate(\n          2022-12-31\n        )\n        and toDate(\n          2022-12-31\n        )\n        and (\n          toHour(date_time) = 19\n          or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\n        )\n        and\n        `zone` in (\n          '\u0414', '\u0413', 'F', 'H', 'G', 'V', '\u0424',\n          '\u042f', '\u0417', '\u041b', 'D', 'C'\n        ) --\u043e\u0442\u0431\u043e\u0440/\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\n         and line not in ('1M')\n      group by\n        date_time,\n        `zone`\nunion all\n      select\n        multiIf(\n          zone1 = 'A', '\u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\n          , zone1 = '\u0414', '\u041f\u043e\u0431\u0435\u0434\u0430'\n          , NULL\n        ) as client,\n        date_time,\n        zone1,\n        '\u041e\u0442\u0431\u043e\u0440' as name_o,\n        0 as qty_suhoy_all,\n        0 as qty_suhoy_busy,\n        0 as qty_frov_all,\n        0 as qty_frov_busy,\n        0 as qty_akciz_all,\n        0 as qty_akciz_busy,\n        0 as qty_holod_all,\n        0 as qty_holod_busy,\n        0 as qty_zam_all,\n        0 as qty_zam_busy,\n        sum(\n          multiIf(\n            zone1 = 'A', qty1\n            , zone1 = '\u0414', qty1,\n            NULL\n          )) as qty_sht_all,\n          0 as qty_sht_busy,\n          0 as qty_mez_all,\n          0 as qty_mez_busy\n          from sht\n          where\n            toDate(date_time) between toDate(\n                 2022-12-31\n            )\n            and toDate(\n              2022-12-31\n            )\n            and (\n              toHour(date_time) = 19\n              or date_time1 = '\u0442\u0435\u043a\u0443\u0449\u0430\u044f'\n            )\n          GROUP BY\n            date_time,\n            zone1\n\n        ) t1\n        GROUP BY\n        t1.client,\n        t1.date_time,\n        t1.name_o", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.itog": {"database": null, "schema": "db1", "name": "itog", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_binlabel_otbor_hranenie_new\\itog.sql", "original_file_path": "models\\sp_web_rep_binlabel_otbor_hranenie_new\\itog.sql", "unique_id": "model.gulliver.itog", "fqn": ["gulliver", "sp_web_rep_binlabel_otbor_hranenie_new", "itog"], "alias": "itog", "checksum": {"name": "sha256", "checksum": "425bb2c880a9696d114cf7853c314722c23cc709ae39d38485e071ffc430828d"}, "config": {"enabled": true, "alias": "itog", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "itog"}, "created_at": 1692256682.3164465, "relation_name": "db1.itog", "raw_code": "{{ config(materialized='table', alias=\"itog\") }}\r\n\r\nselect\r\n\tclient,\r\n\t date_time, name_o,\r\n\tqty_suhoy_all, qty_suhoy, proc_suhoy_busy,\r\n\tqty_frov_all, qty_frov, proc_frov_busy,\r\n\tqty_akciz_all, qty_akciz, proc_akciz_busy,\r\n\tqty_holod_all, qty_holod, proc_holod_busy,\r\n\tqty_zam_all, qty_zam, proc_zam_busy,\r\n\tqty_sht_all, qty_sht, proc_sht_busy,\r\n\tqty_mez_all, qty_mez, proc_mez_busy,\r\n\tqty_suhoy_all+qty_frov_all+qty_akciz_all+qty_holod_all+qty_zam_all+qty_sht_all+qty_mez_all as qty_all,\r\n\tqty_suhoy+qty_frov+qty_akciz+qty_holod+qty_zam+qty_sht+qty_mez as qty_busy,\r\n\t((qty_suhoy+qty_frov+qty_akciz+qty_holod+qty_zam+qty_sht+qty_mez)/(qty_suhoy_all+qty_frov_all+qty_akciz_all+qty_holod_all+qty_zam_all+qty_sht_all+qty_mez_all))*100 as proc_qty_busy,\r\n\tsort\r\nfrom (\r\nselect\r\n\tbl.client,\r\n\tbl.date_time,\r\n\tbl.name_o,\r\n\tbm.qty_suhoy_all,\r\n\tbl.qty_suhoy,\r\n\t(multiIf( bm.qty_suhoy_all = 0 , 0 , (bl.qty_suhoy/bm.qty_suhoy_all)*100 )) as proc_suhoy_busy,\r\n\tbm.qty_frov_all,\r\n\tbl.qty_frov,\r\n\t(multiIf( bm.qty_frov_all = 0 , 0 , (bl.qty_frov/bm.qty_frov_all)*100 )) as proc_frov_busy,\r\n\tbm.qty_akciz_all,\r\n\tbl.qty_akciz,\r\n\t(multiIf( bm.qty_akciz_all = 0 , 0 , (bl.qty_akciz/bm.qty_akciz_all)*100 )) as proc_akciz_busy,\r\n\tbm.qty_holod_all,\r\n\tbl.qty_holod,\r\n\t(multiIf( bm.qty_holod_all = 0 , 0 , (bl.qty_holod/bm.qty_holod_all)*100 )) as proc_holod_busy,\r\n\tbm.qty_zam_all,\r\n\tbl.qty_zam,\r\n\t(multiIf( bm.qty_zam_all = 0 , 0 , (bl.qty_zam/bm.qty_zam_all)*100)) as proc_zam_busy,\r\n\tifNull(bm.qty_sht_all,0) as qty_sht_all,\r\n\tbl.qty_sht,\r\n\t(multiIf( bm.qty_sht_all = 0 , 0 , (bl.qty_sht/bm.qty_sht_all)*100 )) as proc_sht_busy,\r\n\tifNull(bm.qty_mez_all,0) as qty_mez_all,\r\n\tbl.qty_mez,\r\n\t(multiIf( ifNull(bm.qty_mez_all,0) =0 , 0 , (bl.qty_mez/bm.qty_mez_all)*100 )) as proc_mez_busy,\r\n\t0 as sort\r\nfrom {{ref('binloc')}} bl\r\njoin {{ref('binmstr')}} bm on bm.client = bl.client and toDate(bl.date_time) = toDate(bm.date_time) and bl.name_o = bm.name_o\r\nunion all\r\nselect\r\n\tconcat(toString('\u0418\u0442\u043e\u0433\u043e '),bl.name_o )as client,\r\n\tbl.date_time,\r\n\tbl.name_o,\r\n\tsum(qty_suhoy_all) as qty_suhoy_all_sum,\r\n\tsum(qty_suhoy) as qty_suhoy_sum_sum,\r\n\t(if( sum(qty_suhoy_all) = 0, 0, sum(qty_suhoy)/sum(qty_suhoy_all)))*100 as proc_suhoy_busy,\r\n\tsum(qty_frov_all) as qty_frov_all_sum,\r\n\tsum(qty_frov) as qty_frov_sum,\r\n\t(if( sum(qty_frov_all) = 0, 0, sum(qty_frov)/sum(qty_frov_all)))*100 as proc_frov_busy,\r\n\tsum(qty_akciz_all) as qty_akciz_all_sum,\r\n\tsum(qty_akciz) as qty_akciz_sum,\r\n\t(if( sum(qty_akciz_all) = 0, 0, sum(qty_akciz)/sum(qty_akciz_all)))*100 as proc_akciz_busy,\r\n\tsum(qty_holod_all) as qty_holod_all_sum,\r\n\tsum(qty_holod) as qty_holod_sum,\r\n\t(if( sum(qty_holod_all) = 0, 0, sum(qty_holod)/sum(qty_holod_all)))*100 as proc_holod_busy,\r\n\tsum(qty_zam_all) as qty_zam_all_sum,\r\n\tsum(qty_zam) as qty_zam_sum,\r\n\t(if( sum(qty_zam_all) = 0, 0, sum(qty_zam)/sum(qty_zam_all)))*100 as proc_zam_busy,\r\n\tsum(qty_sht_all) as qty_sht_all_sum,\r\n\tsum(qty_sht) as qty_sht_sum,\r\n\t(if( sum(qty_sht_all) = 0, 0, sum(qty_sht)/sum(qty_sht_all)))*100 as proc_sht_busy,\r\n\tsum(ifNull(qty_mez_all,0)) as qty_mez_all_sum,\r\n\tsum(ifNull(qty_mez,0)) as qty_mez_sum,\r\n\t(if( sum(ifNull(qty_mez_all,0)) = 0, 0, sum(qty_mez)/sum(qty_mez_all)))*100 as proc_mez_busy,\r\n\trow_number() over(order by bl.name_o asc) as sort\r\nfrom {{ref('binloc')}} bl\r\njoin {{ref('binmstr')}} bm on bm.client = bl.client and toDate(bl.date_time) = toDate(bm.date_time) and bl.name_o = bm.name_o\r\ngroup by bl.date_time, bl.name_o\r\nunion all\r\nselect\r\n\tconcat(toString('\u0418\u0442\u043e\u0433\u043e '),bl.client) as client,\r\n\tbl.date_time,\r\n\ttoString('\u041e\u0442\u0431\u043e\u0440+\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435') as name_o,\r\n\tsum(qty_suhoy_all) as qty_suhoy_all_sum,\r\n\tsum(qty_suhoy) as qty_suhoy_sum,\r\n\t(if( sum(qty_suhoy_all) = 0, 0, sum(qty_suhoy)/sum(qty_suhoy_all)))*100 as proc_suhoy_busy,\r\n\tsum(qty_frov_all) as qty_frov_all_sum,\r\n\tsum(qty_frov) as qty_frov_sum,\r\n\t(if( sum(qty_frov_all) = 0 , 0, sum(qty_frov)/sum(qty_frov_all)))*100 as proc_frov_busy,\r\n\tsum(qty_akciz_all) as qty_akciz_all_sum,\r\n\tsum(qty_akciz) as qty_akciz_sum,\r\n\t(if( sum(qty_akciz_all) = 0, 0, sum(qty_akciz)/sum(qty_akciz_all)))*100 as proc_akciz_busy,\r\n\tsum(qty_holod_all) as qty_holod_all_sum,\r\n\tsum(qty_holod) as qty_holod_sum,\r\n\t(if( sum(qty_holod_all) = 0, 0, sum(qty_holod)/sum(qty_holod_all)))*100 as proc_holod_busy,\r\n\tsum(qty_zam_all) as qty_zam_all_sum,\r\n\tsum(qty_zam) as qty_zam_sum,\r\n\t(if( sum(qty_zam_all) = 0, 0, sum(qty_zam)/sum(qty_zam_all)))*100 as proc_zam_busy,\r\n\tsum(qty_sht_all) as qty_sht_all_sum,\r\n\tsum(qty_sht) as qty_sht_sum,\r\n\t(if( sum(qty_sht_all) = 0, 0, sum(qty_sht)/sum(qty_sht_all)))*100 as proc_sht_busy,\r\n\tsum(ifNull(qty_mez_all,0)) as qty_mez_all_sum,\r\n\tsum(ifNull(qty_mez,0)) as qty_mez_sum,\r\n\t(if( sum(ifNull(qty_mez_all,0)) = 0, 0, sum(qty_mez)/sum(qty_mez_all)))*100 as proc_mez_busy,\r\n\trow_number() over(order by bl.client asc) as sort\r\nfrom {{ref('binloc')}} bl\r\njoin {{ref('binmstr')}} bm on bm.client = bl.client and toDate(bl.date_time) = toDate(bm.date_time) and bl.name_o = bm.name_o\r\n  group by bl.date_time, bl.client\r\n) r\r\norder by name_o, sort", "language": "sql", "refs": [["binloc"], ["binmstr"], ["binloc"], ["binmstr"], ["binloc"], ["binmstr"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.binloc", "model.gulliver.binmstr", "model.gulliver.binloc", "model.gulliver.binmstr", "model.gulliver.binloc", "model.gulliver.binmstr"]}, "compiled_path": null}, "model.gulliver.Rep_PlanFakt": {"database": null, "schema": "db1", "name": "Rep_PlanFakt", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_level_service_procent\\Rep_PlanFakt.sql", "original_file_path": "models\\sp_web_rep_level_service_procent\\Rep_PlanFakt.sql", "unique_id": "model.gulliver.Rep_PlanFakt", "fqn": ["gulliver", "sp_web_rep_level_service_procent", "Rep_PlanFakt"], "alias": "dbt_tmp_Rep_PlanFakt", "checksum": {"name": "sha256", "checksum": "b2f458935b73330ebc49bc68df9429878d44bf1650985f4b3cb2ccb76ae161c7"}, "config": {"enabled": true, "alias": "dbt_tmp_Rep_PlanFakt", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_tmp_Rep_PlanFakt"}, "created_at": 1692256682.3164465, "relation_name": "db1.dbt_tmp_Rep_PlanFakt", "raw_code": "/*\r\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 3. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f  \u0442\u0430\u0431\u043b\u0438\u0446\u0430: Rep_PlanFakt\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_tmp_Rep_PlanFakt\") }}\r\n\r\n{% set DATE1    = var(\"sp_web_rep_level_service_procent_date1\") %}\r\n{% set DATE2    = var(\"sp_web_rep_level_service_procent_date2\") %}\r\n{% set TYPE     = var(\"sp_web_rep_level_service_procent_type\") %}\r\n\r\nSELECT \r\n\tph.date_reqd                        AS date_reqd, \r\n\tph.packslip                         AS packslip, \r\n\tsd.product                          AS product, \r\n\tsd.extended                         AS extended, \r\n\tsd.qty_orignl                       AS qty_orignl,  \r\n\tsd.qty_topick                       AS qty_topick, \r\n\tsd.qty_picked                       AS qty_picked,\r\n\tpr.prod_udf1                        AS prod_udf1, \r\n\tph.cust_num                         AS cust_num, \r\n\tph.userid                           AS userid, \r\n\tpr.attribute1                       AS attribute1,\r\n\t{% if TYPE == 0 %}\r\n    CAST(NULL AS Nullable(String))\r\n    {% else %}\r\n    ph.ship_name\r\n    {% endif %}                         AS ship_name,\r\n\tCOALESCE((SELECT zone FROM {{ ref('service_procent_zone') }}), '') AS `zone`,\r\n\tsd.n_alloc                          AS n_alloc\r\nFROM {{ ref('shipline_all') }} sd\r\nINNER JOIN WMSdataShipHist ph ON ph.packslip=sd.packslip\r\nINNER JOIN WMSdataProdMstr pr ON pr.extended=sd.extended\r\nWHERE ph.extra3 IN ('GUL','POB','FRGUL','FRPOB','ZOR','EGAIS3GUL','EGAIS3POB', 'ZMGUL', 'ZMPOB')\r\nAND ph.date_reqd BETWEEN '{{ DATE1 }}' and '{{ DATE2 }}'\r\n\r\nUNION ALL\r\n\r\nSELECT\r\n\tph.date_reqd                        AS date_reqd, \r\n\tph.packslip                         AS packslip, \r\n\tsd.product                          AS product, \r\n\tsd.extended                         AS extended, \r\n\tsd.qty_orignl                       AS qty_orignl,  \r\n\tsd.qty_topick                       AS qty_topick, \r\n\tsd.qty_picked                       AS qty_picked,\r\n\tpr.prod_udf1                        AS prod_udf1, \r\n\tph.cust_num                         AS cust_num, \r\n\tph.userid                           AS userid, \r\n\tpr.attribute1                       AS attribute1,\r\n\t{% if TYPE == 0 %}\r\n    CAST(NULL AS Nullable(String))\r\n    {% else %}\r\n    ph.ship_name\r\n    {% endif %}                         AS ship_name,\r\n\tCOALESCE((SELECT zone FROM {{ ref('service_procent_zone') }}), '') AS `zone`,\r\n\tsd.n_alloc                          AS n_alloc\r\nFROM WMSdataPickdetl sd\r\nINNER JOIN WMSdataPickHead ph ON ph.packslip=sd.packslip\r\nINNER JOIN WMSdataProdMstr pr ON pr.extended=sd.extended\r\nWHERE ph.extra3 IN ('GUL','POB','FRGUL','FRPOB','ZOR','EGAIS3GUL','EGAIS3POB', 'ZMGUL', 'ZMPOB')\r\nAND ph.date_reqd BETWEEN '{{ DATE1 }}' and '{{ DATE2 }}'", "language": "sql", "refs": [["service_procent_zone"], ["shipline_all"], ["service_procent_zone"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.service_procent_zone", "model.gulliver.shipline_all", "model.gulliver.service_procent_zone"]}, "compiled_path": null}, "model.gulliver.service_procent_zone": {"database": null, "schema": "db1", "name": "service_procent_zone", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_level_service_procent\\service_procent_zone.sql", "original_file_path": "models\\sp_web_rep_level_service_procent\\service_procent_zone.sql", "unique_id": "model.gulliver.service_procent_zone", "fqn": ["gulliver", "sp_web_rep_level_service_procent", "service_procent_zone"], "alias": "dbt_tmp_service_procent_zone", "checksum": {"name": "sha256", "checksum": "d93dd1c490b6846da0283131494bcd48e0e8cecb44cd32189332291bf0677a63"}, "config": {"enabled": true, "alias": "dbt_tmp_service_procent_zone", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_level_service_procent\\service_procent_zone.sql", "deferred": false, "unrendered_config": {"materialized": "view", "alias": "dbt_tmp_service_procent_zone"}, "created_at": 1692256682.3376296, "relation_name": "db1.dbt_tmp_service_procent_zone", "raw_code": "/*\r\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 2. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f  \u0442\u0430\u0431\u043b\u0438\u0446\u0430: zone\r\n*/\r\n\r\n{{ config(materialized='view', alias=\"dbt_tmp_service_procent_zone\") }}\r\n\r\nSELECT\r\n    tz.zone AS zone\r\nFROM WMSdataHandleCode th\r\nINNER JOIN WMSdataBinHandleCode tbh ON tbh.handlecode_id=th.handlecode_id\r\nINNER JOIN WMSdataBinMaster tbm ON tbm.bin_master_id=tbh.bin_master_id\r\nINNER JOIN WMSdataBinZone tz ON tz.bin_zone_id=tbm.bin_zone_id\r\nINNER JOIN (SELECT handlecode FROM WMSdataProdMstr) pr ON th.handlecode = pr.handlecode\r\nWHERE tbm.bin_type_id=1 AND tz.zone <> 'Q'\r\nLIMIT 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_level_service_procent\\service_procent_zone.sql", "compiled": true, "compiled_code": "/*\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 2. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f  \u0442\u0430\u0431\u043b\u0438\u0446\u0430: zone\n*/\n\n\n\nSELECT\n    tz.zone AS zone\nFROM WMSdataHandleCode th\nINNER JOIN WMSdataBinHandleCode tbh ON tbh.handlecode_id=th.handlecode_id\nINNER JOIN WMSdataBinMaster tbm ON tbm.bin_master_id=tbh.bin_master_id\nINNER JOIN WMSdataBinZone tz ON tz.bin_zone_id=tbm.bin_zone_id\nINNER JOIN (SELECT handlecode FROM WMSdataProdMstr) pr ON th.handlecode = pr.handlecode\nWHERE tbm.bin_type_id=1 AND tz.zone <> 'Q'\nLIMIT 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.shipline_all": {"database": null, "schema": "db1", "name": "shipline_all", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_level_service_procent\\shipline_all.sql", "original_file_path": "models\\sp_web_rep_level_service_procent\\shipline_all.sql", "unique_id": "model.gulliver.shipline_all", "fqn": ["gulliver", "sp_web_rep_level_service_procent", "shipline_all"], "alias": "dbt_tmp_shipline_all", "checksum": {"name": "sha256", "checksum": "0604e789d81b5fd51a4c43742f8658c1214a613cd872d3a96fec6bf185f6cd77"}, "config": {"enabled": true, "alias": "dbt_tmp_shipline_all", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_level_service_procent\\shipline_all.sql", "deferred": false, "unrendered_config": {"materialized": "view", "alias": "dbt_tmp_shipline_all"}, "created_at": 1692256682.3376296, "relation_name": "db1.dbt_tmp_shipline_all", "raw_code": "/*\r\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 1. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f  \u0442\u0430\u0431\u043b\u0438\u0446\u0430: shipline_all\r\n*/\r\n\r\n{{ config(materialized='view', alias=\"dbt_tmp_shipline_all\") }}\r\n\r\nSELECT\r\n\trowid,\r\n\tallocated,\r\n\talt_whse,\r\n\tattribut10,\r\n\tattribute1,\r\n\tattribute2,\r\n\tattribute3,\r\n\tattribute4,\r\n\tattribute5,\r\n\tattribute6,\r\n\tattribute7,\r\n\tattribute8,\r\n\tattribute9,\r\n\tbilleddate,\r\n\tbinlabel,\r\n\tbo_number,\r\n\tcomment_in,\r\n\tcomplete,\r\n\tcounted,\r\n\tcounter,\r\n\tctry_orig,\r\n\tcust_num,\r\n\tcust_po,\r\n\tcust_seq,\r\n\tcust_xref,\r\n\tdays_expiry,\r\n\tdescript,\r\n\tdiscount,\r\n\tdrop_pline,\r\n\tdrop_po,\r\n\tedp_num,\r\n\textended,\r\n\textra,\r\n\textra1,\r\n\textra2,\r\n\textra3,\r\n\textra4,\r\n\textra5,\r\n\tfairshare,\r\n\thazmat,\r\n\theld_repl,\r\n\theld_short,\r\n\thost_order,\r\n\thost_seq,\r\n\tinnerpack,\r\n\tinstruct1,\r\n\tinstruct2,\r\n\tinstruct3,\r\n\tinstruct4,\r\n\tinstruct5,\r\n\tinstruct6,\r\n\tinstruct7,\r\n\tis_cmpn,\r\n\tis_complete,\r\n\tis_kit,\r\n\tkit_type,\r\n\tlicenseplate,\r\n\tlocation,\r\n\tmfg_backflush,\r\n\tn_alloc,\r\n\torder_num,\r\n\torder_seq,\r\n\tpacksize,\r\n\tpackslip,\r\n\tpick_attr,\r\n\tpicklines,\r\n\tpin_number,\r\n\tpri_sequ,\r\n\tprod_class,\r\n\tproduct,\r\n\tqty_kit,\r\n\tqty_orignl,\r\n\tqty_picked,\r\n\tqty_topick,\r\n\treservetype,\r\n\tretail_pr,\r\n\tsell_price,\r\n\tshare_id,\r\n\tsubstitute,\r\n\ttax1,\r\n\ttax2,\r\n\ttax3,\r\n\ttax4,\r\n\ttkt_descr,\r\n\ttotlabel,\r\n\tunit_price,\r\n\tunitmeasur,\r\n\tuom_text,\r\n\tupc,\r\n\tvalue_pr,\r\n\tvend_num,\r\n\tvendor_num,\r\n\tvlp,\r\n\twarehouse,\r\n\twave,\r\n\tzone,\r\n\tpurge_flag,\r\n\tpd_udf1,\r\n\tpd_udf2\r\nFROM WMSdataShipline\r\nUNION ALL\r\nSELECT\r\n\trowid,\r\n\tallocated,\r\n\talt_whse,\r\n\tattribut10,\r\n\tattribute1,\r\n\tattribute2,\r\n\tattribute3,\r\n\tattribute4,\r\n\tattribute5,\r\n\tattribute6,\r\n\tattribute7,\r\n\tattribute8,\r\n\tattribute9,\r\n\tbilleddate,\r\n\tbinlabel,\r\n\tbo_number,\r\n\tcomment_in,\r\n\tcomplete,\r\n\tcounted,\r\n\tcounter,\r\n\tctry_orig,\r\n\tcust_num,\r\n\tcust_po,\r\n\tcust_seq,\r\n\tcust_xref,\r\n\tdays_expiry,\r\n\tdescript,\r\n\tdiscount,\r\n\tdrop_pline,\r\n\tdrop_po,\r\n\tedp_num,\r\n\textended,\r\n\textra,\r\n\textra1,\r\n\textra2,\r\n\textra3,\r\n\textra4,\r\n\textra5,\r\n\tfairshare,\r\n\thazmat,\r\n\theld_repl,\r\n\theld_short,\r\n\thost_order,\r\n\thost_seq,\r\n\tinnerpack,\r\n\tinstruct1,\r\n\tinstruct2,\r\n\tinstruct3,\r\n\tinstruct4,\r\n\tinstruct5,\r\n\tinstruct6,\r\n\tinstruct7,\r\n\tis_cmpn,\r\n\tis_complete,\r\n\tis_kit,\r\n\tkit_type,\r\n\tlicenseplate,\r\n\tlocation,\r\n\tmfg_backflush,\r\n\tn_alloc,\r\n\torder_num,\r\n\torder_seq,\r\n\tpacksize,\r\n\tpackslip,\r\n\tpick_attr,\r\n\tpicklines,\r\n\tpin_number,\r\n\tpri_sequ,\r\n\tprod_class,\r\n\tproduct,\r\n\tqty_kit,\r\n\tqty_orignl,\r\n\tqty_picked,\r\n\tqty_topick,\r\n\treservetype,\r\n\tretail_pr,\r\n\tsell_price,\r\n\tshare_id,\r\n\tsubstitute,\r\n\ttax1,\r\n\ttax2,\r\n\ttax3,\r\n\ttax4,\r\n\ttkt_descr,\r\n\ttotlabel,\r\n\tunit_price,\r\n\tunitmeasur,\r\n\tuom_text,\r\n\tupc,\r\n\tvalue_pr,\r\n\tvend_num,\r\n\tvendor_num,\r\n\tvlp,\r\n\twarehouse,\r\n\twave,\r\n\tzone,\r\n\tpurge_flag,\r\n\tpd_udf1,\r\n\tpd_udf2\r\nFROM WMSdataShipline2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_level_service_procent\\shipline_all.sql", "compiled": true, "compiled_code": "/*\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 1. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f  \u0442\u0430\u0431\u043b\u0438\u0446\u0430: shipline_all\n*/\n\n\n\nSELECT\n\trowid,\n\tallocated,\n\talt_whse,\n\tattribut10,\n\tattribute1,\n\tattribute2,\n\tattribute3,\n\tattribute4,\n\tattribute5,\n\tattribute6,\n\tattribute7,\n\tattribute8,\n\tattribute9,\n\tbilleddate,\n\tbinlabel,\n\tbo_number,\n\tcomment_in,\n\tcomplete,\n\tcounted,\n\tcounter,\n\tctry_orig,\n\tcust_num,\n\tcust_po,\n\tcust_seq,\n\tcust_xref,\n\tdays_expiry,\n\tdescript,\n\tdiscount,\n\tdrop_pline,\n\tdrop_po,\n\tedp_num,\n\textended,\n\textra,\n\textra1,\n\textra2,\n\textra3,\n\textra4,\n\textra5,\n\tfairshare,\n\thazmat,\n\theld_repl,\n\theld_short,\n\thost_order,\n\thost_seq,\n\tinnerpack,\n\tinstruct1,\n\tinstruct2,\n\tinstruct3,\n\tinstruct4,\n\tinstruct5,\n\tinstruct6,\n\tinstruct7,\n\tis_cmpn,\n\tis_complete,\n\tis_kit,\n\tkit_type,\n\tlicenseplate,\n\tlocation,\n\tmfg_backflush,\n\tn_alloc,\n\torder_num,\n\torder_seq,\n\tpacksize,\n\tpackslip,\n\tpick_attr,\n\tpicklines,\n\tpin_number,\n\tpri_sequ,\n\tprod_class,\n\tproduct,\n\tqty_kit,\n\tqty_orignl,\n\tqty_picked,\n\tqty_topick,\n\treservetype,\n\tretail_pr,\n\tsell_price,\n\tshare_id,\n\tsubstitute,\n\ttax1,\n\ttax2,\n\ttax3,\n\ttax4,\n\ttkt_descr,\n\ttotlabel,\n\tunit_price,\n\tunitmeasur,\n\tuom_text,\n\tupc,\n\tvalue_pr,\n\tvend_num,\n\tvendor_num,\n\tvlp,\n\twarehouse,\n\twave,\n\tzone,\n\tpurge_flag,\n\tpd_udf1,\n\tpd_udf2\nFROM WMSdataShipline\nUNION ALL\nSELECT\n\trowid,\n\tallocated,\n\talt_whse,\n\tattribut10,\n\tattribute1,\n\tattribute2,\n\tattribute3,\n\tattribute4,\n\tattribute5,\n\tattribute6,\n\tattribute7,\n\tattribute8,\n\tattribute9,\n\tbilleddate,\n\tbinlabel,\n\tbo_number,\n\tcomment_in,\n\tcomplete,\n\tcounted,\n\tcounter,\n\tctry_orig,\n\tcust_num,\n\tcust_po,\n\tcust_seq,\n\tcust_xref,\n\tdays_expiry,\n\tdescript,\n\tdiscount,\n\tdrop_pline,\n\tdrop_po,\n\tedp_num,\n\textended,\n\textra,\n\textra1,\n\textra2,\n\textra3,\n\textra4,\n\textra5,\n\tfairshare,\n\thazmat,\n\theld_repl,\n\theld_short,\n\thost_order,\n\thost_seq,\n\tinnerpack,\n\tinstruct1,\n\tinstruct2,\n\tinstruct3,\n\tinstruct4,\n\tinstruct5,\n\tinstruct6,\n\tinstruct7,\n\tis_cmpn,\n\tis_complete,\n\tis_kit,\n\tkit_type,\n\tlicenseplate,\n\tlocation,\n\tmfg_backflush,\n\tn_alloc,\n\torder_num,\n\torder_seq,\n\tpacksize,\n\tpackslip,\n\tpick_attr,\n\tpicklines,\n\tpin_number,\n\tpri_sequ,\n\tprod_class,\n\tproduct,\n\tqty_kit,\n\tqty_orignl,\n\tqty_picked,\n\tqty_topick,\n\treservetype,\n\tretail_pr,\n\tsell_price,\n\tshare_id,\n\tsubstitute,\n\ttax1,\n\ttax2,\n\ttax3,\n\ttax4,\n\ttkt_descr,\n\ttotlabel,\n\tunit_price,\n\tunitmeasur,\n\tuom_text,\n\tupc,\n\tvalue_pr,\n\tvend_num,\n\tvendor_num,\n\tvlp,\n\twarehouse,\n\twave,\n\tzone,\n\tpurge_flag,\n\tpd_udf1,\n\tpd_udf2\nFROM WMSdataShipline2", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.sp_web_rep_level_service_procent": {"database": null, "schema": "db1", "name": "sp_web_rep_level_service_procent", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_level_service_procent\\sp_web_rep_level_service_procent.sql", "original_file_path": "models\\sp_web_rep_level_service_procent\\sp_web_rep_level_service_procent.sql", "unique_id": "model.gulliver.sp_web_rep_level_service_procent", "fqn": ["gulliver", "sp_web_rep_level_service_procent", "sp_web_rep_level_service_procent"], "alias": "sp_web_rep_level_service_procent", "checksum": {"name": "sha256", "checksum": "45242dbc258a5f6b2285e3b257b6be8996621259b1b307d9899ea12907e2e3d1"}, "config": {"enabled": true, "alias": "sp_web_rep_level_service_procent", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "sp_web_rep_level_service_procent"}, "created_at": 1692256682.3506725, "relation_name": "db1.sp_web_rep_level_service_procent", "raw_code": "/*\r\n    WMSdata.sp_web_rep_level_service_procent \u0428\u0430\u0433 4. \u0418\u0422\u041e\u0413\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"sp_web_rep_level_service_procent\") }}\r\n\r\n{% set client   = var(\"sp_web_rep_level_service_procent_client\") %}\r\n{% set product  = var(\"sp_web_rep_level_service_procent_product\") %}\r\n{% set cust_num = var(\"sp_web_rep_level_service_procent_cust_num\") %}\r\n{% set zone     = var(\"sp_web_rep_level_service_procent_zone\") %}\r\n\r\nWITH PlanFakt AS (\r\n\tselect \r\n\t\tp.date_reqd         AS date_reqd,\r\n\t\tp.attribute1        AS client,\r\n\t\tp.product           AS product,\r\n\t\tp.extended          AS extended,\r\n\t\tpr.descript         AS name,\r\n\t\tp.ship_name         AS ship_name,\r\n\t\tp.zone              AS `zone`,\r\n\t\tsum(p.qty_orignl)   AS zakaz,\r\n\t\tsum(p.n_alloc)      AS import,\r\n\t\tsum(p.qty_picked)   AS otgruz,\r\n\t\tp.cust_num          AS cust_num\r\n\tFROM {{ ref('Rep_PlanFakt') }} p\r\n\tINNER JOIN WMSdataProdMstr pr on pr.extended=p.extended\r\n\tgroup by\r\n\t\tdate_reqd,\r\n\t\tclient,\r\n\t\tproduct,\r\n\t\textended,\r\n\t\tname,\r\n\t\tship_name,\r\n\t\t`zone`,\r\n\t\tcust_num\r\n),\r\n\r\nOstatki AS (\r\n\tSELECT \r\n\t\textended,\r\n\t\tSUM(quantity * packsize) AS ostatok\r\n\tFROM WMSdataBinLocat\r\n\tGROUP BY extended\r\n)\r\n\r\nSELECT \r\n\tp.date_reqd                                 AS date_reqd,\r\n\tp.client                                    AS client,\r\n\tp.product                                   AS product,\r\n\tp.name                                      AS name,\r\n\tp.zakaz                                     AS zakaz,\r\n\tp.import                                    AS import,\r\n\tp.otgruz                                    AS otgruz,\r\n\tCOALESCE(o.ostatok,0)                       AS ostatok,\r\n\tIF(zakaz = 0, 0, (otgruz/zakaz)*100.00)     AS proczakaz,\r\n\tIF(import = 0, 0, (otgruz/import)*100.00)   AS procimport,\r\n\tp.ship_name                                 AS ship_name,\r\n\tp.zone                                      AS `zone`,\r\n\tp.cust_num                                  AS cust_num\r\nFROM PlanFakt p\r\nLEFT JOIN Ostatki o on o.extended=p.extended\r\nWHERE 1=1\r\nAND (client == '' OR client == '0' OR p.client = '{{ client }}')\r\nAND (product == '' OR product == '0' OR p.product= '{{ product }}')\r\nAND (cust_num == '' OR cust_num == '0' OR p.cust_num = '{{ cust_num }}')\r\nAND (zone == '' OR zone == '0' OR p.zone = '{{zone}}')\r\nORDER BY ship_name", "language": "sql", "refs": [["Rep_PlanFakt"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.Rep_PlanFakt"]}, "compiled_path": null}, "model.gulliver.sp_web_rep_otbor_position": {"database": null, "schema": "db1", "name": "sp_web_rep_otbor_position", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_position\\sp_web_rep_otbor_position.sql", "original_file_path": "models\\sp_web_rep_otbor_position\\sp_web_rep_otbor_position.sql", "unique_id": "model.gulliver.sp_web_rep_otbor_position", "fqn": ["gulliver", "sp_web_rep_otbor_position", "sp_web_rep_otbor_position"], "alias": "sp_web_rep_otbor_position", "checksum": {"name": "sha256", "checksum": "141c72e11af80d061198a342c6d1878082194f4a0de2a76af95f7339389ab360"}, "config": {"enabled": true, "alias": "sp_web_rep_otbor_position", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "sp_web_rep_otbor_position", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.363781, "relation_name": "db1.sp_web_rep_otbor_position", "raw_code": "-- \u0428\u0430\u0433 5. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\r\n\r\n{{ config(materialized='table', alias=\"sp_web_rep_otbor_position\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n\tcontractor, cust_name, sklad, sklad2, date_ship, product, name, tp.uom_pick_name as uom_pick_name,\r\n    (d_pal + c_pal) as pal, (d_upak + c_upak) as upak, (d_sht + c_sht) as sht,\r\n\ttp.size3 as size3, tp.size4 as size4, (d_cnt_box + c_cnt_box) as cnt_box, (d_cnt_box_all + c_cnt_box_all) as cnt_box_all,\r\n\tzone, descript\r\nfrom (\r\nselect\r\n\tupper(con.nameshort) as contractor,\r\n\tcase when p_type1 = 0\r\n\t\t then null\r\n\t\t else (case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end)\r\n\tend as cust_name,\r\n\tcase when pt.sklad in ('GUL', 'POB', 'VRPOB', 'KRPOB','VLPOB') then '\u0421\u0443\u0445\u043e\u0439'\r\n\t\t when pt.sklad in ('FRGUL', 'FRPOB') then '\u0424\u0420\u041e\u0412'\r\n\t\t when pt.sklad in ('ZMGUL', 'ZMPOB') then '\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430'\r\n\t\t when pt.sklad in ('EGAIS3GUL', 'EGAIS3POB') then '\u0410\u043a\u0446\u0438\u0437'\r\n\t\t else pt.sklad\r\n\tend as sklad,\r\n\tcase when p_type = 0 then null else cast( pt.date_ship as date) end as date_ship, -- \u0434\u0430\u0442\u0430\r\n\tcast( SUBSTRING(pt.product, 1, 6) as int) as product, -- \u043a\u043e\u0434 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\r\n\ttp.descript as name, -- \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435\r\n\ttp.uom_pick_name, -- \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u043e\u0442\u0431\u043e\u0440\u0430\r\n\tsum(pt.pal) as d_pal,\r\n\tsum(pt.upak) as d_upak,\r\n\tsum(pt.sht) as d_sht,\r\n\t0 as c_pal,\r\n\t0 as c_upak,\r\n\t0 as c_sht,\r\n\ttp.size3, -- \u0442\u0438\u043f\u043e\u0440\u0430\u0437\u043c\u0435\u04403\r\n\ttp.size4, -- \u0442\u0438\u043f\u043e\u0440\u0430\u0437\u043c\u0435\u04404\r\n\tcase when coalesce(tp.size3,0)<>0 then coalesce(tp.size4,0)/tp.size3 else 0 end as d_cnt_box, --\u043a\u043e\u0440\u043e\u0431\u043e\u043a \u043d\u0430 \u043f\u043e\u0434\u0434\u043e\u043d\u0435\r\n\tsum(pt.pal)*(case when coalesce(tp.size3,0)<>0 then coalesce(tp.size4,0)/tp.size3 else 0 end) as d_cnt_box_all, --\u0432\u0441\u0435\u0433\u043e \u043a\u043e\u0440\u043e\u0431\u043e\u0432 \u0432 \u043c\u043e\u043d\u043e\u043f\u043e\u0434\u0434\u043e\u043d\u0430\u0445\r\n\t0 as c_cnt_box,\r\n\t0 as c_cnt_box_all,\r\n\tc.cust_name as sklad2, -- \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u043b\u0430\u0434\u0430\r\n\tcase when p_type2 = 1 then pt.zone else null end as zone,\r\n\tcase when p_type2 = 1 then bz.descript else null end as descript\r\nfrom {{ ref('tmp_pickingtmp') }} pt\r\njoin {{ ref('tmp_prod') }} tp on tp.extended = pt.product\r\nleft join t_bin_zone bz on bz.zone = pt.zone\r\njoin {{ ref('tmp_contractor') }} con on con.vendornumber = pt.cust_num\r\nleft join custmstr c on c.cust_num = SUBSTRING(pt.order_num,1,8)\r\nleft join custmstr cm on cm.cust_num = pt.cust_num\r\nwhere  ((coalesce(p_ts,0) = 0) or\r\n       ((coalesce(p_ts,0) = 1)  and pt.sklad in ('GUL','FRGUL','ZMGUL','EGAIS3GUL') ) or\r\n\t   ((coalesce(p_ts,0) = 2)  and pt.sklad in ('POB','VRPOB','FRPOB','ZMPOB', 'EGAIS3POB', 'KRPOB', 'VLPOB') )\r\n\t  )\r\n  \tand ((coalesce(p_code,0)=toString(0)) or (coalesce(p_code,0)=substring(pt.product,1,6)))\r\ngroup by\r\n\tcase when p_type = 0 then null else cast( pt.date_ship as date) end,\r\n\tcase when p_type1 = 0\r\n\t\t then null\r\n\t\t else (case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end)\r\n\tend,\r\n\tpt.product, tp.descript, tp.uom_pick_name, tp.size3, con.nameshort,\r\n\tcase when pt.sklad in ('GUL', 'POB', 'VRPOB', 'KRPOB', 'VLPOB') then '\u0421\u0443\u0445\u043e\u0439'\r\n\t\t when pt.sklad in ('FRGUL', 'FRPOB') then '\u0424\u0420\u041e\u0412'\r\n\t\t when pt.sklad in ('ZMGUL', 'ZMPOB') then '\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430'\r\n\t\t when pt.sklad in ('EGAIS3GUL', 'EGAIS3POB') then '\u0410\u043a\u0446\u0438\u0437'\r\n\t\t else pt.sklad\r\n\tend,\r\n\ttp.size4,\r\n\tc.cust_name,\r\n\tcase when p_type2 = 1 then pt.zone else null end,\r\n\tcase when p_type2 = 1 then bz.descript else null end\r\nunion all\r\nselect\r\n\tcase when con.nameshort like '%\u0433\u0443\u043b%' then '\u0413\u0423\u041b\u041b\u0418\u0412\u0415\u0420 (\u041d\u0410\u0428)'\r\n\t     when con.nameshort like '%\u043b\u0435\u0442\u043e%' then '\u041e\u041e\u041e \"\u0422\u041a \u041b\u0415\u0422\u041e\"'\r\n\t\t else con.nameshort\r\n\tend as contractor,\r\n\tcase when p_type1 = 0\r\n\t\t then null\r\n\t\t else (case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end)\r\n\tend as cust_name,\r\n\tcase when pt.sklad in ('GUL', 'POB', 'VRPOB', 'KRPOB', 'VLPOB') then '\u0421\u0443\u0445\u043e\u0439'\r\n\t\t when pt.sklad in ('FRGUL', 'FRPOB') then '\u0424\u0420\u041e\u0412'\r\n\t\t when pt.sklad in ('ZMGUL', 'ZMPOB') then '\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430'\r\n\t\t when pt.sklad in ('EGAIS3GUL', 'EGAIS3POB') then '\u0410\u043a\u0446\u0438\u0437'\r\n\t\t else pt.sklad\r\n\tend as sklad,\r\n\tcase when p_type = 0 then null else cast( pt.date_ship as date) end as date_ship, -- \u0434\u0430\u0442\u0430\r\n\tcast( SUBSTRING(pt.product, 1, 6) as int) as product, -- \u043a\u043e\u0434 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\r\n\ttp.descript as name, -- \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435\r\n\ttp.uom_pick_name, -- \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u043e\u0442\u0431\u043e\u0440\u0430\r\n\t0 as d_pal,\r\n\t0 as d_upak,\r\n\t0 as d_sht,\r\n\tsum(pt.pal) as c_pal,\r\n\tsum(pt.upak) as c_upak,\r\n\tsum(pt.sht) as c_sht,\r\n\ttp.size3, -- \u0442\u0438\u043f\u043e\u0440\u0430\u0437\u043c\u0435\u04403\r\n\ttp.size4, -- \u0442\u0438\u043f\u043e\u0440\u0430\u0437\u043c\u0435\u04404\r\n\t0 as d_cnt_box,\r\n\t0 as d_cnt_box_all,\r\n\tcase when coalesce(tp.size3,0)<>0 then coalesce(tp.size4,0)/tp.size3 else 0 end as c_cnt_box, -- \u043a\u043e\u0440\u043e\u0431\u043e\u043a \u043d\u0430 \u043f\u043e\u0434\u0434\u043e\u043d\u0435\r\n\tsum(pt.pal)*(case when coalesce(tp.size3,0)<>0 then coalesce(tp.size4,0)/tp.size3 else 0 end) as c_cnt_box_all, -- \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u0440\u043e\u0431\u043e\u0432 \u0432 \u043c\u043e\u043d\u043e\u043f\u043e\u0434\u0434\u043e\u043d\u0430\u0445\r\n\tc.cust_name as sklad2, -- \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043a\u043b\u0430\u0434\u0430\r\n\tcase when p_type2 = 1 then pt.zone else null end as zone,\r\n\tcase when p_type2 = 1 then bz.descript else null end as descript\r\nfrom {{ ref('tmp_pickingtmp') }} pt\r\njoin {{ ref('tmp_prod') }} tp on tp.extended = pt.product\r\nleft join t_bin_zone bz on bz.zone = pt.zone\r\njoin {{ ref('tmp_contractor2') }} con on con.vendornumber = pt.cust_num\r\nleft join custmstr c on c.cust_num = SUBSTRING(pt.order_num,1,8)\r\nleft join custmstr cm on cm.cust_num = pt.cust_num\r\nwhere  ((coalesce(p_ts,0) = 0) or\r\n       ((coalesce(p_ts,0) = 1)  and pt.sklad in ('GUL','FRGUL','ZMGUL','EGAIS3GUL') ) or\r\n\t   ((coalesce(p_ts,0) = 2)  and pt.sklad in ('POB','VRPOB','FRPOB','ZMPOB', 'EGAIS3POB', 'KRPOB', 'VLPOB') )\r\n\t  )\r\n\tand ((coalesce(p_code,0)=toString(0)) or (coalesce(p_code,0)=substring(pt.product,1,6)))\r\ngroup by\r\n\tcase when p_type = 0 then null else cast( pt.date_ship as date) end,\r\n\tcase when p_type1 = 0\r\n\t\t then null\r\n\t\t else (case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end)\r\n\tend,\r\n\tpt.product, tp.descript, tp.uom_pick_name, tp.size3,\r\n\tcase when pt.sklad in ('GUL', 'POB', 'VRPOB', 'KRPOB', 'VLPOB') then '\u0421\u0443\u0445\u043e\u0439'\r\n\t\t when pt.sklad in ('FRGUL', 'FRPOB') then '\u0424\u0420\u041e\u0412'\r\n\t\t when pt.sklad in ('ZMGUL', 'ZMPOB') then '\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430'\r\n\t\t when pt.sklad in ('EGAIS3GUL', 'EGAIS3POB') then '\u0410\u043a\u0446\u0438\u0437'\r\n\t\t else pt.sklad\r\n\tend,\r\n\tcase when con.nameshort like '%\u0433\u0443\u043b%' then '\u0413\u0423\u041b\u041b\u0418\u0412\u0415\u0420 (\u041d\u0410\u0428)'\r\n\t     when con.nameshort like '%\u043b\u0435\u0442\u043e%' then '\u041e\u041e\u041e \"\u0422\u041a \u041b\u0415\u0422\u041e\"'\r\n\t\t else con.nameshort\r\n\tend,\r\n\ttp.size4,\r\n\tc.cust_name,\r\n\tcase when p_type2 = 1 then pt.zone else null end,\r\n\tcase when p_type2 = 1 then bz.descript else null end\r\n) t\r\norder by  1,2,3,4;", "language": "sql", "refs": [["tmp_pickingtmp"], ["tmp_prod"], ["tmp_contractor"], ["tmp_pickingtmp"], ["tmp_prod"], ["tmp_contractor2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_pickingtmp", "model.gulliver.tmp_prod", "model.gulliver.tmp_contractor", "model.gulliver.tmp_pickingtmp", "model.gulliver.tmp_prod", "model.gulliver.tmp_contractor2"]}, "compiled_path": null}, "model.gulliver.tmp_contractor": {"database": null, "schema": "db1", "name": "tmp_contractor", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_position\\tmp_contractor.sql", "original_file_path": "models\\sp_web_rep_otbor_position\\tmp_contractor.sql", "unique_id": "model.gulliver.tmp_contractor", "fqn": ["gulliver", "sp_web_rep_otbor_position", "tmp_contractor"], "alias": "tmp_contractor", "checksum": {"name": "sha256", "checksum": "d9dad08c4fe31cf4edad814c1cd3ef656c5410a9411b935aa59d2a1cf17b943c"}, "config": {"enabled": true, "alias": "tmp_contractor", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otbor_position\\tmp_contractor.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_contractor", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.3698123, "relation_name": "db1.tmp_contractor", "raw_code": "-- \u0428\u0430\u0433 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_contractor\r\n\r\n{{ config(materialized='table', alias=\"tmp_contractor\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect dde.VendorNumber as vendornumber, con.NameShort as nameshort\r\nfrom rrWmsDicDivisionExport dde\r\njoin rrMasterDataDivision div on div.GUID=dde.DivisionGUID\r\njoin rrMasterDataContractor con on con.GUID=div.ContractorGUID", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otbor_position\\tmp_contractor.sql", "compiled": true, "compiled_code": "-- \u0428\u0430\u0433 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_contractor\n\n\n\n\nselect dde.VendorNumber as vendornumber, con.NameShort as nameshort\nfrom rrWmsDicDivisionExport dde\njoin rrMasterDataDivision div on div.GUID=dde.DivisionGUID\njoin rrMasterDataContractor con on con.GUID=div.ContractorGUID", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.tmp_contractor2": {"database": null, "schema": "db1", "name": "tmp_contractor2", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_position\\tmp_contractor2.sql", "original_file_path": "models\\sp_web_rep_otbor_position\\tmp_contractor2.sql", "unique_id": "model.gulliver.tmp_contractor2", "fqn": ["gulliver", "sp_web_rep_otbor_position", "tmp_contractor2"], "alias": "tmp_contractor2", "checksum": {"name": "sha256", "checksum": "ac3256cb7569e7cd507adf76f9287593d5d48c17b1bb0e243ad2f00dddd5ecda"}, "config": {"enabled": true, "alias": "tmp_contractor2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otbor_position\\tmp_contractor2.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_contractor2", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.3753805, "relation_name": "db1.tmp_contractor2", "raw_code": "-- \u0428\u0430\u0433 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_contractor2\r\n\r\n{{ config(materialized='table', alias=\"tmp_contractor2\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect dde.VendorNumber as vendornumber, con.NameShort as nameshort\r\nfrom rrWmsDicContractorExport dde\r\njoin rrMasterDataContractor con on con.GUID=dde.ContractorGUID\r\nwhere dde.VendorNumber not in (select VendorNumber from rrWmsDicDivisionExport)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otbor_position\\tmp_contractor2.sql", "compiled": true, "compiled_code": "-- \u0428\u0430\u0433 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_contractor2\n\n\n\n\nselect dde.VendorNumber as vendornumber, con.NameShort as nameshort\nfrom rrWmsDicContractorExport dde\njoin rrMasterDataContractor con on con.GUID=dde.ContractorGUID\nwhere dde.VendorNumber not in (select VendorNumber from rrWmsDicDivisionExport)", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.tmp_pickingtmp": {"database": null, "schema": "db1", "name": "tmp_pickingtmp", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_position\\tmp_pickingtmp.sql", "original_file_path": "models\\sp_web_rep_otbor_position\\tmp_pickingtmp.sql", "unique_id": "model.gulliver.tmp_pickingtmp", "fqn": ["gulliver", "sp_web_rep_otbor_position", "tmp_pickingtmp"], "alias": "tmp_pickingtmp", "checksum": {"name": "sha256", "checksum": "aa8cb9eeda15396ee5ad5c93af6b74aa335cf3dc12539677a232029d7dc24ef7"}, "config": {"enabled": true, "alias": "tmp_pickingtmp", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_pickingtmp", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.3803656, "relation_name": "db1.tmp_pickingtmp", "raw_code": "-- \u0428\u0430\u0433 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_pickingtmp\r\n\r\n{{ config(materialized='table', alias=\"tmp_pickingtmp\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\n--\u043e\u0442\u0431\u043e\u0440 \u043f\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u043c\r\n\r\nselect\r\n    t.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tt.list_id,\r\n\tt.order_num\r\nfrom {{ ref('wms_picking_total') }}", "language": "sql", "refs": [["wms_picking_total"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_picking_total"]}, "compiled_path": null}, "model.gulliver.tmp_prod": {"database": null, "schema": "db1", "name": "tmp_prod", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_position\\tmp_prod.sql", "original_file_path": "models\\sp_web_rep_otbor_position\\tmp_prod.sql", "unique_id": "model.gulliver.tmp_prod", "fqn": ["gulliver", "sp_web_rep_otbor_position", "tmp_prod"], "alias": "tmp_prod", "checksum": {"name": "sha256", "checksum": "e5d01199cd7ccf84e45a28d0c6fcd8815b03bd879642c8a2ff4408da1b75bc2e"}, "config": {"enabled": true, "alias": "tmp_prod", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_prod", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.38437, "relation_name": "db1.tmp_prod", "raw_code": "-- \u0428\u0430\u0433 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_prod\r\n\r\n{{ config(materialized='table', alias=\"tmp_prod\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n\tproduct,\r\n\textended,\r\n\tdescript,\r\n\tcoalesce((select name from t_product_uom t\r\n            where t.product_id in (select product_id from prodmstr pr where pr.product=prodmstr.product)\r\n\t\t      and coalesce(t.uom_pick,0)=1\r\nlimit 1),'') as uom_pick_name,\r\n\tcase when prod_udf2 = '3' and prod_udf3 != '' then cast( prod_udf3 as decimal(18,6)) else size3 end size3,\r\n\tsize4\r\nfrom prodmstr\r\nwhere ((coalesce({{ var('sp_web_rep_otbor_position_p_code') }},'') = '') or (coalesce({{ var('sp_web_rep_otbor_position_p_code') }},'') = product))", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.gulliver.cte_otborstroki": {"database": null, "schema": "db1", "name": "cte_otborstroki", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\cte_otborstroki.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\cte_otborstroki.sql", "unique_id": "model.gulliver.cte_otborstroki", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "cte_otborstroki"], "alias": "cte_otborstroki", "checksum": {"name": "sha256", "checksum": "f2f4eadf7c94171cce1821aaeb07d45a0f734d3dbbede12628110d23c3b6b4dc"}, "config": {"enabled": true, "alias": "cte_otborstroki", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "cte_otborstroki", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.395898, "relation_name": "db1.cte_otborstroki", "raw_code": "-- \u0428\u0430\u0433 8. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b cte_otborstroki\r\n\r\n{{ config(materialized='table', alias=\"cte_otborstroki\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n\tr.sklad,\r\n\tr.client,\r\n\tsum(r.cntstr) cntstr,\r\n\tsum(r.cntpal) cntpal,\r\n\tsum(r.cntup) cntup,\r\n\tsum(r.cntquant) cntquant\r\nfrom {{ ref('tmp_rep_otborstroki') }} r\r\ngroup by r.sklad, r.client", "language": "sql", "refs": [["tmp_rep_otborstroki"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_rep_otborstroki"]}, "compiled_path": null}, "model.gulliver.cte_shortstroki": {"database": null, "schema": "db1", "name": "cte_shortstroki", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\cte_shortstroki.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\cte_shortstroki.sql", "unique_id": "model.gulliver.cte_shortstroki", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "cte_shortstroki"], "alias": "cte_shortstroki", "checksum": {"name": "sha256", "checksum": "fcbab455b5a4d8ca6b4629805699a38473373eecae433cb160ac20e3648fc941"}, "config": {"enabled": true, "alias": "cte_shortstroki", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "cte_shortstroki", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.3998997, "relation_name": "db1.cte_shortstroki", "raw_code": "-- \u0428\u0430\u0433 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b cte_shortstroki\r\n\r\n{{ config(materialized='table', alias=\"cte_shortstroki\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n\tr.sklad,\r\n\tcs.cust_name as client,\r\n\tsum(r.cntstr) cntstr,\r\n\tsum(r.cntpal) cntpal,\r\n\tsum(r.cntup) cntup,\r\n\tsum(r.cntquant) cntquant\r\nfrom {{ ref('tmp_rep_shortstroki') }} r\r\ninner join custmstr cs on cs.cust_num=LEFT(r.packslip,8)\r\ngroup by r.sklad, cs.cust_name", "language": "sql", "refs": [["tmp_rep_shortstroki"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_rep_shortstroki"]}, "compiled_path": null}, "model.gulliver.cte_zakaz": {"database": null, "schema": "db1", "name": "cte_zakaz", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\cte_zakaz.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\cte_zakaz.sql", "unique_id": "model.gulliver.cte_zakaz", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "cte_zakaz"], "alias": "cte_zakaz", "checksum": {"name": "sha256", "checksum": "82128b51d2f2f4f479693963ee8a7989e4d4f1779f380ce4caacbebeb956da6e"}, "config": {"enabled": true, "alias": "cte_zakaz", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "cte_zakaz", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.404415, "relation_name": "db1.cte_zakaz", "raw_code": "-- \u0428\u0430\u0433 6. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b cte_zakaz\r\n\r\n{{ config(materialized='table', alias=\"cte_zakaz\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect distinct\r\n\tr.packslip,\r\n\tr.extended,\r\n\tr.attribute1,\r\n\tcs.cust_name,\r\n\t1 cntstr\r\nfrom {{ ref('tmp_rep_planfakt') }} r\r\ninner join custmstr cs on cs.cust_num = LEFT(r.packslip,8)", "language": "sql", "refs": [["tmp_rep_planfakt"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_rep_planfakt"]}, "compiled_path": null}, "model.gulliver.cte_zakazstroki": {"database": null, "schema": "db1", "name": "cte_zakazstroki", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\cte_zakazstroki.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\cte_zakazstroki.sql", "unique_id": "model.gulliver.cte_zakazstroki", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "cte_zakazstroki"], "alias": "cte_zakazstroki", "checksum": {"name": "sha256", "checksum": "7e12837c2effafb00dd697d56071551a2b9e043c909a82fb064f1c19b898c0b1"}, "config": {"enabled": true, "alias": "cte_zakazstroki", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "cte_zakazstroki", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.409426, "relation_name": "db1.cte_zakazstroki", "raw_code": "-- \u0428\u0430\u0433 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b cte_zakazstroki\r\n\r\n{{ config(materialized='table', alias=\"cte_zakazstroki\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n\tattribute1 as sklad,\r\n\tcust_name as client,\r\n\tsum(cntstr) as cntstr\r\nfrom {{ ref('cte_zakaz') }}\r\ngroup by attribute1, cust_name", "language": "sql", "refs": [["cte_zakaz"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cte_zakaz"]}, "compiled_path": null}, "model.gulliver.sp_web_rep_otbor_stroki_test": {"database": null, "schema": "db1", "name": "sp_web_rep_otbor_stroki_test", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\sp_web_rep_otbor_stroki_test.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\sp_web_rep_otbor_stroki_test.sql", "unique_id": "model.gulliver.sp_web_rep_otbor_stroki_test", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "sp_web_rep_otbor_stroki_test"], "alias": "sp_web_rep_otbor_stroki_test", "checksum": {"name": "sha256", "checksum": "1a20e4b8d4b485eda01a94711ca4ffb3ffc913eed975cd4f520e4f7c70544927"}, "config": {"enabled": true, "alias": "sp_web_rep_otbor_stroki_test", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "sp_web_rep_otbor_stroki_test", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.409426, "relation_name": "db1.sp_web_rep_otbor_stroki_test", "raw_code": "-- \u0428\u0430\u0433 10. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b sp_web_rep_otbor_stroki_test\r\n\r\n{{ config(materialized='table', alias=\"sp_web_rep_otbor_stroki_test\", engine = \"ReplacingMergeTree\") }}\r\n\r\nselect\r\n    t1.sklad as client,\r\n    t1.client as sklad,\r\n    coalesce(t2.cntstr,'-') AS cntstrzakaz,\r\n    coalesce(t1.cntstr,'-') AS cntstrotbor,\r\n    coalesce(t3.cntstr,'-') AS cntstrshort,\r\n    t1.cntpal as pal,\r\n    t1.cntup as upak,\r\n    t1.cntquant as sht\r\nfrom {{ ref('cte_otborstroki') }} t1\r\nleft join {{ ref('cte_zakazstroki') }} t2 on t2.sklad=substring(t1.sklad, length(rtrim(t1.sklad))-2, length(rtrim(t1.sklad))) and t2.client=t1.client\r\nleft join {{ ref('cte_shortstroki') }} t3 on t3.sklad=substring(t1.sklad, length(rtrim(t1.sklad))-2, length(rtrim(t1.sklad))) and t3.client=t1.client\r\norder by t1.sklad;", "language": "sql", "refs": [["cte_otborstroki"], ["cte_zakazstroki"], ["cte_shortstroki"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.cte_otborstroki", "model.gulliver.cte_zakazstroki", "model.gulliver.cte_shortstroki"]}, "compiled_path": null}, "model.gulliver.tmp_rep_otborstroki": {"database": null, "schema": "db1", "name": "tmp_rep_otborstroki", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\tmp_rep_otborstroki.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\tmp_rep_otborstroki.sql", "unique_id": "model.gulliver.tmp_rep_otborstroki", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "tmp_rep_otborstroki"], "alias": "tmp_rep_otborstroki", "checksum": {"name": "sha256", "checksum": "d1e66102cfc5cee69572a64606116cdcf6584bac1fdd1d65cd2225f08a5e2e89"}, "config": {"enabled": true, "alias": "tmp_rep_otborstroki", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_rep_otborstroki", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.4179597, "relation_name": "db1.tmp_rep_otborstroki", "raw_code": "-- \u0428\u0430\u0433 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_rep_otborstroki\r\n\r\n{{ config(materialized='table', alias=\"tmp_rep_otborstroki\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect\r\n\tp.order_num,\r\n\tc2.cust_name,\r\n\tp.sklad,\r\n\tsum(p.stroki) as cnt_otbor,\r\n\tsum(p.pal) as cnt_pal,\r\n\tsum(p.upak) as cnt_upak,\r\n\tsum(p.sht) as cnt_sht\r\nfrom {{ ref('tmp_tmp_picking') }} p\r\njoin custmstr c on c.cust_num = p.cust_num\r\njoin custmstr c2 on c2.cust_num = SUBSTRING(p.order_num,1,8)\r\nwhere cast( p.date_ship as date) between cast({{ var('sp_web_rep_otbor_stroki_test_p_date_start') }} as date) and cast({{ var('sp_web_rep_otbor_stroki_test_p_date_end') }} as date)\r\ngroup by c2.cust_name, p.sklad, p.order_num;", "language": "sql", "refs": [["tmp_tmp_picking"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_tmp_picking"]}, "compiled_path": null}, "model.gulliver.tmp_rep_planfakt": {"database": null, "schema": "db1", "name": "tmp_rep_planfakt", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\tmp_rep_planfakt.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\tmp_rep_planfakt.sql", "unique_id": "model.gulliver.tmp_rep_planfakt", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "tmp_rep_planfakt"], "alias": "tmp_rep_planfakt", "checksum": {"name": "sha256", "checksum": "d53a2f86c7752187a0d67ac4e219e7e8a27b172b1680ff0f186f4c4f03613dcd"}, "config": {"enabled": true, "alias": "tmp_rep_planfakt", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_rep_planfakt", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.4215112, "relation_name": "db1.tmp_rep_planfakt", "raw_code": "-- \u0428\u0430\u0433 5. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_rep_planfakt\r\n\r\n{{ config(materialized='table', alias=\"tmp_rep_planfakt\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect\r\n\tph.date_reqd,\r\n\tph.packslip,\r\n\tsd.product,\r\n\tsd.extended,\r\n\tsd.qty_orignl,\r\n\tsd.qty_topick,\r\n\tsd.qty_picked,\r\n\tpr.prod_udf1,\r\n\tph.cust_num,\r\n\tph.userid,\r\n\tpr.attribute1\r\nfrom wmslog_shipline2 sd\r\ninner join shiphist ph on ph.packslip=sd.packslip\r\ninner join prodmstr pr on pr.extended=sd.extended\r\nwhere ph.packslip in (select packslip from {{ ref('tmp_rep_otborstroki') }})\r\nUNION ALL\r\nselect\r\n\tph.date_reqd,\r\n\tph.packslip,\r\n\tsd.product,\r\n\tsd.extended,\r\n\tsd.qty_orignl,\r\n\tsd.qty_topick,\r\n\tsd.qty_picked,\r\n\tpr.prod_udf1,\r\n\tph.cust_num,\r\n\tph.userid,\r\n\tpr.attribute1\r\nfrom pickdetl sd\r\ninner join pickhead ph on ph.packslip=sd.packslip\r\ninner join prodmstr pr on pr.extended=sd.extended\r\nwhere ph.packslip in (select packslip from {{ ref('tmp_rep_otborstroki') }});", "language": "sql", "refs": [["tmp_rep_otborstroki"], ["tmp_rep_otborstroki"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_rep_otborstroki", "model.gulliver.tmp_rep_otborstroki"]}, "compiled_path": null}, "model.gulliver.tmp_rep_shortstroki": {"database": null, "schema": "db1", "name": "tmp_rep_shortstroki", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\tmp_rep_shortstroki.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\tmp_rep_shortstroki.sql", "unique_id": "model.gulliver.tmp_rep_shortstroki", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "tmp_rep_shortstroki"], "alias": "tmp_rep_shortstroki", "checksum": {"name": "sha256", "checksum": "302c3333f6ae4415bdd70d867f0d30c3383fa2cc024fe74aa6649da56da27d69"}, "config": {"enabled": true, "alias": "tmp_rep_shortstroki", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_rep_shortstroki", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.4300237, "relation_name": "db1.tmp_rep_shortstroki", "raw_code": "-- \u0428\u0430\u0433 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_rep_shortstroki\r\n\r\n{{ config(materialized='table', alias=\"tmp_rep_shortstroki\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect\r\n\trf.packslip,\r\n\trf.extended,\r\n\tSUM(case when pr.size4 <> 0 and pr.size4 <> pr.size3 then floor(rf.quantity / pr.size4) else 0 end) AS cntpal,\r\n\tSUM(case when pr.size4 <> 0 and rf.packsize > 1 and pr.size4 <> pr.size3 then floor((rf.quantity % pr.size4) / rf.packsize) else case when rf.packsize > 1 then floor(rf.quantity / rf.packsize) else 0 end end) AS cntup,\r\n\tSUM(case when pr.size4 <> 0 and rf.packsize > 1 and pr.size4 <> pr.size3 then (rf.quantity % pr.size4) % rf.packsize else case when rf.packsize > 1 then rf.quantity % rf.packsize else rf.quantity end end) AS cntquant,\r\n\t1 AS cntstr,\r\n\tpr.attribute1 AS sklad\r\nfrom v_rf_log_all rf\r\ninner join prodmstr pr on pr.extended=rf.extended\r\njoin {{ ref('tmp_rep_otborstroki') }} p on p.packslip = rf.packslip\r\nwhere (rf.action in ('PICKSHRT') and rf.userid <> 'RFBASE')and(rf.userid <> 'NIAV')\r\ngroup by\r\n\trf.packslip,\r\n\trf.extended,\r\n\tpr.attribute1;", "language": "sql", "refs": [["tmp_rep_otborstroki"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.tmp_rep_otborstroki"]}, "compiled_path": null}, "model.gulliver.tmp_tmp_picking": {"database": null, "schema": "db1", "name": "tmp_tmp_picking", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otbor_stroki_test\\tmp_tmp_picking.sql", "original_file_path": "models\\sp_web_rep_otbor_stroki_test\\tmp_tmp_picking.sql", "unique_id": "model.gulliver.tmp_tmp_picking", "fqn": ["gulliver", "sp_web_rep_otbor_stroki_test", "tmp_tmp_picking"], "alias": "tmp_tmp_picking", "checksum": {"name": "sha256", "checksum": "f3d8c5ad26c455d2e8b34a6ff16196deee9703cf8633d519ac22ef1aac307a72"}, "config": {"enabled": true, "alias": "tmp_tmp_picking", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "ReplacingMergeTree", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "tmp_tmp_picking", "engine": "ReplacingMergeTree"}, "created_at": 1692256682.4374588, "relation_name": "db1.tmp_tmp_picking", "raw_code": "-- \u0428\u0430\u0433 1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b tmp_tmp_picking\r\n\r\n{{ config(materialized='table', alias=\"tmp_tmp_picking\", engine = \"ReplacingMergeTree\") }}\r\n\r\n\r\nselect\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tt.list_id,\r\n\tt.order_num\r\nfrom {{ ref('wms_picking_total') }}", "language": "sql", "refs": [["wms_picking_total"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_picking_total"]}, "compiled_path": null}, "model.gulliver.wms_consolidate": {"database": null, "schema": "db1", "name": "wms_consolidate", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_consolidate.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_consolidate.sql", "unique_id": "model.gulliver.wms_consolidate", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_consolidate"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_consolidate", "checksum": {"name": "sha256", "checksum": "267087930d2a767fd245a70ff7a8ae52211d35ea6fec8721fa65fabadb805171"}, "config": {"enabled": true, "alias": "dbt_temp_wms_consolidate", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_consolidate"}, "created_at": 1692256682.4374588, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_consolidate", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 2. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: Consolidate\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_consolidate\") }}\r\n\r\nselect\r\n    t.date_reqd as date_reqd,\r\n    t.extra3 as extra3,\r\n    t.tara as tara,\r\n    t.ship_name as ship_name,\r\n    t.ship_addr as ship_addr,\r\n    case when t.parent_totlabel<>'' then t.parent_totlabel else t.totlabel end as totlabel,\r\n    sum(t.weight) as weight,\r\n    sum(t.cube_crtn) as volume,\r\n    t.packslip as packslip\r\nfrom {{ ref('wms_totlabels') }} t\r\ngroup by\r\n    t.date_reqd,\r\n    t.extra3,\r\n    t.tara,\r\n    t.ship_name,\r\n    t.ship_addr,\r\n    case when t.parent_totlabel<>'' then t.parent_totlabel else t.totlabel end,\r\n    t.packslip", "language": "sql", "refs": [["wms_totlabels"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_totlabels"]}, "compiled_path": null}, "model.gulliver.wms_gm_plan": {"database": null, "schema": "db1", "name": "wms_gm_plan", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_gm_plan.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_gm_plan.sql", "unique_id": "model.gulliver.wms_gm_plan", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_gm_plan"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan", "checksum": {"name": "sha256", "checksum": "53c5724a8e6f0f7d3a7713c1a19deebdb3b18e43bf06e44d665eb6844cb050af"}, "config": {"enabled": true, "alias": "dbt_temp_wms_gm_plan", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_gm_plan.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_gm_plan"}, "created_at": 1692256682.4464793, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 3. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: GmPlan\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_gm_plan\") }}\r\n\r\n\r\nselect\r\n    p.date_reqd as date_reqd,\r\n    p.extra3 as extra3,\r\n    tc.code as tara,\r\n    case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\r\n    (cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) as ship_addr,\r\n    coalesce(t.weight,0) weight, \r\n    coalesce(t.volume,0) cube_crtn,\r\n    t.descript as descript,\r\n    p.packslip as packslip\r\nfrom WMSdataTaskList t\r\ninner join WMSdataContainer tc  on tc.id=t.container_id\r\ninner join WMSdataPickHead p  on p.packslip=t.order_num\r\ninner join WMSdataCustMstr cm  on cm.cust_num=p.cust_num\r\nwhere t.task_type='02' and toDate(p.date_reqd) between toDate('{{ var('start_date') }}') and toDate('{{ var('end_date') }}')\r\nunion all\r\nselect\r\n    p.date_reqd as date_reqd,\r\n    p.extra3 as extra3,\r\n    tc.code as tara,\r\n    case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\r\n    (cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) as ship_addr,\r\n    coalesce(t.weight,0) weight, \r\n    coalesce(t.volume,0) cube_crtn,\r\n    t.descript as descript,\r\n    p.packslip as packslip\r\nfrom WMSdataTaskList t\r\ninner join WMSdataContainer tc  on tc.id=t.container_id\r\ninner join WMSdataShipHist p  on p.packslip=t.order_num\r\ninner join WMSdataCustMstr cm  on cm.cust_num=p.cust_num\r\nwhere t.task_type='02' and toDate(p.date_reqd) between toDate('{{ var('start_date') }}') and toDate('{{ var('end_date') }}')", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_gm_plan.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 3. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: GmPlan\n\n*/\n\n\n\n\nselect\n    p.date_reqd as date_reqd,\n    p.extra3 as extra3,\n    tc.code as tara,\n    case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\n    (cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) as ship_addr,\n    coalesce(t.weight,0) weight, \n    coalesce(t.volume,0) cube_crtn,\n    t.descript as descript,\n    p.packslip as packslip\nfrom WMSdataTaskList t\ninner join WMSdataContainer tc  on tc.id=t.container_id\ninner join WMSdataPickHead p  on p.packslip=t.order_num\ninner join WMSdataCustMstr cm  on cm.cust_num=p.cust_num\nwhere t.task_type='02' and toDate(p.date_reqd) between toDate('2022-12-31') and toDate('2022-12-31')\nunion all\nselect\n    p.date_reqd as date_reqd,\n    p.extra3 as extra3,\n    tc.code as tara,\n    case when coalesce(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\n    (cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) as ship_addr,\n    coalesce(t.weight,0) weight, \n    coalesce(t.volume,0) cube_crtn,\n    t.descript as descript,\n    p.packslip as packslip\nfrom WMSdataTaskList t\ninner join WMSdataContainer tc  on tc.id=t.container_id\ninner join WMSdataShipHist p  on p.packslip=t.order_num\ninner join WMSdataCustMstr cm  on cm.cust_num=p.cust_num\nwhere t.task_type='02' and toDate(p.date_reqd) between toDate('2022-12-31') and toDate('2022-12-31')", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_gm_plan1": {"database": null, "schema": "db1", "name": "wms_gm_plan1", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_gm_plan1.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_gm_plan1.sql", "unique_id": "model.gulliver.wms_gm_plan1", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_gm_plan1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan1", "checksum": {"name": "sha256", "checksum": "5237ef2209f7012b5fe1a065f57bf66a677ebe25133eb7a877554d6f2c05551f"}, "config": {"enabled": true, "alias": "dbt_temp_wms_gm_plan1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_gm_plan1"}, "created_at": 1692256682.4590683, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan1", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 4. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: GmPlan1\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_gm_plan1\") }}\r\n\r\nselect\r\n    date_reqd,\r\n    extra3,\r\n    tara,\r\n    ship_name,\r\n    ship_addr,\r\n    weight,\r\n    cube_crtn,\r\n    descript,\r\n    packslip\r\nfrom {{ ref('wms_gm_plan') }}\r\nwhere descript is null\r\nunion all\r\nselect\r\n    date_reqd,\r\n    extra3,\r\n    tara,\r\n    ship_name,\r\n    ship_addr,\r\n    sum(weight) weight,\r\n    sum(cube_crtn) cube_crtn,\r\n    descript,\r\n    packslip\r\nfrom {{ ref('wms_gm_plan') }}\r\nwhere descript is not null\r\ngroup by\r\n    date_reqd,\r\n    extra3,\r\n    tara,\r\n    ship_name,\r\n    ship_addr,\r\n    descript,\r\n    packslip", "language": "sql", "refs": [["wms_gm_plan"], ["wms_gm_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_gm_plan", "model.gulliver.wms_gm_plan"]}, "compiled_path": null}, "model.gulliver.wms_gm_plan2": {"database": null, "schema": "db1", "name": "wms_gm_plan2", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_gm_plan2.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_gm_plan2.sql", "unique_id": "model.gulliver.wms_gm_plan2", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_gm_plan2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan2", "checksum": {"name": "sha256", "checksum": "4e91dac79577deb7889ee8e8022b9959f80dbd7d075016d95221a849a0be4de4"}, "config": {"enabled": true, "alias": "dbt_temp_wms_gm_plan2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_gm_plan2"}, "created_at": 1692256682.463632, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_gm_plan2", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 5. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: GmPlan2\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_gm_plan2\") }}\r\n\r\n\r\nselect\r\n    date_reqd,\r\n    extra3,\r\n    tara,\r\n    ship_name,\r\n    ship_addr,\r\n    count(*) as cntgm_plan,\r\n    packslip\r\nfrom {{ ref('wms_gm_plan1') }}\r\nwhere extra3 in ('gul','pob','egais3gul','egais3pob','zor')\r\ngroup by\r\n    date_reqd,\r\n    extra3,\r\n    tara,\r\n    ship_name,\r\n    ship_addr,\r\n    packslip", "language": "sql", "refs": [["wms_gm_plan1"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_gm_plan1"]}, "compiled_path": null}, "model.gulliver.wms_otgruzka_final": {"database": null, "schema": "db1", "name": "wms_otgruzka_final", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_otgruzka_final.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_otgruzka_final.sql", "unique_id": "model.gulliver.wms_otgruzka_final", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_otgruzka_final"], "alias": "wms_otgruzka_final", "checksum": {"name": "sha256", "checksum": "8723f2d2b6aaa3b1a3ef33e035d6481ad042a22cbeb81083319b3316e04074fb"}, "config": {"enabled": true, "alias": "wms_otgruzka_final", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "wms_otgruzka_final"}, "created_at": 1692256682.4686701, "relation_name": "db1.wms_otgruzka_final", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 9. \u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b sp_web_rep_otgruzka_by_division\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"wms_otgruzka_final\") }}\r\n\r\nselect \r\n\tt.date_ship as date_ship,\r\n\tt.client as client,\r\n\tt.ship_name as ship_name,\r\n\tt.ship_add as ship_add,\r\n\ttara as tara,\r\n\tt.cntgm as cntgm,\r\n\tt.cntgm_plan as cntgm_plan,\r\n\tt.weight as weight,\r\n\tt.volume as volume,\r\n\tt.pick as pick,\r\n\tt.pick_pal as pick_pal,\r\n\tt.pick_kor as pick_kor,\r\n\tt.pick_sht as pick_sht,\r\n\ttoString(case when t.sklad is not null\r\n\t\t then case when t.client in ('OGM','TRAN') then '\u0420\u0426' else cm.cust_name end\r\n\t\t else null\r\n\tend) as sklad\r\nfrom (\r\n\tselect\r\n\t\tit.date_ship as date_ship, --\u0434\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438\r\n\t\tcase when {{ var('wms_type1') }}=1 then it.client else null end as client,\r\n\t\tit.ship_name as ship_name,\r\n\t\tit.ship_add as ship_add,\r\n\t\tcase when {{ var('wms_type2') }}=1 then it.tara else null end as tara,\r\n\t\tsum(it.cntgm) as cntgm,\r\n\t\tsum(it.cntgm_plan) as cntgm_plan,\r\n\t\tsum(it.weight) as weight,\r\n\t\tsum(it.volume) as volume,\r\n\t\tsum(p2.pal+p2.box+p2.block+p2.sht) as pick,\r\n\t\tsum(p2.pal) as pick_pal,\r\n\t\tsum(p2.box+p2.block) as pick_kor,\r\n\t\tsum(p2.sht) as pick_sht,\r\n\t\tcase when (({{ var('wms_type1') }} = 1 or {{ var('wms_type2') }} = 1) and {{ var('wms_type3') }} = 1)\r\n\t\t\t\t then it.packslip \r\n\t\t\t\t else null\r\n\t\t\tend as sklad\r\n\tfrom {{ ref('wms_otgruzka_itog2') }} it\r\n\tleft join {{ ref('wms_picking_tmp2') }} p2\r\n\t  on p2.date_ship = it.date_ship\r\n\t and p2.client = it.client\r\n\t and p2.cust_name = it.ship_name\r\n\t and p2.tara = it.tara\r\n\t and p2.order_num = it.packslip\r\n\tgroup by it.date_ship,\r\n\t\tcase when {{ var('wms_type1') }}=1 then it.client else null end as client,\r\n\t\tit.ship_name,\r\n\t\tit.ship_add,\r\n\t\tcase when {{ var('wms_type2') }}=1 then it.tara else null end as tara,\r\n\t\tcase when (({{ var('wms_type1') }} = 1 or {{ var('wms_type2') }} = 1) and {{ var('wms_type3') }} = 1)\r\n\t\t\t\t then it.packslip\r\n\t\t\t\t else null\r\n\t\t\tend as sklad\r\n) t\r\nleft join WMSdataCustMstr cm on cm.cust_num = substring(t.sklad,1,8)\r\norder by t.date_ship, t.client, t.ship_name, t.sklad", "language": "sql", "refs": [["wms_otgruzka_itog2"], ["wms_picking_tmp2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_otgruzka_itog2", "model.gulliver.wms_picking_tmp2"]}, "compiled_path": null}, "model.gulliver.wms_otgruzka_itog1": {"database": null, "schema": "db1", "name": "wms_otgruzka_itog1", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_otgruzka_itog1.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_otgruzka_itog1.sql", "unique_id": "model.gulliver.wms_otgruzka_itog1", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_otgruzka_itog1"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_otgruzka_itog1", "checksum": {"name": "sha256", "checksum": "fa39650c1661fb44c10400710b4ba9b9d8884dee2da3c5d9a04e226d80bab99e"}, "config": {"enabled": true, "alias": "dbt_temp_wms_otgruzka_itog1", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_otgruzka_itog1"}, "created_at": 1692256682.4717367, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_otgruzka_itog1", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 6. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: Itog \u0438 Itog1\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_otgruzka_itog1\") }}\r\n\r\nselect t.*,\r\n       case when g.cntgm_plan is null then t.cntgm else g.cntgm_plan end as cntgm_plan\r\nfrom (\r\n    select\r\n         t.date_reqd as date_ship,\r\n         t.extra3 as client,\r\n         t.tara as tara,\r\n         t.ship_name,\r\n         t.ship_addr as ship_add,\r\n         count(*) as cntgm,\r\n         sum(t.weight) as weight,\r\n         sum(t.volume) as volume,\r\n         t.packslip\r\n    from {{ ref('wms_consolidate') }} t\r\n    group by\r\n         t.date_reqd,\r\n         t.extra3,\r\n         t.tara,\r\n         t.ship_name,\r\n         t.ship_addr,\r\n         t.packslip\r\n) t\r\nleft join {{ ref('wms_gm_plan2') }} g \r\n  on g.date_reqd=t.date_ship\r\n and g.ship_name=t.ship_name\r\n and coalesce(g.extra3,'')=coalesce(t.client,'')\r\n and coalesce(g.tara,'')=coalesce(t.tara,'')", "language": "sql", "refs": [["wms_consolidate"], ["wms_gm_plan2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_consolidate", "model.gulliver.wms_gm_plan2"]}, "compiled_path": null}, "model.gulliver.wms_otgruzka_itog2": {"database": null, "schema": "db1", "name": "wms_otgruzka_itog2", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_otgruzka_itog2.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_otgruzka_itog2.sql", "unique_id": "model.gulliver.wms_otgruzka_itog2", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_otgruzka_itog2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_otgruzka_itog2", "checksum": {"name": "sha256", "checksum": "37e43bfa353757bac1aa44fa631624ed0eed6a8686e064a89785f671ce717022"}, "config": {"enabled": true, "alias": "dbt_temp_wms_otgruzka_itog2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_otgruzka_itog2"}, "created_at": 1692256682.4853392, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_otgruzka_itog2", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 7. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 #itog2\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_otgruzka_itog2\") }}\r\n\r\nselect\r\n\tdate_ship,\r\n\tclient,\r\n\tcase when tara in ('pallet','palletf','tpallet') then '\u043f\u0430\u043b\u043b\u0435\u0442'\r\n\t     when tara in ('roll','rollf','troll') then '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\t\t when tara in ('tbox','tboxa') then '\u0442\u0435\u0440\u043c\u043e\u0431\u043e\u043a\u0441'\r\n\t\t when tara in ('tcheh') then '\u0442\u0435\u0440\u043c\u043e\u0447\u0435\u0445\u043e\u043b'\r\n\t\t when tara in ('bin') then '\u0431\u0438\u043d'\r\n\t\t else '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\tend as tara,\r\n\tship_name,\r\n\tship_add,\r\n\tsum(cntgm) as cntgm,\r\n\tsum(cntgm_plan) as cntgm_plan,\r\n\tsum(weight) as weight,\r\n\tsum(volume) as volume,\r\n\tpackslip\r\nfrom {{ ref('wms_otgruzka_itog1') }}\r\ngroup by\r\n\tdate_ship,\r\n\tclient,\r\n\ttara,\r\n\tship_name,\r\n\tship_add,\r\n\tpackslip\r\norder by date_ship", "language": "sql", "refs": [["wms_otgruzka_itog1"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_otgruzka_itog1"]}, "compiled_path": null}, "model.gulliver.wms_picking_tmp2": {"database": null, "schema": "db1", "name": "wms_picking_tmp2", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_picking_tmp2.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_picking_tmp2.sql", "unique_id": "model.gulliver.wms_picking_tmp2", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_picking_tmp2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_tmp2", "checksum": {"name": "sha256", "checksum": "5a2971540c0ca22156cc832703cd09a28593b8548ffded75d735c483c5eb9d35"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_tmp2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_tmp2"}, "created_at": 1692256682.4893534, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_tmp2", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 8. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 #pickingTmp2\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_tmp2\") }}\r\n\r\nselect\r\n\tp.date_ship as date_ship, --\u0434\u0430\u0442\u0430 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438\r\n\tp.sklad as client,\r\n\tcase when tc.code in ('pallet','palletf','tpallet') then '\u043f\u0430\u043b\u043b\u0435\u0442'\r\n\t\t           when tc.code in ('roll','rollf','troll') then '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\t\t\t\t   when tc.code in ('tbox','tboxa') then '\u0442\u0435\u0440\u043c\u043e\u0431\u043e\u043a\u0441'\r\n\t\t\t\t   when tc.code in ('tcheh') then '\u0442\u0435\u0440\u043c\u043e\u0447\u0435\u0445\u043e\u043b'\r\n\t\t\t\t   when tc.code in ('bin') then '\u0431\u0438\u043d'\r\n\t\t\t\t   else '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\tend as tara,\r\n\tcase when coalesce(c.e_mail,'')='' then c.cust_name else c.e_mail end as cust_name,\r\n\tsum(p.pal) as pal,\r\n\tsum(p.box) as box,\r\n\tsum(p.block) as block,\r\n\tsum(p.sht) as sht,\r\n\tsum(p.weight) as weight,\r\n\tsum(p.volume) as volume,\r\n\tp.order_num as order_num\r\n\r\nfrom {{ ref('wms_picking_total') }} p  -- \u0431\u0435\u0437 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\njoin WMSdataCustMstr c on c.cust_num = p.cust_num\r\njoin WMSdataContainer tc on tc.id = p.container_id\r\ngroup by p.date_ship, p.sklad, case when coalesce(c.e_mail,'')='' then c.cust_name else c.e_mail end,\r\n\t\tcase when tc.code in ('pallet','palletf','tpallet') then '\u043f\u0430\u043b\u043b\u0435\u0442'\r\n\t\t           when tc.code in ('roll','rollf','troll') then '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\t\t\t\t   when tc.code in ('tbox','tboxa') then '\u0442\u0435\u0440\u043c\u043e\u0431\u043e\u043a\u0441'\r\n\t\t\t\t   when tc.code in ('tcheh') then '\u0442\u0435\u0440\u043c\u043e\u0447\u0435\u0445\u043e\u043b'\r\n\t\t\t\t   when tc.code in ('bin') then '\u0431\u0438\u043d'\r\n\t\t\t\t   else '\u0440\u043e\u043b\u043b\u043a\u0435\u0439\u0434\u0436'\r\n\t\t\t  end,\r\n\t\tp.order_num", "language": "sql", "refs": [["wms_picking_total"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_picking_total"]}, "compiled_path": null}, "model.gulliver.wms_shipdetl_all": {"database": null, "schema": "db1", "name": "wms_shipdetl_all", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_shipdetl_all.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_shipdetl_all.sql", "unique_id": "model.gulliver.wms_shipdetl_all", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_shipdetl_all"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_shipdetl_all", "checksum": {"name": "sha256", "checksum": "35306749dfcf7582c276376d8e7f79d52d81cbfc91e90d388df4d1a077c9f99d"}, "config": {"enabled": true, "alias": "dbt_temp_wms_shipdetl_all", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_shipdetl_all.sql", "deferred": false, "unrendered_config": {"materialized": "view", "alias": "dbt_temp_wms_shipdetl_all"}, "created_at": 1692256682.4983923, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_shipdetl_all", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1-0. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: shipdetl_all\r\n\r\n*/\r\n\r\n{{ config(materialized='view', alias=\"dbt_temp_wms_shipdetl_all\") }}\r\n\r\nselect        row_id, alloc_cost, attribut10, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9,\r\n                         attributes, billeddate, binlabel, clientname, tenantid, comment_in, commodity, datecreate, descript, discount, extended, extra1, extra2,\r\n                         extra3, extra4, extra5, fifo_date, host_order, location, order_num, order_seq, packslip, po_num, product, qty, qty_orignl,\r\n                         qty_topick, sell_price, status, substitute, totlabel, userid, warehouse, zone, timestamp, purge_flag\r\nfrom            WMSdataShipDetl\r\nunion all\r\nselect        row_id, alloc_cost, attribut10, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9,\r\n                         attributes, billeddate, binlabel, clientname, tenantid, comment_in, commodity, datecreate, descript, discount, extended, extra1, extra2,\r\n                         extra3, extra4, extra5, fifo_date, host_order, location, order_num, order_seq, packslip, po_num, product, qty, qty_orignl,\r\n                         qty_topick, sell_price, status, substitute, totlabel, userid, warehouse, zone, timestamp, purge_flag\r\nfrom            WMSdataShipDetl2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_shipdetl_all.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 1-0. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: shipdetl_all\n\n*/\n\n\n\nselect        row_id, alloc_cost, attribut10, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9,\n                         attributes, billeddate, binlabel, clientname, tenantid, comment_in, commodity, datecreate, descript, discount, extended, extra1, extra2,\n                         extra3, extra4, extra5, fifo_date, host_order, location, order_num, order_seq, packslip, po_num, product, qty, qty_orignl,\n                         qty_topick, sell_price, status, substitute, totlabel, userid, warehouse, zone, timestamp, purge_flag\nfrom            WMSdataShipDetl\nunion all\nselect        row_id, alloc_cost, attribut10, attribute1, attribute2, attribute3, attribute4, attribute5, attribute6, attribute7, attribute8, attribute9,\n                         attributes, billeddate, binlabel, clientname, tenantid, comment_in, commodity, datecreate, descript, discount, extended, extra1, extra2,\n                         extra3, extra4, extra5, fifo_date, host_order, location, order_num, order_seq, packslip, po_num, product, qty, qty_orignl,\n                         qty_topick, sell_price, status, substitute, totlabel, userid, warehouse, zone, timestamp, purge_flag\nfrom            WMSdataShipDetl2", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_sum_by_totlabels": {"database": null, "schema": "db1", "name": "wms_sum_by_totlabels", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels.sql", "unique_id": "model.gulliver.wms_sum_by_totlabels", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_sum_by_totlabels"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_sum_cubage_by_totlabels", "checksum": {"name": "sha256", "checksum": "6a2adda2d59f26ee2bbb1c8637570257bb9e7080cd4f6f570822ddae226907a6"}, "config": {"enabled": true, "alias": "dbt_temp_wms_sum_cubage_by_totlabels", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_sum_cubage_by_totlabels"}, "created_at": 1692256682.5024657, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_sum_cubage_by_totlabels", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1-1. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: sum(qty * cubage) by totlabel\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_sum_cubage_by_totlabels\") }}\r\n\r\nselect sum(td.qty*pr.cubage)  as cubage,\r\n       sum(td.qty*pr.weight)  as weight,\r\n       td.totlabel            as totlabel\r\n  from WMSdataToteDetl td\r\n inner join WMSdataProdMstr pr\r\n    on pr.extended=td.extended\r\n where substring(pr.extended,1,6)<>'88372'\r\n group by totlabel", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 1-1. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: sum(qty * cubage) by totlabel\n\n*/\n\n\n\nselect sum(td.qty*pr.cubage)  as cubage,\n       sum(td.qty*pr.weight)  as weight,\n       td.totlabel            as totlabel\n  from WMSdataToteDetl td\n inner join WMSdataProdMstr pr\n    on pr.extended=td.extended\n where substring(pr.extended,1,6)<>'88372'\n group by totlabel", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_sum_by_totlabels_ship": {"database": null, "schema": "db1", "name": "wms_sum_by_totlabels_ship", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels_ship.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels_ship.sql", "unique_id": "model.gulliver.wms_sum_by_totlabels_ship", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_sum_by_totlabels_ship"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_sum_cubage_by_totlabels_ship", "checksum": {"name": "sha256", "checksum": "f8ac737dbcfff9aa309a054cb689cf9005b5d27da4a4f0c239d322f14127aa76"}, "config": {"enabled": true, "alias": "dbt_temp_wms_sum_cubage_by_totlabels_ship", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels_ship.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_sum_cubage_by_totlabels_ship"}, "created_at": 1692256682.5075474, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_sum_cubage_by_totlabels_ship", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1-2. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: sum(qty * cubage) by totlabel\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_sum_cubage_by_totlabels_ship\") }}\r\n\r\nselect sum(shd.qty*pr.cubage)  as cubage,\r\n       sum(shd.qty*pr.weight)  as weight,\r\n       shd.totlabel            as totlabel\r\n  from WMSdataShipDetl shd\r\n inner join WMSdataProdMstr pr\r\n    on pr.extended=shd.extended\r\n where substring(pr.extended,1,6)<>'88372'\r\n group by totlabel", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_otgruzka_by_division\\wms_sum_by_totlabels_ship.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 1-2. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f cte: sum(qty * cubage) by totlabel\n\n*/\n\n\n\nselect sum(shd.qty*pr.cubage)  as cubage,\n       sum(shd.qty*pr.weight)  as weight,\n       shd.totlabel            as totlabel\n  from WMSdataShipDetl shd\n inner join WMSdataProdMstr pr\n    on pr.extended=shd.extended\n where substring(pr.extended,1,6)<>'88372'\n group by totlabel", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_totlabels": {"database": null, "schema": "db1", "name": "wms_totlabels", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_otgruzka_by_division\\wms_totlabels.sql", "original_file_path": "models\\sp_web_rep_otgruzka_by_division\\wms_totlabels.sql", "unique_id": "model.gulliver.wms_totlabels", "fqn": ["gulliver", "sp_web_rep_otgruzka_by_division", "wms_totlabels"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_totlabels", "checksum": {"name": "sha256", "checksum": "ae3302df551322c93f61afda7b9c3419ce61274831bec1655e3ca6b0d39096b3"}, "config": {"enabled": true, "alias": "dbt_temp_wms_totlabels", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_totlabels"}, "created_at": 1692256682.5075474, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_totlabels", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1. \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f cte: Totlabel\r\n\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_totlabels\") }}\r\n\r\n\r\nSELECT\r\n\t\tp.date_reqd as date_reqd,\r\n\t\tp.extra3 as extra3,\r\n\t\tt.extra1 AS tara,\r\n\t\tcase when COALESCE(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\r\n\t\t(cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) AS ship_addr,\r\n\t\tt.totlabel as totlabel,\r\n\t\tCOALESCE(t.extra5,'') AS parent_totlabel,\r\n\t\tcase when p.extra3 = 'TRAN' then t.weight\r\n\t\t\t\t\t\t\t\t\telse COALESCE(sum_totlabels.weight,0)\r\n\t\tend as weight,\r\n\t\tcase when p.extra3 = 'TRAN' then p.pallet_cube\r\n\t\t\t\t\t\t\t\t    else COALESCE(sum_totlabels.cubage,0)\r\n\t\tend as cube_crtn\r\n\t\t, t.packslip as packslip\r\n\tFROM WMSdataTotMastr t \r\n\tINNER JOIN WMSdataPickHead p  ON p.packslip=t.packslip\r\n\tINNER JOIN WMSdataCustMstr cm  ON cm.cust_num=p.cust_num\r\n\tCROSS JOIN {{ ref('wms_sum_by_totlabels') }} sum_totlabels\r\n\tWHERE p.date_reqd BETWEEN {{var('start_date')}} AND {{var('end_date')}}\r\n\t  AND t.accum_qty<>0\r\n\tUNION ALL\r\n\tSELECT\r\n\t\tp.date_reqd as date_reqd,\r\n\t\tp.extra3 as extra3,\r\n\t\tt.extra1 AS tara,\r\n\t\tcase when COALESCE(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\r\n\t\t(cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) AS ship_addr,\r\n\t\tt.totlabel as totlabel,\r\n\t\tCOALESCE(t.extra5,'') AS parent_totlabel,\r\n\t\tcase when p.extra3 = 'TRAN' then t.weight\r\n\t\t\t\t\t\t\t\t\telse COALESCE(sum_totlabels_ship.weight,0)\r\n\t\tend as weight,\r\n\t\tcase when p.extra3 = 'TRAN' then t.cube_crtn\r\n\t\t\t\t\t\t\t\t\telse COALESCE(sum_totlabels_ship.cubage,0)\r\n\t\tend as cube_crtn\r\n\t\t,t.packslip as packslip\r\n\tFROM WMSdataShipMstr t \r\n\tINNER JOIN WMSdataShipHist p  ON p.packslip=t.packslip\r\n\tINNER JOIN WMSdataCustMstr cm  ON cm.cust_num=p.cust_num\r\n\tCROSS JOIN {{ ref('wms_sum_by_totlabels_ship') }} sum_totlabels_ship\r\n\tWHERE p.date_reqd BETWEEN {{var('start_date')}} AND {{var('end_date')}}\r\n\tAND t.accum_qty<>0\r\n\tUNION ALL\r\n\tSELECT\r\n\t\tp.date_reqd as date_reqd,\r\n\t\tp.extra3 as extra3,\r\n\t\tt.extra1 AS tara,\r\n\t\tcase when COALESCE(cm.e_mail,'')='' then cm.cust_name else cm.e_mail end as ship_name,\r\n\t\t(cm.ship_addr1 || cm.ship_addr2 || cm.ship_addr3) AS ship_addr,\r\n\t\tt.totlabel as totlabel,\r\n\t\tCOALESCE(t.extra5,'') AS parent_totlabel,\r\n\t\tcase when p.extra3 = 'TRAN' then t.weight\r\n\t\t\t\t\t\t\t\t\telse COALESCE(sum_totlabels_ship.weight,0)\r\n\t\tend as weight,\r\n\t\tcase when p.extra3 = 'TRAN' then t.cube_crtn\r\n\t\t\t\t\t\t\t\t\telse COALESCE(sum_totlabels_ship.cubage,0) end as cube_crtn\r\n\t\t,t.packslip as packslip\r\n\tFROM WMSdataShipMstr2 t \r\n\tINNER JOIN WMSdataShipHist p  ON p.packslip=t.packslip\r\n\tINNER JOIN WMSdataCustMstr cm  ON cm.cust_num=p.cust_num\r\n\tCROSS JOIN {{ ref('wms_sum_by_totlabels_ship') }} sum_totlabels_ship\r\n\tWHERE p.date_reqd BETWEEN {{var('start_date')}} AND {{var('end_date')}}\r\n\tAND t.accum_qty<>0", "language": "sql", "refs": [["wms_sum_by_totlabels"], ["wms_sum_by_totlabels_ship"], ["wms_sum_by_totlabels_ship"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_sum_by_totlabels", "model.gulliver.wms_sum_by_totlabels_ship", "model.gulliver.wms_sum_by_totlabels_ship"]}, "compiled_path": null}, "model.gulliver.wms_picking_egais": {"database": null, "schema": "db1", "name": "wms_picking_egais", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_egais.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_egais.sql", "unique_id": "model.gulliver.wms_picking_egais", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_egais"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_egais", "checksum": {"name": "sha256", "checksum": "1c1f403b69f2a8805eb0226b183c4e5cf61e2d0d709f9f6b6334e642e535dfd6"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_egais", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_egais"}, "created_at": 1692256682.5220103, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_egais", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 7\u0430. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0410\u043a\u0446\u0438\u0437\u043d\u044b\u0439 \u0441\u043a\u043b\u0430\u0434 (EGAIS3GUL, EGAIS3POB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_egais\") }}\r\n\r\nselect\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign as userid,\r\n\ttz.zone,\r\n\tt.product,\r\n\tcount(*) as stroki,\r\n\tsum(coalesce(t.qty_exec,t.qty)) as all_sht,\r\n\tsum(case when (pu.name in ('\u043f\u0430\u043b.') or coalesce(t.qty_exec,t.qty)=t.size4) and coalesce(t.size4,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size4) else 0 end) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) as block,\r\n\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht,\r\n\tsum(pr.weight*coalesce(t.qty_exec,t.qty)) as weight,\r\n\tsum(pr.cubage*coalesce(t.qty_exec,t.qty)) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end as order_num\r\nfrom {{ ref('wms_tasks_by_sklad') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('egais3gul', 'egais3pob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end", "language": "sql", "refs": [["wms_tasks_by_sklad"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad"]}, "compiled_path": null}, "model.gulliver.wms_picking_egais_detailed": {"database": null, "schema": "db1", "name": "wms_picking_egais_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_egais_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_egais_detailed.sql", "unique_id": "model.gulliver.wms_picking_egais_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_egais_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_egais_detailed", "checksum": {"name": "sha256", "checksum": "d07b93fb7c1da763f556d2e8801bb55114a7f7c0e708b4707b275a592484bf69"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_egais_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_egais_detailed"}, "created_at": 1692256682.5427961, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_egais_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 7\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0410\u043a\u0446\u0438\u0437\u043d\u044b\u0439 \u0441\u043a\u043b\u0430\u0434 (EGAIS3GUL, EGAIS3POB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_egais_detailed\") }}\r\n\r\n\r\nselect\r\n\tt.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.load_id as load_id,\r\n\tt.order_num as order_num,\r\n\tcount(*) as stroki,\r\n\tsum(coalesce(t.qty_exec,t.qty)) as all_sht,\r\n\tsum(case when (pu.name in ('\u043f\u0430\u043b.') or coalesce(t.qty_exec,t.qty)=t.size4) and coalesce(t.size4,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size4) else 0 end) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) as block,\r\n\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht,\r\n\tsum(pr.weight*coalesce(t.qty_exec,t.qty)) as weight,\r\n\tsum(pr.cubage*coalesce(t.qty_exec,t.qty)) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id\r\nfrom {{ ref('wms_tasks_by_sklad_detailed') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('egais3gul', 'egais3pob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.load_id,\r\n\tt.order_num,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end", "language": "sql", "refs": [["wms_tasks_by_sklad_detailed"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad_detailed"]}, "compiled_path": null}, "model.gulliver.wms_picking_frov": {"database": null, "schema": "db1", "name": "wms_picking_frov", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_frov.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_frov.sql", "unique_id": "model.gulliver.wms_picking_frov", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_frov"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_frov", "checksum": {"name": "sha256", "checksum": "3d8b9b957742987965e363de4fa40e424659f5717116d8165448b91c26f0c760"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_frov", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_frov"}, "created_at": 1692256682.5508935, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_frov", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 5\u0430. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0424\u0440\u043e\u0432 (FRGUL, FRPOB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_frov\") }}\r\n\r\nselect t.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.userid_assign as userid,\r\n\ttz.zone as zone,\r\n\tt.product as product,\r\n\tcount(*) as stroki,\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as all_sht,\r\n\tsum(0) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size3) when pu.name in ('\u043a\u0433.') then coalesce(f.qty_packs,0) else 0 end\t) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.size3) when pu.name in ('\u043a\u0433.') then coalesce(f.qty_packs,0) else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(t.qty/t.size3) else 0 end) as block, --\u0431\u043b\u043e\u043a\u0438, \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043e\u043a\r\n\tsum(case when pu.name in ('\u0448\u0442.') then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht, --\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else pr.weight*coalesce(t.qty_exec,t.qty) end) as weight,\r\n\tsum(pr.cubage*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end as order_num\r\nfrom {{ ref('wms_tasks_by_sklad') }} t\r\ninner join WMSdataProdMstr pr  on pr.product_id=t.product_id\r\nleft join (\r\n\tselect\r\n\t\tf.binlabel,\r\n\t\tpr.extended,\r\n\t\tf.so_num,\r\n\t\tf.userid,\r\n\t\tsum(f.qty_packs) qty_packs,\r\n\t\tsum(f.qty) qty\r\n\tfrom WMSdataFrovStoredHu f\r\n\tinner join WMSdataProdMstr pr  on pr.product_id=f.product_id\r\n\twhere f.so_num in (select order_num from {{ ref('wms_tasks_by_sklad') }} where sklad in ('frgul', 'frpob'))\r\n\tand f.status='p'\r\n\tgroup by\r\n\t\tf.binlabel,\r\n\t\tpr.extended,\r\n\t\tf.so_num,\r\n\t\tf.userid\r\n) f on f.extended=t.product and f.so_num=t.order_num and f.userid=t.userid_assign and f.binlabel=t.source_binlabel\r\nleft join WMSdataProductUOM pu  on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz  on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('frgul', 'frpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end", "language": "sql", "refs": [["wms_tasks_by_sklad"], ["wms_tasks_by_sklad"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_tasks_by_sklad"]}, "compiled_path": null}, "model.gulliver.wms_picking_frov_detailed": {"database": null, "schema": "db1", "name": "wms_picking_frov_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_frov_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_frov_detailed.sql", "unique_id": "model.gulliver.wms_picking_frov_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_frov_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_frov_detailed", "checksum": {"name": "sha256", "checksum": "f9263048ae92c1a50e41fb1a7a7b88020f71998f696165b28448f67f69178b6a"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_frov_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_frov_detailed"}, "created_at": 1692256682.5640564, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_frov_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 5\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0424\u0440\u043e\u0432 (FRGUL, FRPOB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_frov_detailed\") }}\r\n\r\nselect t.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.load_id as load_id,\r\n\tt.order_num as order_num,\r\n\tcount(*) as stroki,\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as all_sht,\r\n\tsum(0) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size3) when pu.name in ('\u043a\u0433.') then coalesce(f.qty_packs,0) else 0 end\t) +\r\n\tsum(case when pu.name in ('\u0448\u0442.') then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.size3) when pu.name in ('\u043a\u0433.') then coalesce(f.qty_packs,0) else 0 end) +\r\n\tsum(case when pu.name in ('\u0448\u0442.') then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as block, --\u0431\u043b\u043e\u043a\u0438, \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043e\u043a\r\n\tsum(case when pu.name in ('\u0448\u0442.') then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht, --\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else pr.weight*coalesce(t.qty_exec,t.qty) end) as weight,\r\n\tsum(pr.cubage*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id\r\nfrom {{ ref('wms_tasks_by_sklad_detailed') }} t\r\ninner join WMSdataProdMstr pr  on pr.product_id=t.product_id\r\nleft join (\r\n\tselect\r\n\t\tpr.extended,\r\n\t\tf.so_num,\r\n\t\tsum(f.qty_packs) qty_packs,\r\n\t\tsum(f.qty) qty\r\n\tfrom WMSdataFrovStoredHu f\r\n\tinner join WMSdataProdMstr pr  on pr.product_id=f.product_id\r\n\twhere f.so_num in (select order_num from {{ ref('wms_tasks_by_sklad_detailed') }} where sklad in ('frgul', 'frpob'))\r\n\tand f.status='p'\r\n\tgroup by\r\n\t\tpr.extended,\r\n\t\tf.so_num\r\n) f on f.extended=t.product and f.so_num=t.order_num\r\nleft join WMSdataProductUOM pu  on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz  on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('frgul', 'frpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.load_id,\r\n\tt.order_num,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end", "language": "sql", "refs": [["wms_tasks_by_sklad_detailed"], ["wms_tasks_by_sklad_detailed"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad_detailed", "model.gulliver.wms_tasks_by_sklad_detailed"]}, "compiled_path": null}, "model.gulliver.wms_picking_suh": {"database": null, "schema": "db1", "name": "wms_picking_suh", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_suh.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_suh.sql", "unique_id": "model.gulliver.wms_picking_suh", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_suh"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_suh", "checksum": {"name": "sha256", "checksum": "38ea801766d6da571ee26bf06219be9d60e94e1a92d32af81708068325d5c92e"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_suh", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_suh"}, "created_at": 1692256682.5713289, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_suh", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 4\u0430. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u041f\u0438\u043a\u0438\u043d\u0433 \u0444\u043e\u0440\u043c\u044b 3701\r\n    \u0438 \u043f\u043e \u043d\u043e\u0432\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 (\u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u21163394), \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u043b\u0438\u0441\u044c \u041f\u0438\u043a\u0438\u043d\u0433\u0438, \u0446\u0435\u043b\u044b\u0435 \u043e\u0442 \u0448\u0442\u0443\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\r\n    \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0435\u0434.\u0438\u0437\u043c. \u0431\u0443\u0434\u0435\u0442 \u0411\u043b\u043e\u043a, \u0442\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0446\u0435\u043b\u044b\u043c \u043e\u0442 \u0448\u0442\u0443\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u0440\u043e\u0431\u043a\u0435\r\n\r\n    - \u0420\u0426 \u0421\u0443\u0445\u043e\u0439 (GUL, POB, VRPOB):\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_suh\") }}\r\n\r\nselect\r\n\tt.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.userid_assign as userid,\r\n\ttz.zone as zone,\r\n\tt.product as product,\r\n\tcount(*) as stroki,\r\n\tsum(coalesce(t.qty_exec,t.qty)) as all_sht,\r\n\tsum(case when (pu.name in ('\u043f\u0430\u043b.') or (coalesce(t.qty_exec,t.qty)=t.size4)) and coalesce(t.size4,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size4) else 0 end ) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t    sum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t    sum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) as block, --\u0431\u043b\u043e\u043a\u0438, \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043e\u043a\r\n\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht, --\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0448\u0442\u0443\u043a\r\n\tsum(pr.weight*coalesce(t.qty_exec,t.qty)) as weight,\r\n\tsum(pr.cubage*coalesce(t.qty_exec,t.qty)) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end as order_num\r\nfrom {{ ref('wms_tasks_by_sklad') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('gul', 'pob', 'vrpob', 'krpob', 'mrpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end", "language": "sql", "refs": [["wms_tasks_by_sklad"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad"]}, "compiled_path": null}, "model.gulliver.wms_picking_suh_detailed": {"database": null, "schema": "db1", "name": "wms_picking_suh_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_suh_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_suh_detailed.sql", "unique_id": "model.gulliver.wms_picking_suh_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_suh_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_suh_detailed", "checksum": {"name": "sha256", "checksum": "bb698fff9519bb9004b67e791c97ff932aeaf4af6f2a34f51bfc605d192e9b4a"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_suh_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_suh_detailed"}, "created_at": 1692256682.5834217, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_suh_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 4\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f \u041f\u0438\u043a\u0438\u043d\u0433 \u0444\u043e\u0440\u043c\u044b 3701\r\n    \u0438 \u043f\u043e \u043d\u043e\u0432\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 (\u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u21163394), \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u043b\u0438\u0441\u044c \u041f\u0438\u043a\u0438\u043d\u0433\u0438, \u0446\u0435\u043b\u044b\u0435 \u043e\u0442 \u0448\u0442\u0443\u043a \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\r\n    \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0435\u0434.\u0438\u0437\u043c. \u0431\u0443\u0434\u0435\u0442 \u0411\u043b\u043e\u043a, \u0442\u043e \u043f\u0440\u043e\u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0446\u0435\u043b\u044b\u043c \u043e\u0442 \u0448\u0442\u0443\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u043e\u0440\u043e\u0431\u043a\u0435\r\n\r\n    - \u0420\u0426 \u0421\u0443\u0445\u043e\u0439 (GUL, POB, VRPOB):\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_suh_detailed\") }}\r\n\r\nselect\r\n\tt.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.load_id as load_id,\r\n\tt.order_num as order_num,\r\n\tcount(*) as stroki,\r\n\tsum(coalesce(t.qty_exec,t.qty)) as all_sht,\r\n\tsum(case when (pu.name in ('\u043f\u0430\u043b.') or (coalesce(t.qty_exec,t.qty)=t.size4)) and coalesce(t.size4,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.size4) else 0 end ) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t    sum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as upak, --\u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 + \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) +\r\n\t    sum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then floor(coalesce(t.qty_exec,t.qty)/t.size3) else 0 end) as box, --\u043a\u043e\u0440\u043e\u0431\u043a\u0438 + \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.qty_exec,t.qty)!=t.size4 and coalesce(t.packsize,0)!=0 then floor(coalesce(t.qty_exec,t.qty)/t.packsize)  else 0 end) as block, --\u0431\u043b\u043e\u043a\u0438, \u0431\u043b\u043e\u043a\u0438 \u0438\u0437 \u0448\u0442\u0443\u043a \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043e\u043a\r\n\tsum(case when pu.name in ('\u0448\u0442.') and coalesce(t.qty_exec,t.qty)!=t.size4 then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) else 0 end) as sht, --\u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0448\u0442\u0443\u043a\r\n\tsum(pr.weight*coalesce(t.qty_exec,t.qty)) as weight,\r\n\tsum(pr.cubage*coalesce(t.qty_exec,t.qty)) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id\r\nfrom {{ ref('wms_tasks_by_sklad_detailed') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('gul', 'pob', 'vrpob', 'krpob', 'mrpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.load_id,\r\n\tt.order_num,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end", "language": "sql", "refs": [["wms_tasks_by_sklad_detailed"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad_detailed"]}, "compiled_path": null}, "model.gulliver.wms_picking_temp": {"database": null, "schema": "db1", "name": "wms_picking_temp", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_temp.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_temp.sql", "unique_id": "model.gulliver.wms_picking_temp", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_temp"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_temp", "checksum": {"name": "sha256", "checksum": "22101d7182bab843360590f73f0d8d30093c239fb8a16951f03d1227b0b41305"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_temp", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_temp"}, "created_at": 1692256682.601603, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_temp", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 6\u0430. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u044b\u0439 (ZMGUL, ZMPOB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_temp\") }}\r\n\r\n\r\nselect\r\n    t.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.userid_assign as userid,\r\n\ttz.zone as zone,\r\n\tt.product as product,\r\n\tcount(*) as stroki,\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as all_sht,\r\n\tsum(0) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) when pu.name in ('\u043a\u0433.')  then coalesce(f.qty_packs,0)  else 0 end) +\r\n\tsum(case when pu.name in ('\u0448\u0442.') then coalesce(t.qty_exec,t.qty)/t.size3 else 0 end) as upak,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) when pu.name in ('\u043a\u0433.')  then coalesce(f.qty_packs,0)  else 0 end) +\r\n\tsum(case when pu.name in ('\u0448\u0442.') then coalesce(t.qty_exec,t.qty)/t.size3 else 0 end) as box,\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) else 0 end) as block,\r\n\tsum(case when pu.name in ('\u0448\u0442.') then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) when pu.name in ('\u043a\u0433.') then toFloat32(f.qty)  else 0 end) as sht,\r\n\tsum(pr.weight*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as weight,\r\n\tsum(pr.cubage*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end as order_num\r\nfrom {{ ref('wms_tasks_by_sklad') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join (\r\n\tselect rf.binlabel as binlabel,\r\n\t\tpr.extended as extended,\r\n\t\trf.packslip as so_num,\r\n\t\trf.userid,\r\n\t\tsum(case when rfd.quantity is not null  then 0 else case when (t.size3 <= rf.quantity or (t.size3*pers.val)<= rf.quantity) then 1 else 0 end end) qty_packs,\r\n\t\tsum(case when rfd.quantity is not null  then 0 else case when (t.size3*pers.val) > rf.quantity then 1 else 0 end end) qty\r\n\tfrom {{ ref('wms_rf_log_all') }} rf\r\n\tinner join WMSdataProdMstr pr  on pr.extended=rf.extended\r\n\tleft join {{ ref('wms_rf_log_all') }} rfd on rfd.action = 'pickrese' and rfd.packslip = rf.packslip and rf.binlabel= rfd.binlabel\r\n\tand rfd.license_plate = rf.totlabel and rfd.extended = rf.extended --and rfd.date_time > rf.date_time\r\n\tjoin {{ ref('wms_tasks_by_sklad') }} t on t.order_num = rf.packslip and t.sklad in ('zmgul', 'zmpob') and rf.extended = t.product and t.hu_id = rf.totlabel and t.source_binlabel = rf.binlabel\r\n\tcross join (\r\n\t\tselect (1 - toDecimal32(value, 2)/100) as val from WMSdataControl where control_code = 'ves_korob_percent'\r\n\t) pers\r\n\twhere (rf.action = 'pickdetl' and rf.userid <> 'rfbase')\r\n\t  and coalesce(rf.quantity,0) <> 0\r\n\tgroup by rf.binlabel,\r\n\t\tpr.extended,\r\n\t\trf.packslip,\r\n\t\trf.userid\r\n\thaving sum(rf.quantity)<>0\r\n) f on f.extended=t.product and f.so_num=t.order_num\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('zmgul', 'zmpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.userid_assign,\r\n\ttz.zone,\r\n\tt.product,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end,\r\n\tcase when {{ var('wms_list') }}=0 then '' else t.order_num end", "language": "sql", "refs": [["wms_tasks_by_sklad"], ["wms_rf_log_all"], ["wms_rf_log_all"], ["wms_tasks_by_sklad"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_tasks_by_sklad"]}, "compiled_path": null}, "model.gulliver.wms_picking_temp_detailed": {"database": null, "schema": "db1", "name": "wms_picking_temp_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_temp_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_temp_detailed.sql", "unique_id": "model.gulliver.wms_picking_temp_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_temp_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_temp_detailed", "checksum": {"name": "sha256", "checksum": "6ec8e0c07f12e49de295ea113970c51f9fc1dfaa0a62cd74f858e2253d5353ae"}, "config": {"enabled": true, "alias": "dbt_temp_wms_picking_temp_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_picking_temp_detailed"}, "created_at": 1692256682.6189709, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_picking_temp_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 6\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430)\r\n\r\n    - \u0420\u0426 \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u044b\u0439 (ZMGUL, ZMPOB)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_picking_temp_detailed\") }}\r\n\r\n\r\nselect\r\n    t.sklad as sklad,\r\n\tt.cust_num as cust_num,\r\n\tt.date_ship as date_ship,\r\n\tt.load_id as load_id,\r\n\tt.order_num as order_num,\r\n\tcount(*) as stroki,\r\n\tsum(case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as all_sht,\r\n\tsum(0) as pal,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.','\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) when pu.name in ('\u043a\u0433.')  then coalesce(f.qty_packs,0)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') then coalesce(t.qty_exec,t.qty)/t.size3 else 0 end) as upak,\r\n\tsum(case when pu.name in ('\u043a\u043e\u0440.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) when pu.name in ('\u043a\u0433.')  then coalesce(f.qty_packs,0)  else 0 end) +\r\n\t\tsum(case when pu.name in ('\u0448\u0442.') then coalesce(t.qty_exec,t.qty)/t.size3 else 0 end) as box,\r\n\tsum(case when pu.name in ('\u0431\u043b.') and coalesce(t.packsize,0)!=0  then floor(coalesce(t.qty_exec,t.qty)/t.packsize) else 0 end) as block,\r\n\tsum(case when pu.name in ('\u0448\u0442.') then ceiling(toFloat32(coalesce(t.qty_exec,t.qty))%toFloat32(t.size3)) when pu.name in ('\u043a\u0433.') then toFloat32(f.qty)  else 0 end) as sht,\r\n\tsum(pr.weight*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as weight,\r\n\tsum(pr.cubage*case when pu.name in ('\u043a\u0433.') then t.qty_exec else coalesce(t.qty_exec,t.qty) end) as volume,\r\n\tt.container_id as container_id,\r\n\tmax(t.duration) as duration,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end as list_id\r\nfrom {{ ref('wms_tasks_by_sklad') }} t\r\ninner join WMSdataProdMstr pr on pr.product_id=t.product_id\r\nleft join (\r\n\tselect pr.extended as extended,\r\n\t\trf.packslip as so_num,\r\n\t\tsum(case when rfd.quantity is not null  then 0 else case when (t.size3 <= rf.quantity or (t.size3*pers.val)<= rf.quantity) then 1 else 0 end end) qty_packs,\r\n\t\tsum(case when rfd.quantity is not null  then 0 else case when (t.size3*pers.val) > rf.quantity then 1 else 0 end end) qty\r\n\tfrom {{ ref('wms_rf_log_all') }} rf\r\n\tinner join WMSdataProdMstr pr  on pr.extended=rf.extended\r\n\tleft join {{ ref('wms_rf_log_all') }} rfd on rfd.action = 'pickrese' and rfd.packslip = rf.packslip and rf.binlabel= rfd.binlabel\r\n\tand rfd.license_plate = rf.totlabel and rfd.extended = rf.extended --and rfd.date_time > rf.date_time\r\n\tjoin {{ ref('wms_tasks_by_sklad') }} t on t.order_num = rf.packslip and t.sklad in ('zmgul', 'zmpob') and rf.extended = t.product and t.hu_id = rf.totlabel and t.source_binlabel = rf.binlabel\r\n\tcross join (\r\n\t\tselect (1 - toDecimal32(value, 2)/100) as val from WMSdataControl where control_code = 'ves_korob_percent'\r\n\t) pers\r\n\twhere (rf.action = 'pickdetl' and rf.userid <> 'rfbase')\r\n\t  and coalesce(rf.quantity,0) <> 0\r\n\tand pr.prod_udf2 = '2'\r\n\tgroup by pr.extended,\r\n\t\trf.packslip\r\n\thaving sum(rf.quantity)<>0\r\n) f on f.extended=t.product and f.so_num=t.order_num\r\nleft join WMSdataProductUOM pu on pu.product_uom_id = t.pick_uom_id --pu.product_id=t.product_id and pu.uom_pick=1\r\nleft join WMSdataBinZone tz on tz.bin_zone_id=t.zone_id\r\nwhere t.sklad in ('zmgul', 'zmpob')\r\ngroup by\r\n\tt.sklad,\r\n\tt.cust_num,\r\n\tt.date_ship,\r\n\tt.load_id,\r\n\tt.order_num,\r\n\tt.container_id,\r\n\tcase when {{ var('wms_list') }}=0 then 0 else t.list_id end", "language": "sql", "refs": [["wms_tasks_by_sklad"], ["wms_rf_log_all"], ["wms_rf_log_all"], ["wms_tasks_by_sklad"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_tasks_by_sklad"]}, "compiled_path": null}, "model.gulliver.wms_picking_total": {"database": null, "schema": "db1", "name": "wms_picking_total", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_total.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_total.sql", "unique_id": "model.gulliver.wms_picking_total", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_total"], "alias": "wms_picking_total", "checksum": {"name": "sha256", "checksum": "b146bc08de3313a81a3799f3f5843377de6f42e041361c6df637c9e517371fe9"}, "config": {"enabled": true, "alias": "wms_picking_total", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "wms_picking_total"}, "created_at": 1692256682.6298358, "relation_name": "db1.wms_picking_total", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 8a. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0431\u0435\u0437 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"wms_picking_total\") }}\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_suh') }}\r\n\r\nUNION ALL\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_frov') }}\r\n\r\n UNION ALL\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_temp') }}\r\n\r\n UNION ALL\r\n\r\n SELECT *\r\n  FROM {{ ref('wms_picking_egais') }}", "language": "sql", "refs": [["wms_picking_suh"], ["wms_picking_frov"], ["wms_picking_temp"], ["wms_picking_egais"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_picking_suh", "model.gulliver.wms_picking_frov", "model.gulliver.wms_picking_temp", "model.gulliver.wms_picking_egais"]}, "compiled_path": null}, "model.gulliver.wms_picking_total_detailed": {"database": null, "schema": "db1", "name": "wms_picking_total_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_picking_total_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_picking_total_detailed.sql", "unique_id": "model.gulliver.wms_picking_total_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_picking_total_detailed"], "alias": "wms_picking_total_detailed", "checksum": {"name": "sha256", "checksum": "dfd305c233b063157e6b5c794ffc3b3c901381c055db8c04c931123c51d1251b"}, "config": {"enabled": true, "alias": "wms_picking_total_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "wms_picking_total_detailed"}, "created_at": 1692256682.6298358, "relation_name": "db1.wms_picking_total_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 8\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #picking - \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0441 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"wms_picking_total_detailed\") }}\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_suh_detailed') }}\r\n\r\nUNION ALL\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_frov_detailed') }}\r\n\r\n UNION ALL\r\n\r\nSELECT *\r\n  FROM {{ ref('wms_picking_temp_detailed') }}\r\n\r\n UNION ALL\r\n\r\n SELECT *\r\n  FROM {{ ref('wms_picking_egais_detailed') }}", "language": "sql", "refs": [["wms_picking_suh_detailed"], ["wms_picking_frov_detailed"], ["wms_picking_temp_detailed"], ["wms_picking_egais_detailed"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_picking_suh_detailed", "model.gulliver.wms_picking_frov_detailed", "model.gulliver.wms_picking_temp_detailed", "model.gulliver.wms_picking_egais_detailed"]}, "compiled_path": null}, "model.gulliver.wms_rf_log_all": {"database": null, "schema": "db1", "name": "wms_rf_log_all", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_rf_log_all.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_rf_log_all.sql", "unique_id": "model.gulliver.wms_rf_log_all", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_rf_log_all"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_rf_log_all", "checksum": {"name": "sha256", "checksum": "d3a31ee69de47822ff705f7c76deb8c4edb90e987e6e40356ad9479120076a03"}, "config": {"enabled": true, "alias": "dbt_temp_wms_rf_log_all", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_picking_base\\wms_rf_log_all.sql", "deferred": false, "unrendered_config": {"materialized": "view", "alias": "dbt_temp_wms_rf_log_all"}, "created_at": 1692256682.6429088, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_rf_log_all", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 6. View rf_log_all (\u043e\u0431\u0449.)\r\n*/\r\n\r\n{{ config(materialized='view', alias=\"dbt_temp_wms_rf_log_all\") }}\r\n\r\nselect row_id,packslip,binlabel,extended,termid,userid,action,quantity,q_scaler,totlabel,reference2,reference3,\r\ndate_time,date_creat,clientname,tenantid,po_num,serial,location,license_plate,packsize,uploaded\r\n\r\nfrom WMSdataRfLog\r\n\r\nunion all\r\n\r\nselect row_id,packslip,binlabel,extended,termid,userid,action,quantity,q_scaler,totlabel,reference2,reference3,\r\ndate_time,date_creat,clientname,tenantid,po_num,serial,location,license_plate,packsize,uploaded\r\n\r\nfrom WMSdataRfLog2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_picking_base\\wms_rf_log_all.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 6. View rf_log_all (\u043e\u0431\u0449.)\n*/\n\n\n\nselect row_id,packslip,binlabel,extended,termid,userid,action,quantity,q_scaler,totlabel,reference2,reference3,\ndate_time,date_creat,clientname,tenantid,po_num,serial,location,license_plate,packsize,uploaded\n\nfrom WMSdataRfLog\n\nunion all\n\nselect row_id,packslip,binlabel,extended,termid,userid,action,quantity,q_scaler,totlabel,reference2,reference3,\ndate_time,date_creat,clientname,tenantid,po_num,serial,location,license_plate,packsize,uploaded\n\nfrom WMSdataRfLog2", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_tasks": {"database": null, "schema": "db1", "name": "wms_tasks", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tasks.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tasks.sql", "unique_id": "model.gulliver.wms_tasks", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tasks"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks", "checksum": {"name": "sha256", "checksum": "96d7a398815e181dfe661dd3e6f94e98c0101e655c01aadda6f42acc908fe3e0"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tasks", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tasks"}, "created_at": 1692256682.6489255, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 2a. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tasks\") }}\r\n\r\n\r\nselect  h.task_id as task_id,\r\n    h.list_id as list_id,\r\n    h.order_num as order_num,\r\n    h.date_start as date_start,\r\n    h.zone_id as zone_id,\r\n    h.userid_assign as userid_assign,\r\n    h.container_id as container_id,\r\n    d.product as product,\r\n    d.packsize as packsize,\r\n    d.source_binlabel as source_binlabel,\r\n    d.product_id2 as product_id,\r\n    d.qty as qty,\r\n    d.qty_exec as qty_exec,\r\n    h.load_id as load_id,\r\n    d.to_hu_id as hu_id,\r\n    datediff('second',\r\n h.date_start,\r\n h.date_due) as duration,\r\n    d.size3 as size3,\r\n    d.size4 as size4,\r\n    d.pick_uom_id as pick_uom_id,\r\n    h.type_store_to as type_store_to\r\n  from WMSdataTaskHead h\r\n inner join WMSdataTaskDetl d\r\n    on d.task_id=h.task_id\r\n where 1=1\r\n   and (((coalesce({{ var('wms_usl') }}, 0) = 0)\r\n   and (h.date_start between toDateTime('{{ var('start_date') }} {{ var('time_start') }}')\r\n                         and toDateTime('{{ var('end_date') }} {{ var('time_end') }}')))\r\n\tor ((coalesce({{ var('wms_usl') }},0) = 1) and h.order_num in (select order_num from {{ ref('wms_tmp_head_new') }}))\r\n\t)\r\n    and (h.task_type='02')\r\n    and (h.status='c')\r\n    and (h.userid_assign not in ('rfbase','admin'))\r\n\r\nunion all\r\n\r\nselect  h.task_id as task_id,\r\n    h.list_id as list_id,\r\n    h.order_num as order_num,\r\n    h.date_start as date_start,\r\n    h.zone_id as zone_id,\r\n    h.userid_assign as userid_assign,\r\n    h.container_id as container_id,\r\n    d.product as product,\r\n    d.packsize as packsize,\r\n    d.source_binlabel as source_binlabel,\r\n    d.product_id2 as product_id,\r\n    d.qty as qty,\r\n    d.qty_exec as qty_exec,\r\n    h.load_id as load_id,\r\n    d.to_hu_id as hu_id,\r\n    datediff('second',\r\n h.date_start,\r\n h.date_due) as duration,\r\n    d.size3 as size3,\r\n    d.size4 as size4,\r\n    d.pick_uom_id as pick_uom_id,\r\n    h.type_store_to as type_store_to\r\n  from WMSdataTaskHead2 h\r\n inner join WMSdataTaskDetl2 d on d.task_id=h.task_id\r\n where 1=1\r\n   and (((coalesce({{ var('wms_usl') }}, 0) = 0)\r\n   and (h.date_start between toDateTime('{{ var('start_date') }} {{ var('time_start') }}')\r\n                         and toDateTime('{{ var('end_date') }} {{ var('time_end') }}')))\r\n\tor ((coalesce({{ var('wms_usl') }},0) = 1) and h.order_num in (select order_num from {{ ref('wms_tmp_head_new') }}))\r\n\t)\r\n    and (h.task_type='02')\r\n    and (h.status='c')\r\n    and (h.userid_assign not in ('rfbase','admin'))", "language": "sql", "refs": [["wms_tmp_head_new"], ["wms_tmp_head_new"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tmp_head_new", "model.gulliver.wms_tmp_head_new"]}, "compiled_path": null}, "model.gulliver.wms_tasks2": {"database": null, "schema": "db1", "name": "wms_tasks2", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tasks2.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tasks2.sql", "unique_id": "model.gulliver.wms_tasks2", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tasks2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks2", "checksum": {"name": "sha256", "checksum": "d6fa6a4bd7fb09a9494b075a484578b04eb4a36528fba21b963aad2574ba358a"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tasks2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_picking_base\\wms_tasks2.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tasks2"}, "created_at": 1692256682.6646116, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks2", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks2\r\n    - \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0437\u0430\u043a\u0430\u0437\u044b, \u0433\u043c \u0438 \u0442\u0438\u043f \u0442\u0441 \u043f\u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tasks2\") }}\r\n\r\n\r\nSELECT DISTINCT h.order_num AS order_num,\r\n\t   h.load_id            AS load_id,\r\n\t   d.to_hu_id           AS hu_id\r\n  FROM WMSdataTaskHead h\r\n  JOIN WMSdataTaskDetl d    ON h.task_id = d.task_id\r\n WHERE h.task_type = '11'\r\n   AND (h.date_start BETWEEN toDateTime('{{ var('start_date') }} {{ var('time_start') }}')\r\n                         AND toDateTime('{{ var('end_date') }} {{ var('time_end') }}'))\r\n\r\nUNION ALL\r\n\r\nSELECT DISTINCT h.order_num AS order_num,\r\n\t   h.load_id            AS load_id,\r\n\t   d.to_hu_id           AS hu_id\r\n FROM WMSdataTaskHead2 h\r\n JOIN WMSdataTaskDetl2 d   ON h.task_id = d.task_id\r\nWHERE h.task_type = '11'\r\n  AND (h.date_start BETWEEN toDateTime('{{ var('start_date') }} {{ var('time_start') }}')\r\n                        AND toDateTime('{{ var('end_date') }} {{ var('time_end') }}'))", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_picking_base\\wms_tasks2.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 1\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks2\n    - \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0437\u0430\u043a\u0430\u0437\u044b, \u0433\u043c \u0438 \u0442\u0438\u043f \u0442\u0441 \u043f\u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435\n*/\n\n\n\n\nSELECT DISTINCT h.order_num AS order_num,\n\t   h.load_id            AS load_id,\n\t   d.to_hu_id           AS hu_id\n  FROM WMSdataTaskHead h\n  JOIN WMSdataTaskDetl d    ON h.task_id = d.task_id\n WHERE h.task_type = '11'\n   AND (h.date_start BETWEEN toDateTime('2022-12-31 00:00:00')\n                         AND toDateTime('2022-12-31 23:59:00'))\n\nUNION ALL\n\nSELECT DISTINCT h.order_num AS order_num,\n\t   h.load_id            AS load_id,\n\t   d.to_hu_id           AS hu_id\n FROM WMSdataTaskHead2 h\n JOIN WMSdataTaskDetl2 d   ON h.task_id = d.task_id\nWHERE h.task_type = '11'\n  AND (h.date_start BETWEEN toDateTime('2022-12-31 00:00:00')\n                        AND toDateTime('2022-12-31 23:59:00'))", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.wms_tasks_by_sklad": {"database": null, "schema": "db1", "name": "wms_tasks_by_sklad", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tasks_by_sklad.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tasks_by_sklad.sql", "unique_id": "model.gulliver.wms_tasks_by_sklad", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tasks_by_sklad"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_by_sklad", "checksum": {"name": "sha256", "checksum": "bb694ba004874663b9d2e7dab7e617d02114223f42afcda48dff4e506c4a3940"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tasks_by_sklad", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tasks_by_sklad"}, "created_at": 1692256682.6752138, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_by_sklad", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 3\u0430. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks_by_sklad\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tasks_by_sklad\") }}\r\n\r\nSELECT COALESCE(ph.extra3 ,sh.extra3)       AS sklad,\r\n\t   COALESCE(ph.date_reqd,sh.date_reqd)  AS date_ship,\r\n\t   t.task_id                            AS task_id,\r\n\t   t.list_id                            AS list_id,\r\n\t   t.order_num                          AS order_num,\r\n\t   t.date_start                         AS date_start,\r\n\t   t.zone_id AS zone_id,\r\n\t   t.userid_assign AS userid_assign,\r\n\t   t.container_id AS container_id,\r\n\t   t.product    AS product,\r\n\t   t.packsize AS packsize,\r\n\t   t.source_binlabel AS source_binlabel,\r\n\t   t.product_id AS product_id,\r\n\t   t.qty AS qty,\r\n\t   CASE WHEN t.qty_exec=0 THEN t.qty ELSE t.qty_exec END AS qty_exec,\r\n\t   t.load_id AS load_id,\r\n\t   COALESCE(ph.cust_num,sh.cust_num)  AS cust_num,\r\n\t   t.hu_id AS hu_id,\r\n\t   t.duration AS duration,\r\n\t   t.size3 AS size3,\r\n\t   t.size4 AS size4,\r\n\t   t.pick_uom_id AS pick_uom_id,\r\n\t   t.type_store_to AS type_store_to\r\n FROM {{ ref('wms_tasks') }} t\r\n LEFT JOIN WMSdataPickHead ph ON ph.packslip=t.order_num\r\n LEFT JOIN WMSdataShipHist sh ON sh.packslip=t.order_num\r\nWHERE (COALESCE(t.type_store_to,'') <> '1' OR COALESCE(t.qty_exec,0)<>0) -- \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u043d\u044b\u0435/\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438", "language": "sql", "refs": [["wms_tasks"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks"]}, "compiled_path": null}, "model.gulliver.wms_tasks_by_sklad_detailed": {"database": null, "schema": "db1", "name": "wms_tasks_by_sklad_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tasks_by_sklad_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tasks_by_sklad_detailed.sql", "unique_id": "model.gulliver.wms_tasks_by_sklad_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tasks_by_sklad_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_by_sklad_detailed", "checksum": {"name": "sha256", "checksum": "daaf54970ecd6a831ca9518ff7f4e06cd481479c08045f5037fedbf5a6acf6e7"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tasks_by_sklad_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tasks_by_sklad_detailed"}, "created_at": 1692256682.690817, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_by_sklad_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 3\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks_by_sklad\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tasks_by_sklad_detailed\") }}\r\n\r\nSELECT\r\n\tCOALESCE(ph.extra3 ,sh.extra3)       AS sklad,\r\n\t   COALESCE(ph.date_reqd,sh.date_reqd)  AS date_ship,\r\n\t   t.task_id                            AS task_id,\r\n\t   t.list_id                            AS list_id,\r\n\t   t.order_num                          AS order_num,\r\n\t   t.date_start                         AS date_start,\r\n\t   t.zone_id AS zone_id,\r\n\t   t.userid_assign AS userid_assign,\r\n\t   t.container_id AS container_id,\r\n\t   t.product    AS product,\r\n\t   t.packsize AS packsize,\r\n\t   t.source_binlabel AS source_binlabel,\r\n\t   t.product_id AS product_id,\r\n\t   t.qty AS qty,\r\n\t   CASE WHEN t.qty_exec=0 THEN t.qty ELSE t.qty_exec END AS qty_exec,\r\n\t   CASE WHEN t2.order_num IS NOT NULL THEN t2.load_id ELSE t.load_id END AS load_id,  --\u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0442\u0438\u043f \u0442\u0441\r\n\t   COALESCE(ph.cust_num, sh.cust_num)  AS cust_num,\r\n\t   t.hu_id AS hu_id,\r\n\t   t.duration AS duration,\r\n\t   t.size3 AS size3,\r\n\t   t.size4 AS size4,\r\n\t   t.pick_uom_id AS pick_uom_id,\r\n\t   t.type_store_to AS type_store_to\r\nFROM {{ ref('wms_tasks_detailed') }} t\r\n LEFT JOIN WMSdataPickHead ph ON ph.packslip=t.order_num\r\n LEFT JOIN WMSdataShipHist sh ON sh.packslip=t.order_num\r\n LEFT JOIN {{ ref('wms_tasks2') }} t2 ON t2.order_num = t.order_num and t2.hu_id = t.hu_id\r\nWHERE (COALESCE(t.type_store_to,'') <> '1' OR COALESCE(t.qty_exec,0)<>0) --\u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043e\u0431\u043d\u0443\u043b\u0435\u043d\u043d\u044b\u0435/\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438", "language": "sql", "refs": [["wms_tasks_detailed"], ["wms_tasks2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks_detailed", "model.gulliver.wms_tasks2"]}, "compiled_path": null}, "model.gulliver.wms_tasks_detailed": {"database": null, "schema": "db1", "name": "wms_tasks_detailed", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tasks_detailed.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tasks_detailed.sql", "unique_id": "model.gulliver.wms_tasks_detailed", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tasks_detailed"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_detailed", "checksum": {"name": "sha256", "checksum": "6cb14b329c04ccacf487a533a4011644edf7158deb41d11eadd228b540196430"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tasks_detailed", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tasks_detailed"}, "created_at": 1692256682.6953516, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tasks_detailed", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 2\u0431. \u0422\u0430\u0431\u043b\u0438\u0446\u0430 #tasks\r\n    - \u043f\u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0435 \u043f\u0440\u0438\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u043c \u043e\u0442\u0431\u043e\u0440\u044b\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tasks_detailed\") }}\r\n\r\n\r\nselect h.task_id as task_id,\r\n    h.list_id as list_id,\r\n    h.order_num as order_num,\r\n    h.date_start as date_start,\r\n    h.zone_id as zone_id,\r\n    h.userid_assign as userid_assign,\r\n    h.container_id as container_id,\r\n    d.product as product,\r\n    d.packsize as packsize,\r\n    d.source_binlabel as source_binlabel,\r\n    d.product_id2 as product_id,\r\n    d.qty as qty,\r\n    d.qty_exec as qty_exec,\r\n    h.load_id as load_id,\r\n    d.to_hu_id as hu_id,\r\n    datediff('second',\r\n h.date_start,\r\n h.date_due) as duration,\r\n    d.size3 as size3,\r\n    d.size4 as size4,\r\n    d.pick_uom_id as pick_uom_id,\r\n    h.type_store_to as type_store_to\r\nfrom WMSdataTaskHead h\r\ninner join WMSdataTaskDetl d  on d.task_id=h.task_id\r\njoin {{ ref('wms_tasks2') }} t on t.order_num = h.order_num and t.hu_id = d.to_hu_id\r\nwhere 1 = 1\r\nand (h.date_start between\r\n    timestamp_add(toDateTime('{{ var('start_date') }} {{ var('time_start') }}'), interval -2 day)\r\nand timestamp_add(toDateTime('{{ var('end_date') }} {{ var('time_end') }}'), interval 1 day))\r\nand (h.task_type='02')\r\nand (h.status='c')\r\nand (h.userid_assign not in ('rfbase','admin'))\r\n\r\nunion all\r\n\r\nselect h.task_id as task_id,\r\n    h.list_id as list_id,\r\n    h.order_num as order_num,\r\n    h.date_start as date_start,\r\n    h.zone_id as zone_id,\r\n    h.userid_assign as userid_assign,\r\n    h.container_id as container_id,\r\n    d.product as product,\r\n    d.packsize as packsize,\r\n    d.source_binlabel as source_binlabel,\r\n    d.product_id2 as product_id,\r\n    d.qty as qty,\r\n    d.qty_exec as qty_exec,\r\n    h.load_id as load_id,\r\n    d.to_hu_id as hu_id,\r\n    datediff('second',\r\n h.date_start,\r\n h.date_due) as duration,\r\n    d.size3 as size3,\r\n    d.size4 as size4,\r\n    d.pick_uom_id as pick_uom_id,\r\n    h.type_store_to as type_store_to\r\nfrom WMSdataTaskHead2 h\r\ninner join WMSdataTaskDetl2 d  on d.task_id=h.task_id\r\njoin {{ ref('wms_tasks2') }} t on t.order_num = h.order_num and t.hu_id = d.to_hu_id\r\nwhere 1 = 1\r\nand (h.date_start between\r\n    timestamp_add(toDateTime('{{ var('start_date') }} {{ var('time_start') }}'), interval -2 day)\r\nand timestamp_add(toDateTime('{{ var('end_date') }} {{ var('time_end') }}'), interval 1 day))\r\nand (h.task_type='02')\r\nand (h.status='c')\r\nand (h.userid_assign not in ('rfbase','admin'))", "language": "sql", "refs": [["wms_tasks2"], ["wms_tasks2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.wms_tasks2", "model.gulliver.wms_tasks2"]}, "compiled_path": null}, "model.gulliver.wms_tmp_head_new": {"database": null, "schema": "db1", "name": "wms_tmp_head_new", "resource_type": "model", "package_name": "gulliver", "path": "sp_web_rep_picking_base\\wms_tmp_head_new.sql", "original_file_path": "models\\sp_web_rep_picking_base\\wms_tmp_head_new.sql", "unique_id": "model.gulliver.wms_tmp_head_new", "fqn": ["gulliver", "sp_web_rep_picking_base", "wms_tmp_head_new"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tmp_head_new", "checksum": {"name": "sha256", "checksum": "a6648ab5375b608c1f28430087e695301f8176dc2c1d1ed359b88c320656544a"}, "config": {"enabled": true, "alias": "dbt_temp_wms_tmp_head_new", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\sp_web_rep_picking_base\\wms_tmp_head_new.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_wms_tmp_head_new"}, "created_at": 1692256682.7120645, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_wms_tmp_head_new", "raw_code": "/*\r\n    WMSdata. \u0428\u0430\u0433 1. \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 #tmp_head_new\r\n    - \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u043e\u0442\u0431\u043e\u0440\u044b \u0437\u0430 5 \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438\r\n    - \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u0437\u044b\r\n    \u0414\u0430\u043b\u0435\u0435 \u0448\u0430\u0433\u0438:\r\n    \u0430) \u0431\u0435\u0437 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432\r\n    \u0431) \u0441 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_wms_tmp_head_new\") }}\r\n\r\nSELECT *\r\n  FROM (\r\n     SELECT *\r\n       FROM WMSdataTaskHead\r\n      WHERE task_type = '02'\r\n        AND (status='C')\r\n        AND (userid_assign NOT IN ('rfbase','admin'))\r\n        AND date_start > toDateTime('{{ var('start_date') }} {{ var('time_start')}}')\r\n    UNION ALL\r\n     SELECT *\r\n       FROM WMSdataTaskHead2\r\n     WHERE task_type = '02'\r\n       AND (status='C')\r\n       AND (userid_assign not in ('rfbase','admin'))\r\n       AND date_start > toDateTime('{{ var('start_date') }} {{ var('time_start') }}')\r\n ) tmp_head\r\n WHERE tmp_head.order_num IN (\r\n     SELECT p.order_num\r\n       FROM WMSdataPickHead p\r\n      WHERE p.date_reqd BETWEEN {{ var('start_date') }} AND {{ var('end_date') }}\r\n      UNION ALL\r\n     SELECT s.order_num\r\n       FROM WMSdataShipHist s\r\n      WHERE s.date_reqd BETWEEN {{ var('start_date') }} AND {{ var('end_date') }}\r\n )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\sp_web_rep_picking_base\\wms_tmp_head_new.sql", "compiled": true, "compiled_code": "/*\n    WMSdata. \u0428\u0430\u0433 1. \u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 #tmp_head_new\n    - \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u043e\u0442\u0431\u043e\u0440\u044b \u0437\u0430 5 \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438\n    - \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u0437\u044b\n    \u0414\u0430\u043b\u0435\u0435 \u0448\u0430\u0433\u0438:\n    \u0430) \u0431\u0435\u0437 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432\n    \u0431) \u0441 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439\n*/\n\n\n\nSELECT *\n  FROM (\n     SELECT *\n       FROM WMSdataTaskHead\n      WHERE task_type = '02'\n        AND (status='C')\n        AND (userid_assign NOT IN ('rfbase','admin'))\n        AND date_start > toDateTime('2022-12-31 00:00:00')\n    UNION ALL\n     SELECT *\n       FROM WMSdataTaskHead2\n     WHERE task_type = '02'\n       AND (status='C')\n       AND (userid_assign not in ('rfbase','admin'))\n       AND date_start > toDateTime('2022-12-31 00:00:00')\n ) tmp_head\n WHERE tmp_head.order_num IN (\n     SELECT p.order_num\n       FROM WMSdataPickHead p\n      WHERE p.date_reqd BETWEEN 2022-12-31 AND 2022-12-31\n      UNION ALL\n     SELECT s.order_num\n       FROM WMSdataShipHist s\n      WHERE s.date_reqd BETWEEN 2022-12-31 AND 2022-12-31\n )", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.trade_stat": {"database": null, "schema": "db1", "name": "trade_stat", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat.sql", "original_file_path": "models\\TradeStat\\trade_stat.sql", "unique_id": "model.gulliver.trade_stat", "fqn": ["gulliver", "TradeStat", "trade_stat"], "alias": "trade_stat", "checksum": {"name": "sha256", "checksum": "d6bd860a198ec4d65843d2025b8e3c2d6042fddae2bf59cd6f5dcba26cf03643"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Calendar", "GUID_RR"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "MergeTree()", "order_by": "(Calendar, GUID_RR)", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "order_by": "(Calendar, GUID_RR)", "engine": "MergeTree()", "unique_key": ["Calendar", "GUID_RR"]}, "created_at": 1692256682.7231877, "relation_name": "db1.trade_stat", "raw_code": "/*\r\n    \u0412\u0438\u0442\u0440\u0438\u043d\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\r\n*/\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n    order_by='(Calendar, GUID_RR)',\r\n    engine='MergeTree()',\r\n    unique_key=['Calendar', 'GUID_RR']\r\n) }}\r\n\r\nselect\r\n\ttoDate(coalesce(t.DD, FROM_UNIXTIME(0))) AS Calendar,\r\n\ttoWeek(t.DD, 3) AS WeekNumber,\r\n\ttoDayOfWeek(t.DD) AS DayNumber,\r\n\ttoYear(t.DD) AS YearNumber,\r\n\tedd.GUID AS GUID_RR,\r\n\tDivision.NameShort AS NameShort_RR,\r\n\tDivision.NameLong AS NameLong_RR,\r\n\tDivision.NameOfficial AS NameOfficial_RR,\r\n\tif(Division.NameLong like '\u041c\u041f%' or Division.NameLong like '\u0424\u041d\u0410%', '\u0422\u0421 \u041f\u043e\u0431\u0435\u0434\u0430', '\u0422\u0421 \u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440')  AS Organization,\r\n\tedd.Region AS Region,\r\n\tedd.Date_open AS Date_open,\r\n\tedd.Date_close AS Date_close,\r\n\tedd.Format AS Format,\r\n\tedd.Federal_region AS Federal_region,\r\n\tformat('{0}-{1}-{2}', edd.Format, toString(round(DivisionParams.FloorSpace)), toString(DivisionParams.CashCount)) AS Attribute,\r\n\tDivisionGroup1.NameLong AS Division,\r\n\tDivisionGroup2.NameLong AS Group,\r\n\tDivisionParams.CashCount AS Cash_desks,\r\n\tDivisionParams.FloorSpace AS Trading_area,\r\n\tif(DivisionParams.Comparability like '%\u0433\u043e\u04341%', 1, 0) AS Comp_1y,\r\n\tif(DivisionParams.Comparability like '%10%', 1, 0) AS Cooking,\r\n\tcoalesce(t.SaleAmountWoDisc,0)-coalesce(t.SaleAmountDisc,0)-coalesce(t.RetSumm,0) AS Retail_turnover,\r\n\tb.checkCount AS Buyers,\r\n\tcoalesce(t.SaleSummPrime,0)-coalesce(t.RetSummPrime,0) AS Cost_price,\r\n\tedd.Break_even_point AS Break_even_point,\r\n\ttoInt32(edd.Target_revenue) AS Target_revenue,\r\n\tedp.Retail_turnover AS Retail_turnover_plan,\r\n\tedp.Buyers AS Buyers_plan,\r\n\tedp.Income AS Income\r\nFROM (\r\n    SELECT\r\n        dim.DD AS DD,\r\n        dim.DivisionGUID AS DivisionGUID,\r\n        sale.Qty AS SaleQty,\r\n        sale.SumCodeDoc AS SaleAmountWoDisc,\r\n        sale.SumPrimeCodeDoc AS SaleSummPrime,\r\n        disc.AmountDisc as SaleAmountDisc,\r\n        ret.Qty as RetQty,\r\n\t    ret.Summ as RetSumm,\r\n\t    if(isNull(sale.SumPrimeCodeDoc) OR isNull(sale.Qty) OR isNull(ret.Qty) OR (sale.Qty = 0), ret.Summ * 0.85, toFloat64(sale.SumPrimeCodeDoc / sale.Qty) * ret.Qty) AS RetSummPrime\r\n    FROM\r\n    (\r\n        SELECT\r\n            DD,\r\n            DivisionGUID\r\n        FROM (\r\n            SELECT\r\n                DD,\r\n                DivisionGUID\r\n            FROM {{ ref('trade_stat_outgo_goods') }}\r\n            GROUP BY DD, DivisionGUID\r\n\r\n            UNION ALL\r\n\r\n            SELECT\r\n                DD,\r\n                DivisionGUID\r\n            FROM {{ ref('trade_stat_doc_ret') }}\r\n            GROUP BY DD, DivisionGUID\r\n\r\n            UNION ALL\r\n\r\n            SELECT\r\n                DD,\r\n                DivisionGUID\r\n            FROM {{ ref('trade_stat_discounts') }}\r\n            GROUP BY DD, DivisionGUID\r\n        )\r\n        GROUP BY DD, DivisionGUID\r\n    ) dim\r\n    LEFT JOIN {{ ref('trade_stat_outgo_goods') }} sale ON dim.DD = sale.DD AND dim.DivisionGUID = sale.DivisionGUID\r\n    LEFT JOIN {{ ref('trade_stat_doc_ret') }} ret ON dim.DD = ret.DD AND dim.DivisionGUID = ret.DivisionGUID\r\n    LEFT JOIN {{ ref('trade_stat_discounts') }} disc ON dim.DD = disc.DD AND dim.DivisionGUID = disc.DivisionGUID\r\n) as t\r\nLEFT JOIN ExcelDivisionData edd ON edd.GUID = t.DivisionGUID\r\nLEFT JOIN ExcelDivisionPlan edp ON edd.OlapCode = edp.OlapCode AND toDate(t.DD) = toDate(edp.Date)\r\nLEFT JOIN {{ ref('master_data_division') }} as Division\r\n  ON edd.GUID = Division.GUID\r\nLEFT JOIN rrMasterDataDivisionAddParam as DivisionParams on Division.GUID = DivisionParams.DivisionGUID\r\nLEFT JOIN {{ ref('master_data_division_group2') }} as DivisionGroup2 on DivisionParams.Group2GUID = DivisionGroup2.GUID\r\nLEFT JOIN {{ ref('master_data_division_group1') }} as DivisionGroup1 on DivisionParams.Group1GUID = DivisionGroup1.GUID\r\nLEFT JOIN {{ ref(\"trade_stat_buyers\") }} as b on b.DD = t.DD AND b.DivisionGUID = t.DivisionGUID", "language": "sql", "refs": [["trade_stat_outgo_goods"], ["trade_stat_doc_ret"], ["trade_stat_discounts"], ["trade_stat_outgo_goods"], ["trade_stat_doc_ret"], ["trade_stat_discounts"], ["master_data_division"], ["master_data_division_group2"], ["master_data_division_group1"], ["trade_stat_buyers"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.trade_stat_outgo_goods", "model.gulliver.trade_stat_doc_ret", "model.gulliver.trade_stat_discounts", "model.gulliver.trade_stat_outgo_goods", "model.gulliver.trade_stat_doc_ret", "model.gulliver.trade_stat_discounts", "model.gulliver.master_data_division", "model.gulliver.master_data_division_group2", "model.gulliver.master_data_division_group1", "model.gulliver.trade_stat_buyers"]}, "compiled_path": null}, "model.gulliver.trade_stat_buyers": {"database": null, "schema": "db1", "name": "trade_stat_buyers", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat_buyers.sql", "original_file_path": "models\\TradeStat\\trade_stat_buyers.sql", "unique_id": "model.gulliver.trade_stat_buyers", "fqn": ["gulliver", "TradeStat", "trade_stat_buyers"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_buyers", "checksum": {"name": "sha256", "checksum": "69e30f7cbe73424e2aa4d4ac924e979123342fc3c23256fc3fce96cb54e3d61f"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat_buyers", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat_buyers"}, "created_at": 1692256682.731041, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_buyers", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat_buyers\") }}\r\n\r\nSELECT\r\n    d.GUID as DivisionGUID,\r\n    toDate(s.ShiftDate) as DD,\r\n    count(Distinct ch.GUID) as checkCount\r\nFROM rrCashCheque ch FINAL\r\n\tINNER JOIN rrCashShift s ON s.GUID = ch.ShiftGUID AND s.sKey = ch.sKey\r\n\tINNER JOIN {{ ref('master_data_division') }} d\r\n\t   ON s.DivisionGUID = d.GUID\r\nWHERE ch.ChequeStatus='close' AND ch.ChequeType='sale' AND\r\n    (s.ShiftDate BETWEEN '{{ var(\"start_date\") }}' AND '{{ var(\"end_date\") }}'\r\n        OR s.ShiftDate BETWEEN '{{ var(\"prev_year_start_date\") }}' AND '{{ var(\"prev_year_end_date\") }}')\r\nGROUP BY s.ShiftDate, d.GUID", "language": "sql", "refs": [["master_data_division"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.master_data_division"]}, "compiled_path": null}, "model.gulliver.trade_stat_discounts": {"database": null, "schema": "db1", "name": "trade_stat_discounts", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat_discounts.sql", "original_file_path": "models\\TradeStat\\trade_stat_discounts.sql", "unique_id": "model.gulliver.trade_stat_discounts", "fqn": ["gulliver", "TradeStat", "trade_stat_discounts"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_discounts", "checksum": {"name": "sha256", "checksum": "48083d1d722250b41b6d101df288e214ab3fcfada722eaa42ddad5505acbbeac"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat_discounts", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target\\run\\gulliver\\models\\TradeStat\\trade_stat_discounts.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat_discounts"}, "created_at": 1692256682.7421308, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_discounts", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat_discounts\") }}\r\n\r\nSELECT\r\n    toDate(s.ShiftDate) AS DD,\r\n    s.DivisionGUID AS DivisionGUID,\r\n    SUM(toFloat32(coalesce(d.Value,0))) as AmountDisc\r\nFROM rrCashChequeRegister d FINAL\r\nLEFT JOIN rrCashShift s ON s.GUID = d.ShiftGUID\r\nWHERE d.Variable='DiscountAmount' AND\r\n    (s.ShiftDate BETWEEN '{{ var(\"start_date\") }}' AND '{{ var(\"end_date\") }}'\r\n        OR s.ShiftDate BETWEEN '{{ var(\"prev_year_start_date\") }}' AND '{{ var(\"prev_year_end_date\") }}')\r\nGROUP BY s.ShiftDate, s.DivisionGUID", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\models\\TradeStat\\trade_stat_discounts.sql", "compiled": true, "compiled_code": "/*\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n*/\n\n\n\nSELECT\n    toDate(s.ShiftDate) AS DD,\n    s.DivisionGUID AS DivisionGUID,\n    SUM(toFloat32(coalesce(d.Value,0))) as AmountDisc\nFROM rrCashChequeRegister d FINAL\nLEFT JOIN rrCashShift s ON s.GUID = d.ShiftGUID\nWHERE d.Variable='DiscountAmount' AND\n    (s.ShiftDate BETWEEN '2022-12-31' AND '2022-12-31'\n        OR s.ShiftDate BETWEEN '2021-09-20' AND '2021-09-27')\nGROUP BY s.ShiftDate, s.DivisionGUID", "extra_ctes_injected": true, "extra_ctes": []}, "model.gulliver.trade_stat_doc_ret": {"database": null, "schema": "db1", "name": "trade_stat_doc_ret", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat_doc_ret.sql", "original_file_path": "models\\TradeStat\\trade_stat_doc_ret.sql", "unique_id": "model.gulliver.trade_stat_doc_ret", "fqn": ["gulliver", "TradeStat", "trade_stat_doc_ret"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_doc_ret", "checksum": {"name": "sha256", "checksum": "6f0d95e7faa5770099ed5557cf88a204c4b2fb50a9c60013bd7495bd90572b9f"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat_doc_ret", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat_doc_ret"}, "created_at": 1692256682.751241, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_doc_ret", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat_doc_ret\") }}\r\n\r\nSELECT\r\n\t toDate(i.DateAccept) DD\r\n\t,toUUID(i.DivisionGUIDin) DivisionGUID\r\n\t,SUM(coalesce(ig.Qty,0)) Qty\r\n\t,SUM(coalesce(ig.Qty*ig.Price,0)) Summ\r\nFROM {{ ref('goods_movement_incomegoods') }} ig FINAL\r\nJOIN {{ ref('goods_movement_income') }} i ON ig.IncomeGUID = i.GUID AND ig.DivisionGUID = i.DivisionGUIDin\r\nWHERE i.DateAccept IS NOT NULL AND i.Type1IDD=6 AND\r\n    (i.DateAccept BETWEEN '{{ var(\"start_date\") }}' AND '{{ var(\"end_date\") }}'\r\n        OR i.DateAccept BETWEEN '{{ var(\"prev_year_start_date\") }}' AND '{{ var(\"prev_year_end_date\") }}')\r\nGROUP BY\r\n\t i.DateAccept\r\n\t,i.DivisionGUIDin", "language": "sql", "refs": [["goods_movement_incomegoods"], ["goods_movement_income"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_incomegoods", "model.gulliver.goods_movement_income"]}, "compiled_path": null}, "model.gulliver.trade_stat_history": {"database": null, "schema": "db1", "name": "trade_stat_history", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat_history.sql", "original_file_path": "models\\TradeStat\\trade_stat_history.sql", "unique_id": "model.gulliver.trade_stat_history", "fqn": ["gulliver", "TradeStat", "trade_stat_history"], "alias": "trade_stat_history", "checksum": {"name": "sha256", "checksum": "8027e21de412c318f9dd018b39cb87bd1015aabb8d72213e82990644c7744c92"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Calendar", "GUID_RR"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "MergeTree()", "order_by": "(Calendar, GUID_RR)", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "order_by": "(Calendar, GUID_RR)", "engine": "MergeTree()", "unique_key": ["Calendar", "GUID_RR"]}, "created_at": 1692256682.7638612, "relation_name": "db1.trade_stat_history", "raw_code": "/*\r\n    \u0412\u0438\u0442\u0440\u0438\u043d\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\r\n*/\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n    order_by='(Calendar, GUID_RR)',\r\n    engine='MergeTree()',\r\n    unique_key=['Calendar', 'GUID_RR']\r\n) }}\r\n\r\nSELECT\r\n\tp.Calendar AS Calendar,\r\n\tp.WeekNumber AS WeekNumber,\r\n\tp.DayNumber AS DayNumber,\r\n\tp.YearNumber AS YearNumber,\r\n\tp.GUID_RR AS GUID_RR,\r\n\tp.NameShort_RR AS NameShort_RR,\r\n\tp.NameLong_RR AS NameLong_RR,\r\n\tp.NameOfficial_RR AS NameOfficial_RR,\r\n\tp.Organization AS Organization,\r\n\tp.Region AS Region,\r\n\tp.Date_open AS Date_open,\r\n\tp.Date_close AS Date_close,\r\n\tp.Format AS Format,\r\n\tp.Federal_region AS Federal_region,\r\n\tp.Attribute AS Attribute,\r\n\tp.Division AS Division,\r\n\tp.Group AS Group,\r\n\tp.Cash_desks AS Cash_desks,\r\n\tp.Trading_area AS Trading_area,\r\n\tp.Comp_1y AS Comp_1y,\r\n\tp.Cooking AS Cooking,\r\n\tp.Retail_turnover AS Retail_turnover,\r\n\tp.Buyers AS Buyers,\r\n\tp.Cost_price AS Cost_price,\r\n\tp.Break_even_point AS Break_even_point,\r\n\tp.Target_revenue AS Target_revenue,\r\n\tp.Retail_turnover_plan AS Retail_turnover_plan,\r\n\tp.Buyers_plan AS Buyers_plan,\r\n\tp.Income AS Income,\r\n\tSUM(p.Retail_turnover)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_retail_turnover,\r\n\tSUM(p.Buyers)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_Buyers,\r\n\tSUM(p.Cost_price)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_Cost_price,\r\n\tSUM(p.Retail_turnover_plan)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_retail_turnover_plan,\r\n\tSUM(p.Buyers_plan)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_Buyers_plan,\r\n\tSUM(p.Income)\r\n      OVER (\r\n        PARTITION BY toYYYYMM(p.Calendar), p.GUID_RR\r\n        ORDER BY p.Calendar\r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n      ) AS total_Gross_revenue_plan,\r\n    w.Retail_turnover AS previous_week_retail_turnover,\r\n\tw.Buyers AS previous_week_Buyers,\r\n\tw.Cost_price AS previous_week_Cost_price,\r\n\ty.Retail_turnover AS previous_year_retail_turnover,\r\n\ty.Buyers AS previous_year_Buyers,\r\n\ty.Cost_price AS previous_year_Cost_price\r\nFROM {{ ref(\"trade_stat\") }} p\r\nLEFT JOIN {{ ref(\"trade_stat\") }} w ON p.GUID_RR = w.GUID_RR AND p.DayNumber = w.DayNumber AND p.YearNumber = w.YearNumber AND w.WeekNumber = p.WeekNumber - 1\r\nLEFT JOIN {{ ref(\"trade_stat\") }} y ON p.GUID_RR = y.GUID_RR AND p.DayNumber = y.DayNumber AND y.YearNumber = p.YearNumber - 1 AND y.WeekNumber = p.WeekNumber", "language": "sql", "refs": [["trade_stat"], ["trade_stat"], ["trade_stat"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.trade_stat", "model.gulliver.trade_stat", "model.gulliver.trade_stat"]}, "compiled_path": null}, "model.gulliver.trade_stat_outgo_goods": {"database": null, "schema": "db1", "name": "trade_stat_outgo_goods", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat\\trade_stat_outgo_goods.sql", "original_file_path": "models\\TradeStat\\trade_stat_outgo_goods.sql", "unique_id": "model.gulliver.trade_stat_outgo_goods", "fqn": ["gulliver", "TradeStat", "trade_stat_outgo_goods"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_outgo_goods", "checksum": {"name": "sha256", "checksum": "a5852fadd6cfb8b5efa8f05cf233a5acd011ab0c7d4b173d8de53e87915ca61d"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat_outgo_goods", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat_outgo_goods"}, "created_at": 1692256682.7689013, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat_outgo_goods", "raw_code": "/*\r\n    \u041d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat_outgo_goods\") }}\r\n\r\nSELECT\r\n    DD,\r\n    DivisionGUID,\r\n    SUM(sumQty) Qty,\r\n    SUM(PricePrimeCodeDoc*sumQty) SumPrimeCodeDoc,\r\n    SUM(PriceCodeDoc*sumQty) SumCodeDoc\r\nFROM\r\n(\r\n    SELECT\r\n        GUID AS DocGUID\r\n        ,toDate(DateAccept) AS DD\r\n        ,DivisionGUIDout AS DivisionGUID\r\n        ,DivisionPlacementGUIDout AS DivisionPlacementGUID\r\n        ,Code AS CodeDoc\r\n        ,SUM(Qty) as sumQty\r\n        ,SUM(Qty*PricePrime) / SUM(Qty) AS PricePrimeCodeDoc\r\n        ,Vat AS VatPrimeCodeDoc\r\n        ,SUM(Qty*Price) / SUM(Qty) AS PriceCodeDoc\r\n        ,Vat1 AS VatCodeDoc\r\n\r\n    FROM (\r\n        SELECT\r\n             o.GUID AS GUID\r\n             ,o.DateAccept AS DateAccept\r\n             ,o.DivisionGUIDout AS DivisionGUIDout\r\n             ,o.DivisionPlacementGUIDout AS DivisionPlacementGUIDout\r\n             ,og.Code AS Code\r\n             ,coalesce(rg.Qty,0) AS Qty\r\n             ,coalesce(ig.PricePrime,ig.Price,0) AS PricePrime\r\n             ,coalesce(ig.Vat,0) AS Vat\r\n             ,coalesce(og.Vat,0) AS Vat1\r\n             ,coalesce(og.Price,0) AS Price\r\n        FROM {{ ref('goods_movement_outgo') }}rrGoodsMovementOutgo o\r\n        JOIN {{ ref('goods_movement_outgogoods') }}rrGoodsMovementOutgoGoods og ON og.OutgoGUID = o.GUID AND og.DivisionGUID = o.DivisionGUIDout\r\n        JOIN {{ ref('goods_movement_relationgoods') }}rrGoodsMovementRelationGoods rg ON rg.DivisionGUID = og.DivisionGUID AND rg.OutgoGoodsGUID = og.GUID\r\n        JOIN {{ ref('goods_movement_incomegoods') }}rrGoodsMovementIncomeGoods ig ON ig.GUID = rg.IncomeGoodsGUID AND ig.DivisionGUID = rg.DivisionGUID\r\n        WHERE o.Type1IDD=52 AND o.DateAccept IS NOT NULL AND\r\n            (o.DateAccept BETWEEN '{{ var(\"start_date\") }}' AND '{{ var(\"end_date\") }}'\r\n             OR o.DateAccept BETWEEN '{{ var(\"prev_year_start_date\") }}' AND '{{ var(\"prev_year_end_date\") }}')\r\n    )\r\n\r\n    GROUP BY\r\n           GUID\r\n           ,DateAccept\r\n           ,DivisionGUIDout\r\n           ,DivisionPlacementGUIDout\r\n           ,Code\r\n           ,Vat\r\n           ,Vat1\r\n    HAVING SUM(Qty)>0\r\n)\r\nGROUP BY DD, DivisionGUID", "language": "sql", "refs": [["goods_movement_outgo"], ["goods_movement_outgogoods"], ["goods_movement_relationgoods"], ["goods_movement_incomegoods"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_outgo", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_relationgoods", "model.gulliver.goods_movement_incomegoods"]}, "compiled_path": null}, "model.gulliver.trade_stat2": {"database": null, "schema": "db1", "name": "trade_stat2", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2.sql", "original_file_path": "models\\TradeStat2\\trade_stat2.sql", "unique_id": "model.gulliver.trade_stat2", "fqn": ["gulliver", "TradeStat2", "trade_stat2"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2", "checksum": {"name": "sha256", "checksum": "c907bb6ee369df0914f31137ceef2cbc0622115ec2ccac4b912e049de5c61f0c"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2"}, "created_at": 1692256682.778957, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 1. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0440\u043a\u0430\u0441 #TradeStat2: \u0434\u043b\u044f \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u0442\u0430-\u043f\u043e\u0434\u0440-\u0442\u043e\u0432\u0430\u0440,\r\n    \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0441\u0432\u0435\u0442\u0438\u043b\u0438\u0441\u044c \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438/\u0438\u043b\u0438 \u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\u0445\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2\") }}\r\n\r\n\r\nSELECT DISTINCT DD            AS DD                 -- \u0434\u0430\u0442\u0430\r\n              , DivisionGUID  AS DivisionGUID       -- \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\r\n              , Code          AS Code               -- \u0442\u043e\u0432\u0430\u0440\r\n              , toFloat32(0)  AS SaleQty            -- \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u043e\u0433\u043e\r\n              , toFloat32(0)  AS SaleAmountWoDisc   -- \u0441\u0443\u043c\u043c\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0411\u0415\u0417 \u0443\u0447\u0435\u0442\u0430 \u0441\u043a\u0438\u0434\u043e\u043a\r\n              , toFloat32(0)  AS SaleAmountDisc     -- \u0441\u0443\u043c\u043c\u0430 \u0441\u043a\u0438\u0434\u043e\u043a\r\n              , 0             AS SaleCntCheq\t\t-- \u043a\u043e\u043b-\u0432\u043e \u0447\u0435\u043a\u043e\u0432\r\n              , toFloat32(0)  AS SaleSummPrime      -- \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430\r\n              , toFloat32(0)  AS RetQty \t\t    -- \u043a\u043e\u043b-\u0432\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430\r\n              , toFloat32(0)  AS RetSumm \t\t    -- \u0441\u0443\u043c\u043c\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430\r\n              , toFloat32(0)  AS RetSummPrime \t    -- \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u043e\u0437\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430\r\n  FROM (\r\n    SELECT DD\r\n         , DivisionGUID\r\n         , Code\r\n      FROM (\r\n        SELECT DISTINCT DD                            AS DD\r\n\t\t     , DivisionGUID                           AS DivisionGUID\r\n\t\t     , COALESCE(NULLIF(CodeCheq,0), CodeDoc)  AS Code\r\n\t      FROM {{ ref('sale_with_outgo_goods_change_total') }}\r\n      )\r\n\t UNION ALL\r\n\tSELECT DD\r\n\t     , DivisionGUID\r\n\t     , Code\r\n\t  FROM (\r\n        SELECT DISTINCT\r\n               DD            AS DD\r\n             , DivisionGUID  AS DivisionGUID\r\n             , Code          AS Code\r\n        FROM {{ ref('trade_stat2_doc_ret_prepare') }}\r\n\t  )\r\n  ) jn", "language": "sql", "refs": [["sale_with_outgo_goods_change_total"], ["trade_stat2_doc_ret_prepare"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.sale_with_outgo_goods_change_total", "model.gulliver.trade_stat2_doc_ret_prepare"]}, "compiled_path": null}, "model.gulliver.trade_stat2_cheq": {"database": null, "schema": "db1", "name": "trade_stat2_cheq", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_cheq.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_cheq.sql", "unique_id": "model.gulliver.trade_stat2_cheq", "fqn": ["gulliver", "TradeStat2", "trade_stat2_cheq"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_with_cheq", "checksum": {"name": "sha256", "checksum": "a4ba9dbb3ddd0bc1604ade1d37f47161e947e4e49104755765d0e8afa0653651"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_with_cheq", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_with_cheq"}, "created_at": 1692256682.7850065, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_with_cheq", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 3. \u041d\u0430\u043d\u0438\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u0443\u043c\u043c\u0443 \u0441\u043a\u0438\u0434\u043e\u043a \u0438 \u043a\u043e\u043b-\u0432\u043e \u0447\u0435\u043a\u043e\u0432 (\u0438\u0437 \u0447\u0435\u043a\u043e\u0432)\r\n*/\r\n\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_with_cheq\") }}\r\n\r\nSELECT {{ dbt_utils.star(from=ref('trade_stat2'), except=['SaleCntCheq', 'SaleAmountDisc']) }}\r\n     , COALESCE(cheq.cntCheq, t.SaleCntCheq)        AS SaleCntCheq\r\n\t , COALESCE(cheq.AmountDisc, t.SaleAmountDisc)  AS SaleAmountDisc\r\nFROM {{ ref('trade_stat2_sale') }} t\r\nLEFT JOIN (\r\n    SELECT DD                                       AS DD\r\n\t\t , DivisionGUID                             AS DivisionGUID\r\n\t\t , CodeCheq                                 AS Code\r\n\t\t , SUM(AmountDisc)                          AS AmountDisc\r\n\t\t , SUM(cntCheq)                             AS cntCheq\r\n\tFROM {{ ref('cheq_and_disc_cheq_total') }}\r\n\tGROUP BY DD\r\n\t    , DivisionGUID\r\n\t    , CodeCheq\r\n) cheq\r\n  ON cheq.DD           = t.DD\r\n AND cheq.DivisionGUID = t.DivisionGUID\r\n AND cheq.Code         = t.Code", "language": "sql", "refs": [["trade_stat2"], ["trade_stat2_sale"], ["cheq_and_disc_cheq_total"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_sale", "model.gulliver.cheq_and_disc_cheq_total"]}, "compiled_path": null}, "model.gulliver.trade_stat2_doc_ret_prepare": {"database": null, "schema": "db1", "name": "trade_stat2_doc_ret_prepare", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_doc_ret_prepare.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_doc_ret_prepare.sql", "unique_id": "model.gulliver.trade_stat2_doc_ret_prepare", "fqn": ["gulliver", "TradeStat2", "trade_stat2_doc_ret_prepare"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_doc_ret_prepare", "checksum": {"name": "sha256", "checksum": "ef590d1a1187d7824dfc56ae6983088bbc010d98a553e0e4ad54678839bcb6f8"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_doc_ret_prepare", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_doc_ret_prepare"}, "created_at": 1692256682.8172681, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_doc_ret_prepare", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0429\u0430\u0433 1. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c #TradeStat2_DocRetPrepare\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_doc_ret_prepare\") }}\r\n\r\n\r\nSELECT i.DateAccept                      AS DD\r\n\t , i.DivisionGUIDin                  AS DivisionGUID\r\n\t , ig.Code                           AS Code\r\n\t , SUM(COALESCE(ig.Qty,0))           AS Qty\r\n\t , SUM(COALESCE(ig.Qty*ig.Price,0))  AS Summ\r\n  FROM {{ ref('goods_movement_income') }}rrGoodsMovementIncome i\r\n  JOIN {{ ref('goods_movement_incomegoods') }}rrGoodsMovementIncomeGoods ig\r\n    ON ig.IncomeGUID = i.GUID\r\n   AND ig.DivisionGUID = i.DivisionGUIDin\r\n WHERE i.DateAccept IS NOT NULL\r\n   AND i.DateAccept BETWEEN {{ var('start_date') }} AND {{ var('end_date') }}\r\n   AND i.Type1IDD=6\r\n GROUP BY i.DateAccept\r\n\t , i.DivisionGUIDin\r\n\t , ig.Code", "language": "sql", "refs": [["goods_movement_income"], ["goods_movement_incomegoods"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.goods_movement_income", "model.gulliver.goods_movement_incomegoods"]}, "compiled_path": null}, "model.gulliver.trade_stat2_final": {"database": null, "schema": "db1", "name": "trade_stat2_final", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_final.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_final.sql", "unique_id": "model.gulliver.trade_stat2_final", "fqn": ["gulliver", "TradeStat2", "trade_stat2_final"], "alias": "trade_stat2_final", "checksum": {"name": "sha256", "checksum": "3f018ebf348f367a8860f70a48990138f40db3e276aac8094f2012b443b4b550"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["Calendar", "GUID_RR", "ID_product"], "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "engine": "MergeTree()", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "engine": "MergeTree()", "unique_key": ["Calendar", "GUID_RR", "ID_product"]}, "created_at": 1692256682.8294742, "relation_name": "db1.trade_stat2_final", "raw_code": "/*\r\n    \u0412\u0438\u0442\u0440\u0438\u043d\u0430 \u043e\u0442\u0447\u0435\u0442\u0430 \u0441\u043f\u0440\u0430\u0432\u043a\u0430\r\n*/\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n    engine='MergeTree()',\r\n    unique_key=['Calendar', 'GUID_RR', 'ID_product']\r\n) }}\r\n\r\nSELECT\r\n\ttoDate(t.DD) AS Calendar,\r\n\ttoUUID(t.DivisionGUID) AS GUID_RR,\r\n\td.NameShort AS NameShort_RR,\r\n\td.NameLong AS NameLong_RR,\r\n\td.NameOfficial AS NameOfficial_RR,\r\n\ttoString(CASE\r\n\t\tWHEN d.NameLong like '\u041c\u041f%' or d.NameLong like '\u0424\u041d\u0410%' THEN '\u0422\u0421 \u041f\u043e\u0431\u0435\u0434\u0430'\r\n\t\tWHEN d.NameLong like '\u041c\u0413%' or d.NameLong like '\u041b\u0413%' THEN '\u0422\u0421 \u0413\u0443\u043b\u043b\u0438\u0432\u0435\u0440'\r\n\t\tELSE NULL\r\n    END) AS Organization,\r\n\tedd.Region AS Region,\r\n\tdp.OpeningDate AS Date_open,\r\n\tCAST(NULL,'Nullable(Date)') AS Date_close,\r\n\tdp.FormatIDD AS Format,\r\n\tdg1.NameLong AS Division,\r\n\tdg2.NameLong AS Group,\r\n\tdp.CashCount AS Cash_desks,\r\n\tdp.FloorSpace AS Trading_area,\r\n\tCASE\r\n\t\tWHEN dp.Comparability like '%\u0433\u043e\u04341%' THEN 1\r\n\t\tELSE 0\r\n\tEND AS Comp_1y,\r\n\tCASE\r\n\t\tWHEN dp.Comparability like '%10%' THEN 1\r\n\t\tELSE 0\r\n\tEND AS Cooking,\r\n\ttoInt32(t.Code) AS ID_product,\r\n\ttoUUID(a.BonusGroupGUID) AS Bonus_group,\r\n\tCOALESCE (t.SaleAmountWoDisc,0)-COALESCE (t.SaleAmountDisc,0)-COALESCE (t.RetSumm,0) AS Retail_turnover, /*\u0424\u043e\u0440\u043c\u0443\u043b\u0434\u0430 \u0434\u043b\u044f \u0420\u0422\u041e \u043e\u0442 \u042f\u0440\u043c\u0443\u043b\u0438\u043d\u0430*/\r\n\tt.SaleCntCheq AS Buyers,\r\n\tCOALESCE (t.SaleSummPrime,0)-COALESCE (t.RetSummPrime,0) AS Cost_price,\r\n\t0 AS Break_even_point,\r\n\t0 AS Buyers_plan,\r\n\t0 AS Retail_turnover_plan,\r\n\t0 AS Average_check_plan,\r\n\t0 AS Margin_plan\r\nFROM trade_stat2_total t\r\nLEFT JOIN ExcelDivisionData edd ON edd.GUID = t.DivisionGUID\r\nLEFT JOIN {{ ref('master_data_division') }} d ON d.GUID=t.DivisionGUID\r\nLEFT JOIN {{ ref('master_data_divisionaddparam') }} dp ON d.GUID=dp.DivisionGUID\r\nLEFT JOIN {{ ref('master_data_division_group1') }} dg1 ON dp.Group1GUID=dg1.GUID\r\nLEFT JOIN {{ ref('master_data_division_group2') }} dg2 ON dp.Group2GUID=dg2.GUID\r\nLEFT JOIN {{ ref('master_data_assortment') }} a ON a.Code=t.Code\r\n AND a.date_active_begin <= '{{ var(\"end_date\") }}'\r\n AND (a.date_active_end IS NULL OR a.date_active_end >= '{{ var(\"start_date\") }}' )", "language": "sql", "refs": [["master_data_division"], ["master_data_divisionaddparam"], ["master_data_division_group1"], ["master_data_division_group2"], ["master_data_assortment"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.gulliver.master_data_division", "model.gulliver.master_data_divisionaddparam", "model.gulliver.master_data_division_group1", "model.gulliver.master_data_division_group2", "model.gulliver.master_data_assortment"]}, "compiled_path": null}, "model.gulliver.trade_stat2_ret": {"database": null, "schema": "db1", "name": "trade_stat2_ret", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_ret.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_ret.sql", "unique_id": "model.gulliver.trade_stat2_ret", "fqn": ["gulliver", "TradeStat2", "trade_stat2_ret"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_ret", "checksum": {"name": "sha256", "checksum": "9ad2e020bf2b82616bf73d561fe93d2b2353a1191b747f58d631584363495603"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_ret", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_ret"}, "created_at": 1692256682.84001, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_ret", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 4. \u041d\u0430\u043d\u0438\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u044b (\u0438\u0437 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043d\u044b\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_ret\") }}\r\n\r\nSELECT {{ dbt_utils.star(from=ref('trade_stat2'), except=['RetQty', 'RetSumm']) }}\r\n     , COALESCE(ret.Qty, t.RetQty)                 AS RetQty\r\n\t , COALESCE(ret.Summ, t.RetSumm)               AS RetSumm\r\nFROM {{ ref('trade_stat2_cheq') }} t\r\nLEFT JOIN (\r\n    SELECT DD                                      AS DD\r\n\t\t , DivisionGUID                            AS DivisionGUID\r\n\t\t , Code                                    AS Code\r\n\t\t , SUM(Qty)                                AS Qty\r\n\t\t , SUM(Summ)                               AS Summ\r\n\tFROM {{ ref('trade_stat2_doc_ret_prepare') }}\r\n\tGROUP BY DD\r\n\t    , DivisionGUID\r\n\t    , Code\r\n) ret\r\n  ON ret.DD           = t.DD\r\n AND ret.DivisionGUID = t.DivisionGUID\r\n AND ret.Code         = t.Code", "language": "sql", "refs": [["trade_stat2"], ["trade_stat2_cheq"], ["trade_stat2_doc_ret_prepare"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_cheq", "model.gulliver.trade_stat2_doc_ret_prepare"]}, "compiled_path": null}, "model.gulliver.trade_stat2_ret_sum_prime": {"database": null, "schema": "db1", "name": "trade_stat2_ret_sum_prime", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_ret_sum_prime.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_ret_sum_prime.sql", "unique_id": "model.gulliver.trade_stat2_ret_sum_prime", "fqn": ["gulliver", "TradeStat2", "trade_stat2_ret_sum_prime"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_ret_sum_prime", "checksum": {"name": "sha256", "checksum": "a210abccece4bdd38686d91c1f880cfa4fcd8b73013b16b890834bcf123ba510"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_ret_sum_prime", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_ret_sum_prime"}, "created_at": 1692256682.8557377, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_ret_sum_prime", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 5. \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u0432 \u0438\u0437 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_ret_sum_prime\") }}\r\n\r\nSELECT {{ dbt_utils.star(from=ref('trade_stat2'), except=['RetSummPrime']) }}\r\n     , CASE\r\n         WHEN SaleSummPrime IS NOT NULL AND SaleQty IS NOT NULL AND RetQty IS NOT NULL\r\n         THEN (SaleSummPrime / SaleQty) * RetQty\r\n         ELSE RetSummPrime\r\n        END AS RetSummPrime\r\nFROM {{ ref('trade_stat2_ret') }}", "language": "sql", "refs": [["trade_stat2"], ["trade_stat2_ret"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_ret"]}, "compiled_path": null}, "model.gulliver.trade_stat2_sale": {"database": null, "schema": "db1", "name": "trade_stat2_sale", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_sale.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_sale.sql", "unique_id": "model.gulliver.trade_stat2_sale", "fqn": ["gulliver", "TradeStat2", "trade_stat2_sale"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_sale", "checksum": {"name": "sha256", "checksum": "2748278e34aab6dea5a0bd3c7d30532d67fea6493490dac1d6e1e73b83bcde34"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_sale", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_sale"}, "created_at": 1692256682.863766, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_sale", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 2. \u041d\u0430\u043d\u0438\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u0443\u043c\u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043e\u043a \u0438 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (\u0438\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438)\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_sale\") }}\r\n\r\nSELECT {{ dbt_utils.star(from=ref('trade_stat2'), except=['SaleQty', 'SaleAmountWoDisc', 'SaleSummPrime']) }}\r\n     , COALESCE(sale.Qty, t.SaleQty)                    AS SaleQty\r\n\t , COALESCE(sale.AmountWoDisc, t.SaleAmountWoDisc)  AS SaleAmountWoDisc\r\n\t , COALESCE(sale.Prime, t.SaleSummPrime)            AS SaleSummPrime\r\nFROM {{ ref('trade_stat2') }} t\r\nLEFT JOIN (\r\n    SELECT DD                                      AS DD\r\n\t\t , DivisionGUID                            AS DivisionGUID\r\n\t\t , COALESCE(NULLIF(CodeCheq, 0), CodeDoc)  AS Code\r\n\t\t , SUM(Qty)                                AS Qty\r\n\t\t , SUM(SumCodeDoc)                         AS AmountWoDisc\r\n\t\t , SUM(SumPrimeCodeDoc)                    AS Prime\r\n\tFROM {{ ref('sale_with_outgo_goods_change_total') }}\r\n\tGROUP BY DD\r\n\t    , DivisionGUID\r\n\t    , COALESCE(NULLIF(CodeCheq,0), CodeDoc)\r\n) sale\r\n  ON sale.DD           = t.DD\r\n AND sale.DivisionGUID = t.DivisionGUID\r\n AND sale.Code         = t.Code", "language": "sql", "refs": [["trade_stat2"], ["trade_stat2"], ["sale_with_outgo_goods_change_total"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2", "model.gulliver.sale_with_outgo_goods_change_total"]}, "compiled_path": null}, "model.gulliver.trade_stat2_total": {"database": null, "schema": "db1", "name": "trade_stat2_total", "resource_type": "model", "package_name": "gulliver", "path": "TradeStat2\\trade_stat2_total.sql", "original_file_path": "models\\TradeStat2\\trade_stat2_total.sql", "unique_id": "model.gulliver.trade_stat2_total", "fqn": ["gulliver", "TradeStat2", "trade_stat2_total"], "alias": "de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_total", "checksum": {"name": "sha256", "checksum": "7463b1754f6141ee53684e5ccfdefa70cb0e90761814b30db7d821883927700d"}, "config": {"enabled": true, "alias": "dbt_temp_trade_stat2_total", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "alias": "dbt_temp_trade_stat2_total"}, "created_at": 1692256682.8919945, "relation_name": "db1.de882869_3ab1_4a56_9cf0_cfb3e93e2d9d_dbt_temp_trade_stat2_total", "raw_code": "/*\r\n    \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0437\u043c\u0430\u0437\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043a\u0438\u0434\u043e\u043a \u043f\u043e \u0447\u0435\u043a\u0430\u043c\r\n    \u0428\u0430\u0433 6. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0442\u043e\u0432\u0430\u0440\u0430 \u0431\u044b\u043b \u0432 \u0442\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d \u043d\u0435 \u043f\u0440\u043e\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u0432\u043e\u043e\u0431\u0449\u0435,\r\n     \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0433\u043e \u0441\u0447\u0438\u0442\u0430\u044e \u043f\u043e\u043a\u0430 \u043f\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u043c\u0443 \"\u0441\u0443\u043c\u043c\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430-15%\"\r\n*/\r\n\r\n{{ config(materialized='table', alias=\"dbt_temp_trade_stat2_total\") }}\r\n\r\nSELECT {{ dbt_utils.star(from=ref('trade_stat2'), except=['RetSummPrime']) }}\r\n     , CASE\r\n         WHEN RetSumm IS NOT NULL AND RetSummPrime IS NULL\r\n         THEN RetSumm * 0.85\r\n         ELSE RetSummPrime\r\n        END AS RetSummPrime\r\nFROM {{ ref('trade_stat2_ret_sum_prime') }}", "language": "sql", "refs": [["trade_stat2"], ["trade_stat2_ret_sum_prime"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_ret_sum_prime"]}, "compiled_path": null}, "operation.gulliver.gulliver-on-run-end-0": {"database": null, "schema": "db1", "name": "gulliver-on-run-end-0", "resource_type": "operation", "package_name": "gulliver", "path": "hooks\\gulliver-on-run-end-0.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.gulliver.gulliver-on-run-end-0", "fqn": ["gulliver", "hooks", "gulliver-on-run-end-0"], "alias": "gulliver-on-run-end-0", "checksum": {"name": "sha256", "checksum": "83e85a9ad6e9db0f49d8906296902366e2b9ccfeca080e91f832db9d345c45f0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1692256682.9255812, "relation_name": null, "raw_code": "{{ drop_tables() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.gulliver.drop_tables"], "nodes": []}, "compiled_path": "target\\compiled\\gulliver\\.\\dbt_project.yml\\hooks\\gulliver-on-run-end-0.sql", "compiled": true, "compiled_code": "\n\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}}, "sources": {}, "macros": {"macro.gulliver.get_invoke_id": {"name": "get_invoke_id", "resource_type": "macro", "package_name": "gulliver", "path": "macros\\macros.sql", "original_file_path": "macros\\macros.sql", "unique_id": "macro.gulliver.get_invoke_id", "macro_sql": "{% macro get_invoke_id() -%}\r\n    {{ var('custom_invocation_id') | replace('-', '_') }}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9646778, "supported_languages": null}, "macro.gulliver.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "gulliver", "path": "macros\\macros.sql", "original_file_path": "macros\\macros.sql", "unique_id": "macro.gulliver.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n    {%- if custom_alias_name is none -%}\r\n        {{ node.name }}\r\n    {%- else -%}\r\n        {%- if 'dbt_temp' in custom_alias_name -%}\r\n            {{ get_invoke_id() ~ '_' ~ custom_alias_name }}\r\n        {%- else -%}\r\n            {{ custom_alias_name | trim }}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.gulliver.get_invoke_id"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9646778, "supported_languages": null}, "macro.gulliver.drop_tables": {"name": "drop_tables", "resource_type": "macro", "package_name": "gulliver", "path": "macros\\macros.sql", "original_file_path": "macros\\macros.sql", "unique_id": "macro.gulliver.drop_tables", "macro_sql": "{% macro drop_tables() -%}\r\n    {% set search_uid = get_invoke_id() %}\r\n\r\n    {# only if external uuid is not empty and deletion parameter is set to true #}\r\n    {% if search_uid and var('delete_tables') %}\r\n        {% set query %}\r\n            SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_name LIKE '{{ search_uid }}_%'\r\n        {% endset %}\r\n\r\n        {% set results = run_query(query) %}\r\n\r\n        {% if execute and results and results.columns %}\r\n            {% set tables = results.columns[0].values() %}\r\n        {% else %}\r\n            {% set results_list = [] %}\r\n        {% endif %}\r\n\r\n        {# delete all tables of current session where names contain 'dbt_temp' #}\r\n        {% for table_name in tables %}\r\n            {{ log('deleting ' ~ table_name, True) }}\r\n            {% if 'dbt_temp' in table_name %}\r\n                {% set drop_query %}\r\n                    DROP TABLE IF EXISTS {{table_name}}\r\n                {% endset %}\r\n                {% do run_query(drop_query) %}\r\n            {% endif %}\r\n        {% endfor %}\r\n\r\n    {% endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.gulliver.get_invoke_id", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9646778, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_view_as": {"name": "clickhouse__create_view_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_view_as", "macro_sql": "{% macro clickhouse__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation.include(database=False) }} {{ on_cluster_clause()}}\n  as (\n    {{ sql }}\n  )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9872174, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_schemas": {"name": "clickhouse__list_schemas", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_schemas", "macro_sql": "{% macro clickhouse__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select name from system.databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9872174, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_schema": {"name": "clickhouse__create_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_schema", "macro_sql": "{% macro clickhouse__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create database if not exists {{ relation.without_identifier().include(database=False) }}\n        {{ on_cluster_clause()}}\n        {{ adapter.clickhouse_db_engine_clause() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9872174, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_schema": {"name": "clickhouse__drop_schema", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_schema", "macro_sql": "{% macro clickhouse__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop database if exists {{ relation.without_identifier().include(database=False) }} {{ on_cluster_clause()}}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9872174, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__list_relations_without_caching": {"name": "clickhouse__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__list_relations_without_caching", "macro_sql": "{% macro clickhouse__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      t.name as name,\n      t.database as schema,\n      if(engine not in ('MaterializedView', 'View'), 'table', 'view') as type,\n      db.engine as db_engine\n    from system.tables as t JOIN system.databases as db on t.database = db.name\n    where schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9952354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_relation": {"name": "clickhouse__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_relation", "macro_sql": "{% macro clickhouse__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns', fetch_result=True) %}\n    select name, type from system.columns where table = '{{ relation.identifier }}'\n    {% if relation.schema %}\n      and database = '{{ relation.schema }}'\n    {% endif %}\n    order by position\n  {% endcall %}\n  {{ return(sql_convert_columns_in_relation(load_result('get_columns').table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9952354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__drop_relation": {"name": "clickhouse__drop_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__drop_relation", "macro_sql": "{% macro clickhouse__drop_relation(relation, obj_type='table') -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ obj_type }} if exists {{ relation }} {{ on_cluster_clause()}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9952354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__rename_relation": {"name": "clickhouse__rename_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__rename_relation", "macro_sql": "{% macro clickhouse__rename_relation(from_relation, to_relation, obj_type='table') -%}\n  {% call statement('drop_relation') %}\n    drop {{ obj_type }} if exists {{ to_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename {{ obj_type }} {{ from_relation }} to {{ to_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9952354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__truncate_relation": {"name": "clickhouse__truncate_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__truncate_relation", "macro_sql": "{% macro clickhouse__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }} {{ on_cluster_clause()}}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256679.9952354, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__make_temp_relation": {"name": "clickhouse__make_temp_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__make_temp_relation", "macro_sql": "{% macro clickhouse__make_temp_relation(base_relation, suffix) %}\n  {% set tmp_identifier = base_relation.identifier ~ suffix %}\n  {% set tmp_relation = base_relation.incorporate(\n                              path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n  {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__generate_database_name": {"name": "clickhouse__generate_database_name", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__generate_database_name", "macro_sql": "{% macro clickhouse__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_columns_in_query": {"name": "clickhouse__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_columns_in_query", "macro_sql": "{% macro clickhouse__get_columns_in_query(select_sql) %}\n  {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    limit 0\n  {% endcall %}\n\n  {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_column_type": {"name": "clickhouse__alter_column_type", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_column_type", "macro_sql": "{% macro clickhouse__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} {{ on_cluster_clause()}} modify column {{ adapter.quote(column_name) }} {{ new_column_type }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.exchange_tables_atomic": {"name": "exchange_tables_atomic", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_clickhouse.exchange_tables_atomic", "macro_sql": "{% macro exchange_tables_atomic(old_relation, target_relation, obj_types='TABLES') %}\n\n  {%- if adapter.get_clickhouse_cluster_name() is not none and obj_types == 'TABLES' %}\n    {% do run_query(\"SYSTEM SYNC REPLICA \" + on_cluster_clause() + target_relation.schema + '.' + target_relation.identifier) %}\n  {%- endif %}\n  \n  {%- call statement('exchange_tables_atomic') -%}\n    EXCHANGE {{ obj_types }} {{ old_relation }} AND {{ target_relation }} {{ on_cluster_clause()}}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_catalog": {"name": "clickhouse__get_catalog", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_catalog", "macro_sql": "{% macro clickhouse__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n      null as table_database,\n      columns.database as table_schema,\n      columns.table as table_name,\n      if(tables.engine not in ('MaterializedView', 'View'), 'table', 'view') as table_type,\n      nullIf(tables.comment, '') as table_comment,\n      columns.name as column_name,\n      columns.position as column_index,\n      columns.type as column_type,\n      nullIf(columns.comment, '') as column_comment,\n      null as table_owner\n    from system.columns as columns\n    join system.tables as tables on tables.database = columns.database and tables.name = columns.table\n    where database != 'system' and\n    (\n    {%- for schema in schemas -%}\n      columns.database = '{{ schema }}'\n      {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by columns.database, columns.table, columns.position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0005987, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_relation": {"name": "one_alter_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_relation", "macro_sql": "{% macro one_alter_relation(relation, alter_comments) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} {{ alter_comments }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.one_alter_column_comment": {"name": "one_alter_column_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_clickhouse.one_alter_column_comment", "macro_sql": "{% macro one_alter_column_comment(relation, column_name, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} comment column {{ column_name }} '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__alter_relation_comment": {"name": "clickhouse__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__alter_relation_comment", "macro_sql": "{% macro clickhouse__alter_relation_comment(relation, comment) %}\n  alter table {{ relation }} {{ on_cluster_clause() }} modify comment '{{ comment }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__persist_docs": {"name": "clickhouse__persist_docs", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__persist_docs", "macro_sql": "{% macro clickhouse__persist_docs(relation, model, for_relation, for_columns) %}\n  {%- set alter_comments = [] %}\n\n  {%- if for_relation and config.persist_relation_docs() and model.description -%}\n    {% set escaped_comment = clickhouse_escape_comment(model.description) %}\n    {% do alter_comments.append(\"modify comment {comment}\".format(comment=escaped_comment)) %}\n  {%- endif -%}\n\n  {%- if for_columns and config.persist_column_docs() and model.columns -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% for column_name in model.columns if (column_name in existing_columns) %}\n      {%- set comment = model.columns[column_name]['description'] -%}\n      {%- if comment %}\n        {% set escaped_comment = clickhouse_escape_comment(comment) %}\n        {% do alter_comments.append(\"comment column {column_name} {comment}\".format(column_name=column_name, comment=escaped_comment)) %}\n      {%- endif %}\n    {%- endfor -%}\n  {%- endif -%}\n\n  {%- if alter_comments | length > 0 -%}\n    {% do run_query(one_alter_relation(relation, alter_comments|join(', '))) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse_escape_comment", "macro.dbt.run_query", "macro.dbt_clickhouse.one_alter_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_escape_comment": {"name": "clickhouse_escape_comment", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_escape_comment", "macro_sql": "{% macro clickhouse_escape_comment(comment) -%}\n  {% if adapter.is_before_version('21.9.2.17') %}\n    {% do exceptions.raise_compiler_error('Unsupported ClickHouse version for using heredoc syntax') %}\n  {% endif %}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_show_grant_sql": {"name": "clickhouse__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_show_grant_sql", "macro_sql": "{% macro clickhouse__get_show_grant_sql(relation) %}\n    SELECT access_type as privilege_type, COALESCE(user_name, role_name) as grantee FROM system.grants WHERE table = '{{ relation.name }}'\n    AND database = '{{ relation.schema }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__call_dcl_statements": {"name": "clickhouse__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__call_dcl_statements", "macro_sql": "{% macro clickhouse__call_dcl_statements(dcl_statement_list) %}\n    {% for dcl_statement in dcl_statement_list %}\n      {% call statement('dcl') %}\n        {{ dcl_statement }};\n      {% endcall %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_grant_sql": {"name": "clickhouse__get_grant_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_grant_sql", "macro_sql": "\n\n\n{%- macro clickhouse__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ on_cluster_clause()}} {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_revoke_sql": {"name": "clickhouse__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_revoke_sql", "macro_sql": "{%- macro clickhouse__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ on_cluster_clause()}} {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0111349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_or_create_relation": {"name": "clickhouse__get_or_create_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_or_create_relation", "macro_sql": "{% macro clickhouse__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set can_exchange = adapter.can_exchange(schema, type) %}\n  {%- set new_relation = api.Relation.create(\n      database=None,\n      schema=schema,\n      identifier=identifier,\n      type=type,\n      can_exchange=can_exchange\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0267787, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__get_database": {"name": "clickhouse__get_database", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__get_database", "macro_sql": "{% macro clickhouse__get_database(database) %}\n    {% call statement('get_database', fetch_result=True) %}\n        select name, engine, comment\n        from system.databases\n        where name = '{{ database }}'\n   {% endcall %}\n   {% do return(load_result('get_database').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.0267787, "supported_languages": null}, "macro.dbt_clickhouse.materialization_distributed_table_clickhouse": {"name": "materialization_distributed_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\distributed_table.sql", "original_file_path": "macros\\materializations\\distributed_table.sql", "unique_id": "macro.dbt_clickhouse.materialization_distributed_table_clickhouse", "macro_sql": "{% materialization distributed_table, adapter='clickhouse' %}\n  {%- set local_suffix = adapter.get_clickhouse_local_suffix() -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {% set existing_relation_local = existing_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if existing_relation is not none else none %}\n  {% set target_relation_local = target_relation.incorporate(path={\"identifier\": model['name'] + local_suffix}) if target_relation is not none else none %}\n\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation_local is not none %}\n    {%- set backup_relation_type = existing_relation_local.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation_local, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation_local) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n  {% set view_relation = default__make_temp_relation(target_relation, '__dbt_tmp') %}\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n  {{ drop_relation_if_exists(view_relation) }}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {% call statement('main') %}\n    {{ create_view_as(view_relation, sql) }}\n  {% endcall %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {% do run_query(create_empty_table_from_relation(target_relation_local, view_relation)) or '' %}\n    {% do run_query(create_distributed_table(target_relation, target_relation_local)) or '' %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {% do run_query(create_empty_table_from_relation(backup_relation, view_relation)) or '' %}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    {% do run_query(create_empty_table_from_relation(intermediate_relation, view_relation)) or '' %}\n    {{ adapter.rename_relation(existing_relation_local, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation_local) }}\n  {% endif %}\n  {% do run_query(clickhouse__insert_into(target_relation, sql)) or '' %}\n  {{ drop_relation_if_exists(view_relation) }}\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.default__make_temp_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.run_query", "macro.dbt_clickhouse.create_empty_table_from_relation", "macro.dbt_clickhouse.create_distributed_table", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.047325, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.create_distributed_table": {"name": "create_distributed_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\distributed_table.sql", "original_file_path": "macros\\materializations\\distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_distributed_table", "macro_sql": "{% macro create_distributed_table(relation, local_relation) %}\n   {%- set cluster = adapter.get_clickhouse_cluster_name()[1:-1] -%}\n   {%- set sharding = config.get('sharding_key') -%}\n\n    CREATE TABLE {{ relation }} {{ on_cluster_clause() }} AS {{ local_relation }}\n    ENGINE = Distributed('{{ cluster}}', '{{ relation.schema }}', '{{ local_relation.name }}'\n    {% if sharding is not none %}\n        , {{ sharding }}\n    {% endif %}\n    )\n {% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.047325, "supported_languages": null}, "macro.dbt_clickhouse.create_empty_table_from_relation": {"name": "create_empty_table_from_relation", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\distributed_table.sql", "original_file_path": "macros\\materializations\\distributed_table.sql", "unique_id": "macro.dbt_clickhouse.create_empty_table_from_relation", "macro_sql": "{% macro create_empty_table_from_relation(relation, source_relation) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set columns = adapter.get_columns_in_relation(source_relation) | list -%}\n\n  {%- set col_list = [] -%}\n  {% for col in columns %}\n    {{col_list.append(col.name + ' ' + col.data_type) or '' }}\n  {% endfor %}\n  {{ sql_header if sql_header is not none }}\n\n  create table {{ relation.include(database=False) }}\n  {{ on_cluster_clause() }} (\n      {{col_list | join(', ')}}\n  )\n\n  {{ engine_clause() }}\n  {{ order_cols(label=\"order by\") }}\n  {{ primary_key_clause(label=\"primary key\") }}\n  {{ partition_cols(label=\"partition by\") }}\n  {{ adapter.get_model_settings(model) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.primary_key_clause", "macro.dbt_clickhouse.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.047325, "supported_languages": null}, "macro.dbt_clickhouse.materialization_incremental_clickhouse": {"name": "materialization_incremental_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_clickhouse.materialization_incremental_clickhouse", "macro_sql": "{% materialization incremental, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {% if unique_key is not none and unique_key|length == 0 %}\n    {% set unique_key = none %}\n  {% endif %}\n  {% if unique_key is iterable and (unique_key is not string and unique_key is not mapping) %}\n     {% set unique_key = unique_key|join(', ') %}\n  {% endif %}\n  {%- set inserts_only = config.get('inserts_only') -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    -- No existing table, simply create a new one\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {% endcall %}\n\n  {% elif full_refresh_mode %}\n    -- Completely replacing the old table, so create a temporary table and then swap it\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {% endcall %}\n    {% set need_swap = true %}\n\n  {% elif inserts_only or unique_key is none -%}\n    -- There are no updates/deletes or duplicate keys are allowed.  Simply add all of the new rows to the existing\n    -- table. It is the user's responsibility to avoid duplicates.  Note that \"inserts_only\" is a ClickHouse adapter\n    -- specific configurable that is used to avoid creating an expensive intermediate table.\n    {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n    {% endcall %}\n\n  {% else %}\n    {% set schema_changes = none %}\n    {% set incremental_strategy = adapter.calculate_incremental_strategy(config.get('incremental_strategy'))  %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% if on_schema_change != 'ignore' %}\n      {%- set schema_changes = check_for_schema_changes(existing_relation, target_relation) -%}\n      {% if schema_changes['schema_changed'] and incremental_strategy in ('append', 'delete_insert') %}\n        {% set incremental_strategy = 'legacy' %}\n        {% do log('Schema changes detected, switching to legacy incremental strategy') %}\n      {% endif %}\n    {% endif %}\n    {% if incremental_strategy != 'delete_insert' and incremental_predicates %}\n      {% do exceptions.raise_compiler_error('Cannot apply incremental predicates with ' + incremental_strategy + ' strategy.') %}\n    {% endif %}\n    {% if incremental_strategy == 'legacy' %}\n      {% do clickhouse__incremental_legacy(existing_relation, intermediate_relation, schema_changes, unique_key) %}\n      {% set need_swap = true %}\n    {% elif incremental_strategy == 'delete_insert' %}\n      {% do clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% elif incremental_strategy == 'append' %}\n      {% call statement('main') %}\n        {{ clickhouse__insert_into(target_relation, sql) }}\n      {% endcall %}\n    {% endif %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% if existing_relation.can_exchange %}\n        {% do adapter.rename_relation(intermediate_relation, backup_relation) %}\n        {% do exchange_tables_atomic(backup_relation, target_relation) %}\n      {% else %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n        {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% endif %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.clickhouse__insert_into", "macro.dbt.check_for_schema_changes", "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1068268, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_clickhouse.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {%- set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) -%}\n    {% if not schema_changes_dict['schema_changed'] %}\n      {{ return }}\n    {% endif %}\n\n    {% if on_schema_change == 'fail' %}\n      {% set fail_msg %}\n          The source and target schemas on this incremental model are out of sync!\n          They can be reconciled in several ways:\n            - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n            - Re-run the incremental model with `full_refresh: True` to update the target schema.\n            - update the schema manually and re-run the process.\n      {% endset %}\n      {% do exceptions.raise_compiler_error(fail_msg) %}\n      {{ return }}\n    {% endif %}\n\n    {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1110582, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_legacy": {"name": "clickhouse__incremental_legacy", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_legacy", "macro_sql": "{% macro clickhouse__incremental_legacy(existing_relation, intermediate_relation, on_schema_change, unique_key) %}\n    -- First create a temporary table for all of the new data\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name'] + '__dbt_new_data'}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {% call statement('create_new_data_temp') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n    {% endcall %}\n\n    -- Next create another temporary table that will eventually be used to replace the existing table.  We can't\n    -- use the table just created in the previous step because we don't want to override any updated rows with\n    -- old rows when we insert the old data\n    {% call statement('main') %}\n       create table {{ intermediate_relation }} as {{ new_data_relation }}\n    {% endcall %}\n\n    -- Insert all the existing rows into the new temporary table, ignoring any rows that have keys in the \"new data\"\n    -- table.\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_existing_data') %}\n        insert into {{ intermediate_relation }} ({{ dest_cols_csv }})\n        select {{ dest_cols_csv }}\n        from {{ existing_relation }}\n          where ({{ unique_key }}) not in (\n            select {{ unique_key }}\n            from {{ new_data_relation }}\n          )\n       {{ adapter.get_model_settings(model) }}\n    {% endcall %}\n\n    -- Insert all of the new data into the temporary table\n    {% call statement('insert_new_data') %}\n     insert into {{ intermediate_relation }} ({{ dest_cols_csv }})\n        select {{ dest_cols_csv }}\n        from {{ new_data_relation }}\n      {{ adapter.get_model_settings(model) }}\n    {% endcall %}\n\n    {% do adapter.drop_relation(new_data_relation) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1110582, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__incremental_delete_insert": {"name": "clickhouse__incremental_delete_insert", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__incremental_delete_insert", "macro_sql": "{% macro clickhouse__incremental_delete_insert(existing_relation, unique_key, incremental_predicates) %}\n    {% set new_data_relation = existing_relation.incorporate(path={\"identifier\": model['name']\n       + '__dbt_new_data_' + invocation_id.replace('-', '_')}) %}\n    {{ drop_relation_if_exists(new_data_relation) }}\n    {% call statement('main') %}\n        {{ get_create_table_as_sql(False, new_data_relation, sql) }}\n    {% endcall %}\n    {% call statement('delete_existing_data') %}\n      delete from {{ existing_relation }} where ({{ unique_key }}) in (select {{ unique_key }}\n                                          from {{ new_data_relation }})\n      {%- if incremental_predicates %}\n        {% for predicate in incremental_predicates %}\n            and {{ predicate }}\n        {% endfor %}\n      {%- endif -%};\n    {% endcall %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(existing_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% call statement('insert_new_data') %}\n        insert into {{ existing_relation}} select {{ dest_cols_csv}} from {{ new_data_relation }}\n    {% endcall %}\n    {% do adapter.drop_relation(new_data_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1210785, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse_s3source": {"name": "clickhouse_s3source", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\s3.sql", "original_file_path": "macros\\materializations\\s3.sql", "unique_id": "macro.dbt_clickhouse.clickhouse_s3source", "macro_sql": "{% macro clickhouse_s3source(config_name='', bucket='', path='', fmt='', structure='',\n    aws_access_key_id='', aws_secret_access_key='', compression='') %}\n  {% if config_name and not config_name.lower().endswith('s3') %}\n    {{ exceptions.raise_compiler_error(\"S3 configuration should end with 's3'\") }}\n  {% endif %}\n  {% set s3config = config.get(config_name, {}) %}\n  {{ adapter.s3source_clause(\n    config_name=config_name,\n    s3_model_config=s3config,\n    bucket=bucket,\n    path=path,\n    fmt=fmt,\n    structure=structure,\n    aws_access_key_id=aws_access_key_id,\n    aws_secret_access_key=aws_secret_access_key,\n    compression=compression) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1226048, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__load_csv_rows": {"name": "clickhouse__load_csv_rows", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__load_csv_rows", "macro_sql": "{% macro clickhouse__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set data_sql = adapter.get_csv_data(agate_table) %}\n\n  {% set sql -%}\n    insert into {{ this.render() }} ({{ cols_sql }})\n    {{ adapter.get_model_settings(model) }}\n    format CSV\n    {{ data_sql }}\n  {%- endset %}\n\n  {% do adapter.add_query(sql, bindings=agate_table, abridge_sql_log=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1226048, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_csv_table": {"name": "clickhouse__create_csv_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_csv_table", "macro_sql": "{% macro clickhouse__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} {{ on_cluster_clause() }} (\n      {%- for col_name in agate_table.column_names -%}\n        {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n        {%- set type = column_override.get(col_name, inferred_type) -%}\n        {%- set column_name = (col_name | string) -%}\n          {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n      {%- endfor -%}\n    )\n    {{ engine_clause() }}\n    {{ order_cols(label='order by') }}\n    {{ partition_cols(label='partition by') }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1226048, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments": {"name": "clickhouse__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments", "macro_sql": "{% macro clickhouse__snapshot_hash_arguments(args) -%}\n  halfMD5({%- for arg in args -%}\n    coalesce(cast({{ arg }} as varchar ), '')\n    {% if not loop.last %} || '|' || {% endif %}\n  {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.138253, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__post_snapshot": {"name": "clickhouse__post_snapshot", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__post_snapshot", "macro_sql": "{% macro clickhouse__post_snapshot(staging_relation) %}\n    {{ drop_relation_if_exists(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.138253, "supported_languages": null}, "macro.dbt_clickhouse.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_clickhouse.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1402762, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql": {"name": "clickhouse__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_merge_sql", "macro_sql": "{% macro clickhouse__snapshot_merge_sql(target, source, insert_cols) -%}\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set valid_to_col = adapter.quote('dbt_valid_to') -%}\n\n  {%- set upsert = target ~ '__snapshot_upsert' -%}\n  {% call statement('create_upsert_relation') %}\n    create table if not exists {{ upsert }} as {{ target }}\n  {% endcall %}\n\n  {% call statement('insert_unchanged_data') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }}\n    where dbt_scd_id not in (\n      select {{ source }}.dbt_scd_id from {{ source }} \n    )\n  {% endcall %}\n\n {% call statement('insert_updated_and_deleted') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    with updates_and_deletes as (\n      select\n        dbt_scd_id,\n        dbt_valid_to\n      from {{ source }}\n      where dbt_change_type IN ('update', 'delete')\n    )\n    select {% for column in insert_cols %}\n      {%- if column == valid_to_col -%}\n        updates_and_deletes.dbt_valid_to as dbt_valid_to\n      {%- else -%}\n        target.{{ column }} as {{ column }}\n      {%- endif %} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ target }} target\n    join updates_and_deletes on target.dbt_scd_id = updates_and_deletes.dbt_scd_id;\n  {% endcall %}\n\n  {% call statement('insert_new') %}\n    insert into {{ upsert }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n      {{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }}\n    where {{ source }}.dbt_change_type IN ('insert');\n  {% endcall %}\n\n  {% if target.can_exchange %}\n    {% do exchange_tables_atomic(upsert, target) %}\n    {% call statement('drop_exchanged_relation') %}\n      drop table if exists {{ upsert }};\n    {% endcall %}\n  {% else %}\n    {% call statement('drop_target_relation') %}\n      drop table if exists {{ target }};\n    {% endcall %}\n    {% call statement('rename_upsert_relation') %}\n      rename table {{ upsert }} to {{ target }};\n    {% endcall %}\n  {% endif %}\n\n  {% do return ('select 1') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_clickhouse.exchange_tables_atomic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1402762, "supported_languages": null}, "macro.dbt_clickhouse.materialization_table_clickhouse": {"name": "materialization_table_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.materialization_table_clickhouse", "macro_sql": "{% materialization table, adapter='clickhouse' %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1613545, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.engine_clause": {"name": "engine_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.engine_clause", "macro_sql": "{% macro engine_clause() %}\n  engine = {{ config.get('engine', default='MergeTree()') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1613545, "supported_languages": null}, "macro.dbt_clickhouse.partition_cols": {"name": "partition_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.partition_cols", "macro_sql": "{% macro partition_cols(label) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1613545, "supported_languages": null}, "macro.dbt_clickhouse.primary_key_clause": {"name": "primary_key_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.primary_key_clause", "macro_sql": "{% macro primary_key_clause(label) %}\n  {%- set primary_key = config.get('primary_key', validator=validation.any[basestring]) -%}\n\n  {%- if primary_key is not none %}\n    {{ label }} {{ primary_key }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1613545, "supported_languages": null}, "macro.dbt_clickhouse.order_cols": {"name": "order_cols", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.order_cols", "macro_sql": "{% macro order_cols(label) %}\n  {%- set cols = config.get('order_by', validator=validation.any[list, basestring]) -%}\n  {%- set engine = config.get('engine', default='MergeTree()') -%}\n  {%- set supported = [\n    'HDFS',\n    'MaterializedPostgreSQL',\n    'S3',\n    'EmbeddedRocksDB',\n    'Hive'\n  ] -%}\n\n  {%- if 'MergeTree' in engine or engine in supported %}\n    {%- if cols is not none %}\n      {%- if cols is string -%}\n        {%- set cols = [cols] -%}\n      {%- endif -%}\n      {{ label }} (\n      {%- for item in cols -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n    {%- else %}\n      {{ label }} (tuple())\n    {%- endif %}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1703641, "supported_languages": null}, "macro.dbt_clickhouse.on_cluster_clause": {"name": "on_cluster_clause", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.on_cluster_clause", "macro_sql": "{% macro on_cluster_clause(label) %}\n  {% set active_cluster = adapter.get_clickhouse_cluster_name() %}\n  {%- if active_cluster is not none %}\n    {# Add trailing whitespace to avoid problems when this clause is not last #}\n    ON CLUSTER {{ active_cluster + ' ' }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1703641, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__create_table_as": {"name": "clickhouse__create_table_as", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__create_table_as", "macro_sql": "{% macro clickhouse__create_table_as(temporary, relation, sql) -%}\n    {% set create_table = create_table_or_empty(temporary, relation, sql) %}\n    {% if adapter.is_before_version('22.7.1.2484') -%}\n        {{ create_table }}\n    {%- else %}\n        {% call statement('create_table_empty') %}\n            {{ create_table }}\n        {% endcall %}\n        {{ clickhouse__insert_into(relation.include(database=False), sql) }}\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.create_table_or_empty", "macro.dbt.statement", "macro.dbt_clickhouse.clickhouse__insert_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1703641, "supported_languages": null}, "macro.dbt_clickhouse.create_table_or_empty": {"name": "create_table_or_empty", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.create_table_or_empty", "macro_sql": "{% macro create_table_or_empty(temporary, relation, sql) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    {% if temporary -%}\n        create temporary table {{ relation.name }}\n        engine Memory\n        {{ order_cols(label=\"order by\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ adapter.get_model_settings(model) }}\n    {%- else %}\n        create table {{ relation.include(database=False) }}\n        {{ on_cluster_clause()}}\n        {{ engine_clause() }}\n        {{ order_cols(label=\"order by\") }}\n        {{ primary_key_clause(label=\"primary key\") }}\n        {{ partition_cols(label=\"partition by\") }}\n        {{ adapter.get_model_settings(model) }}\n        {% if not adapter.is_before_version('22.7.1.2484') -%}\n            empty\n        {%- endif %}\n    {%- endif %}\n    as (\n        {{ sql }}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.order_cols", "macro.dbt_clickhouse.partition_cols", "macro.dbt_clickhouse.on_cluster_clause", "macro.dbt_clickhouse.engine_clause", "macro.dbt_clickhouse.primary_key_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1703641, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__insert_into": {"name": "clickhouse__insert_into", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__insert_into", "macro_sql": "{% macro clickhouse__insert_into(target_relation, sql) %}\n  {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n  insert into {{ target_relation }} ({{ dest_cols_csv }})\n  {{ sql }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.179383, "supported_languages": null}, "macro.dbt_clickhouse.materialization_view_clickhouse": {"name": "materialization_view_clickhouse", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_clickhouse.materialization_view_clickhouse", "macro_sql": "{%- materialization view, adapter='clickhouse' -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set backup_relation = none -%}\n  {%- set preexisting_backup_relation = none -%}\n  {%- set preexisting_intermediate_relation = none -%}\n\n  {% if existing_relation is not none %}\n    {%- set backup_relation_type = existing_relation.type -%}\n    {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n    {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n    {% if not existing_relation.can_exchange %}\n      {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n      {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n    {% endif %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if backup_relation is none %}\n    {{ log('Creating new relation ' + target_relation.name )}}\n    -- There is not existing relation, so we can just create\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(target_relation, sql) }}\n    {%- endcall %}\n  {% elif existing_relation.can_exchange %}\n    -- We can do an atomic exchange, so no need for an intermediate\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(backup_relation, sql) }}\n    {%- endcall %}\n    {% do exchange_tables_atomic(backup_relation, existing_relation) %}\n  {% else %}\n    -- We have to use an intermediate and rename accordingly\n    {% call statement('main') -%}\n      {{ get_create_view_as_sql(intermediate_relation, sql) }}\n    {%- endcall %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n  {% endif %}\n\n  -- cleanup\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_backup_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt_clickhouse.exchange_tables_atomic", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": ["sql"]}, "macro.dbt_clickhouse.clickhouse__test_relationships": {"name": "clickhouse__test_relationships", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__test_relationships", "macro_sql": "{% macro clickhouse__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\nsettings join_use_nulls = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__current_timestamp": {"name": "clickhouse__current_timestamp", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__current_timestamp", "macro_sql": "{% macro clickhouse__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time": {"name": "clickhouse__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__snapshot_string_as_time", "macro_sql": "{% macro clickhouse__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"toDateTime('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__any_value": {"name": "clickhouse__any_value", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__any_value", "macro_sql": "{% macro clickhouse__any_value(expression) -%}\n    any({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__bool_or": {"name": "clickhouse__bool_or", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__bool_or", "macro_sql": "{% macro clickhouse__bool_or(expression) -%}\n    any({{ expression }}) > 0\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__cast_bool_to_text": {"name": "clickhouse__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__cast_bool_to_text", "macro_sql": "{% macro clickhouse__cast_bool_to_text(field) %}\n    multiIf({{ field }} > 0, 'true', {{ field }} = 0, 'false', NULL)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__hash": {"name": "clickhouse__hash", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__hash", "macro_sql": "{% macro clickhouse__hash(field) -%}\n    lower(hex(MD5(toString({{ field }} ))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1899219, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__last_day": {"name": "clickhouse__last_day", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__last_day", "macro_sql": "\n\n\n{%- macro clickhouse__last_day(date, datepart) -%}\n    {{ dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__split_part": {"name": "clickhouse__split_part", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__split_part", "macro_sql": "{% macro clickhouse__split_part(string_text, delimiter_text, part_number) %}\n    splitByChar('{{delimiter_text}}', {{ string_text }})[{{ part_number }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__replace": {"name": "clickhouse__replace", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__replace", "macro_sql": "{% macro clickhouse__replace(field, old_chars, new_chars) %}\n   replaceAll({{ field }},'{{ old_chars }}','{{ new_chars }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__listagg": {"name": "clickhouse__listagg", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__listagg", "macro_sql": "{% macro clickhouse__listagg(measure, delimiter_text, order_by_clause, limit_num) %}\n  {{ exceptions.raise_compiler_error(\n    'ClickHouse does not support the listagg function.  See the groupArray function instead')\n    }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_construct": {"name": "clickhouse__array_construct", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_construct", "macro_sql": "{% macro clickhouse__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    emptyArray{{data_type}}()\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_append": {"name": "clickhouse__array_append", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_append", "macro_sql": "{% macro clickhouse__array_append(array, new_element) -%}\n    arrayPushBack({{ array }}, {{ new_element }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt_clickhouse.clickhouse__array_concat": {"name": "clickhouse__array_concat", "resource_type": "macro", "package_name": "dbt_clickhouse", "path": "macros\\utils\\utils.sql", "original_file_path": "macros\\utils\\utils.sql", "unique_id": "macro.dbt_clickhouse.clickhouse__array_concat", "macro_sql": "{% macro clickhouse__array_concat(array_1, array_2) -%}\n   arrayConcat({{ array_1 }}, {{ array_2 }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.1979349, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.204068, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2140813, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2140813, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2140813, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2140813, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2180932, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2342448, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.24977, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.24977, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.24977, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.24977, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.24977, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2556932, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2567182, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2577188, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2577188, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2587156, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.259715, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.261235, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.26225, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2632546, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.26426, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2655237, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2732453, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2742493, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2742493, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2752478, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.276247, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2767568, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2777696, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2777696, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2787688, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2787688, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.279767, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.280767, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2817724, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2827656, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2837706, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2847738, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2857773, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.287219, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.2942293, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3027499, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3027499, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3027499, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3027499, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3113275, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.318845, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.318845, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3221622, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.332197, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.332197, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.332197, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.332197, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3347182, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3402078, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3402078, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3402078, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3402078, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3507476, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.36126, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3693073, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3693073, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3693073, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3828244, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3853412, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3853412, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.3994515, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4025295, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4095678, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4095678, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4146016, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4146016, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4146016, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4186213, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.419671, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4201996, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4297547, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4378138, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4398494, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4398494, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4398494, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4398494, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4453907, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4453907, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4464371, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4494424, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4614751, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.467949, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.478001, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.4939277, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5044692, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5095072, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5095072, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5095072, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5095072, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5271537, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5271537, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5271537, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5336769, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5411925, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5411925, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5411925, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5411925, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5411925, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5507174, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5572517, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5572517, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5572517, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5663576, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5663576, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5663576, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5729175, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5729175, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.578969, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.578969, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5824943, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5824943, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5824943, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5824943, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5824943, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5890164, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5895565, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5895565, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5895565, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5895565, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5895565, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.5955887, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6021197, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6021197, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6021197, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6051605, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6101792, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6112149, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6112149, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6112149, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6112149, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6112149, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6154044, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.620921, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.620921, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.620921, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.620921, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.620921, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.624452, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.624452, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.624452, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.624452, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6294932, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6357636, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6367984, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_clickhouse.clickhouse__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt_utils.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "unique_id": "macro.dbt_utils.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "unique_id": "macro.dbt_utils.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "unique_id": "macro.dbt_utils.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "unique_id": "macro.dbt_utils.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.644817, "supported_languages": null}, "macro.dbt_utils.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "unique_id": "macro.dbt_utils.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6508505, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "unique_id": "macro.dbt_utils.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6508505, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "unique_id": "macro.dbt_utils.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6508505, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "unique_id": "macro.dbt_utils.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6508505, "supported_languages": null}, "macro.dbt_utils.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "unique_id": "macro.dbt_utils.array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "unique_id": "macro.dbt_utils.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "unique_id": "macro.dbt_utils.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "unique_id": "macro.dbt_utils.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "unique_id": "macro.dbt_utils.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"name": "cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "unique_id": "macro.dbt_utils.cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"name": "default__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "unique_id": "macro.dbt_utils.default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6528895, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"name": "postgres__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6619112, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"name": "redshift__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6619112, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"name": "bigquery__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6619112, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6619112, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.665461, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.665461, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.665461, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.665461, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6679962, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6679962, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "unique_id": "macro.dbt_utils.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "unique_id": "macro.dbt_utils.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_clickhouse.clickhouse__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "unique_id": "macro.dbt_utils.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "unique_id": "macro.dbt_utils.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_clickhouse.clickhouse__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_clickhouse.clickhouse__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6690166, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6851933, "supported_languages": null}, "macro.dbt_utils.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6851933, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6851933, "supported_languages": null}, "macro.dbt_utils.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6872194, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.6872194, "supported_languages": null}, "macro.dbt_utils.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "unique_id": "macro.dbt_utils.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.except": {"name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_clickhouse.clickhouse__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.691062, "supported_languages": null}, "macro.dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.700605, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7016273, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7016273, "supported_languages": null}, "macro.dbt_utils.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7016273, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7016273, "supported_languages": null}, "macro.dbt_utils.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_clickhouse.clickhouse__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.length": {"name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "unique_id": "macro.dbt_utils.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "unique_id": "macro.dbt_utils.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_clickhouse.clickhouse__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.position": {"name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_clickhouse.clickhouse__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.705674, "supported_languages": null}, "macro.dbt_utils.right": {"name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.716726, "supported_languages": null}, "macro.dbt_utils.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.716726, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7192519, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7192519, "supported_languages": null}, "macro.dbt_utils.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7192519, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_clickhouse.clickhouse__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7227926, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"name": "xdb_deprecation_warning", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "unique_id": "macro.dbt_utils.xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"name": "xdb_deprecation_warning_without_replacement", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7238317, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.73285, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7345831, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7394624, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7425096, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7465587, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7470684, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7485971, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7485971, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7485971, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7485971, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.764294, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7667823, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7667823, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7667823, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7667823, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7667823, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7773314, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7773314, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7803547, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7803547, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7803547, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.784506, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7880442, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7900748, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7910619, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7920623, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7930608, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.794069, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7955964, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.798133, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.7991626, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.800166, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8030453, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8050601, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8060672, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.807068, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8080633, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8110662, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8120618, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8221753, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8221753, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8297093, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8297093, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8523924, "supported_languages": ["sql"]}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8523924, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8523924, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8523924, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8523924, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8639705, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8675086, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8675086, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8675086, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8675086, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8675086, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8725493, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8730795, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8730795, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8730795, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.8730795, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9410646, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9410646, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.943606, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9466617, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9466617, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9466617, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9522128, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9522128, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9557638, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9588106, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9623675, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9634237, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9634237, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9634237, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9684749, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9690425, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9795759, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.981614, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.981614, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.981614, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.981614, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.981614, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9891632, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9891632, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9891632, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9891632, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.994197, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256680.9967272, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.000261, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.000261, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.008301, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.016895, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.016895, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.0264425, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.0264425, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.0264425, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.035018, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.0425465, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1692256681.0425465, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.gulliver.goods_movement_income": [], "model.gulliver.goods_movement_incomegoods": [], "model.gulliver.goods_movement_outgo": [], "model.gulliver.goods_movement_outgogoods": [], "model.gulliver.goods_movement_outgoodschange": [], "model.gulliver.goods_movement_relationgoods": [], "model.gulliver.goods_movement_type1": [], "model.gulliver.master_data_agreement": [], "model.gulliver.master_data_assortment": [], "model.gulliver.master_data_contractor": [], "model.gulliver.master_data_division": [], "model.gulliver.master_data_divisionaddparam": [], "model.gulliver.master_data_division_group1": [], "model.gulliver.master_data_division_group2": [], "model.gulliver.master_data_division_placement": [], "model.gulliver.master_data_federaldistrict": [], "model.gulliver.master_data_group1": [], "model.gulliver.master_data_group2": [], "model.gulliver.master_data_group3": [], "model.gulliver.master_data_group4": [], "model.gulliver.master_data_group5": [], "model.gulliver.cheq_and_disc_cheq": ["model.gulliver.master_data_division_placement"], "model.gulliver.cheq_and_disc_cheq_2": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_disc_by_code"], "model.gulliver.cheq_and_disc_cheq_disc1": ["model.gulliver.cheq_and_disc_cheq"], "model.gulliver.cheq_and_disc_cheq_disc_all": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq_disc1", "model.gulliver.cheq_and_disc_cheq_disc1"], "model.gulliver.cheq_and_disc_cheq_disc_all_2": ["model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq_lost_codes", "model.gulliver.cheq_and_disc_cheq_lost_codes"], "model.gulliver.cheq_and_disc_cheq_lost_codes": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq_disc_all"], "model.gulliver.cheq_and_disc_cheq_total": ["model.gulliver.cheq_and_disc_cheq_2", "model.gulliver.cheq_and_disc_disc_total"], "model.gulliver.cheq_and_disc_disc_by_cheq": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_cheq_disc_all_2"], "model.gulliver.cheq_and_disc_disc_by_cheq_sum": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_disc_by_cheq"], "model.gulliver.cheq_and_disc_disc_by_code": ["model.gulliver.cheq_and_disc_cheq_disc_all_2"], "model.gulliver.cheq_and_disc_disc_by_code_sum": ["model.gulliver.cheq_and_disc_cheq", "model.gulliver.cheq_and_disc_disc_by_code"], "model.gulliver.cheq_and_disc_disc_total": ["model.gulliver.cheq_and_disc_disc_by_cheq_sum", "model.gulliver.cheq_and_disc_disc_by_cheq_sum", "model.gulliver.cheq_and_disc_disc_by_code_sum", "model.gulliver.cheq_and_disc_disc_by_code_sum"], "model.gulliver.orders": [], "model.gulliver.all_outgo_goods": ["model.gulliver.goods_movement_incomegoods", "model.gulliver.goods_movement_outgo", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_relationgoods"], "model.gulliver.outgo_goods_change_list": ["model.gulliver.all_outgo_goods", "model.gulliver.goods_movement_outgoodschange"], "model.gulliver.outgo_goods_need_change": ["model.gulliver.all_outgo_goods", "model.gulliver.outgo_goods_change_list"], "model.gulliver.outgo_goods_no_need_change": ["model.gulliver.all_outgo_goods", "model.gulliver.outgo_goods_change_list"], "model.gulliver.sale_with_outgo_goods_change_total": ["model.gulliver.outgo_goods_no_need_change"], "model.gulliver.simple_rest": ["model.gulliver.goods_movement_income", "model.gulliver.goods_movement_incomegoods", "model.gulliver.goods_movement_outgo", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_relationgoods", "model.gulliver.master_data_assortment", "model.gulliver.master_data_division"], "model.gulliver.binlabel_otbor_hranenie_new": ["model.gulliver.itog", "model.gulliver.itog", "model.gulliver.itog"], "model.gulliver.binloc": [], "model.gulliver.binmstr": [], "model.gulliver.itog": ["model.gulliver.binloc", "model.gulliver.binloc", "model.gulliver.binloc", "model.gulliver.binmstr", "model.gulliver.binmstr", "model.gulliver.binmstr"], "model.gulliver.Rep_PlanFakt": ["model.gulliver.service_procent_zone", "model.gulliver.service_procent_zone", "model.gulliver.shipline_all"], "model.gulliver.service_procent_zone": [], "model.gulliver.shipline_all": [], "model.gulliver.sp_web_rep_level_service_procent": ["model.gulliver.Rep_PlanFakt"], "model.gulliver.sp_web_rep_otbor_position": ["model.gulliver.tmp_contractor", "model.gulliver.tmp_contractor2", "model.gulliver.tmp_pickingtmp", "model.gulliver.tmp_pickingtmp", "model.gulliver.tmp_prod", "model.gulliver.tmp_prod"], "model.gulliver.tmp_contractor": [], "model.gulliver.tmp_contractor2": [], "model.gulliver.tmp_pickingtmp": ["model.gulliver.wms_picking_total"], "model.gulliver.tmp_prod": [], "model.gulliver.cte_otborstroki": ["model.gulliver.tmp_rep_otborstroki"], "model.gulliver.cte_shortstroki": ["model.gulliver.tmp_rep_shortstroki"], "model.gulliver.cte_zakaz": ["model.gulliver.tmp_rep_planfakt"], "model.gulliver.cte_zakazstroki": ["model.gulliver.cte_zakaz"], "model.gulliver.sp_web_rep_otbor_stroki_test": ["model.gulliver.cte_otborstroki", "model.gulliver.cte_shortstroki", "model.gulliver.cte_zakazstroki"], "model.gulliver.tmp_rep_otborstroki": ["model.gulliver.tmp_tmp_picking"], "model.gulliver.tmp_rep_planfakt": ["model.gulliver.tmp_rep_otborstroki", "model.gulliver.tmp_rep_otborstroki"], "model.gulliver.tmp_rep_shortstroki": ["model.gulliver.tmp_rep_otborstroki"], "model.gulliver.tmp_tmp_picking": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_consolidate": ["model.gulliver.wms_totlabels"], "model.gulliver.wms_gm_plan": [], "model.gulliver.wms_gm_plan1": ["model.gulliver.wms_gm_plan", "model.gulliver.wms_gm_plan"], "model.gulliver.wms_gm_plan2": ["model.gulliver.wms_gm_plan1"], "model.gulliver.wms_otgruzka_final": ["model.gulliver.wms_otgruzka_itog2", "model.gulliver.wms_picking_tmp2"], "model.gulliver.wms_otgruzka_itog1": ["model.gulliver.wms_consolidate", "model.gulliver.wms_gm_plan2"], "model.gulliver.wms_otgruzka_itog2": ["model.gulliver.wms_otgruzka_itog1"], "model.gulliver.wms_picking_tmp2": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_shipdetl_all": [], "model.gulliver.wms_sum_by_totlabels": [], "model.gulliver.wms_sum_by_totlabels_ship": [], "model.gulliver.wms_totlabels": ["model.gulliver.wms_sum_by_totlabels", "model.gulliver.wms_sum_by_totlabels_ship", "model.gulliver.wms_sum_by_totlabels_ship"], "model.gulliver.wms_picking_egais": ["model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_picking_egais_detailed": ["model.gulliver.wms_tasks_by_sklad_detailed"], "model.gulliver.wms_picking_frov": ["model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_picking_frov_detailed": ["model.gulliver.wms_tasks_by_sklad_detailed", "model.gulliver.wms_tasks_by_sklad_detailed"], "model.gulliver.wms_picking_suh": ["model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_picking_suh_detailed": ["model.gulliver.wms_tasks_by_sklad_detailed"], "model.gulliver.wms_picking_temp": ["model.gulliver.wms_rf_log_all", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_picking_temp_detailed": ["model.gulliver.wms_rf_log_all", "model.gulliver.wms_rf_log_all", "model.gulliver.wms_tasks_by_sklad", "model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_picking_total": ["model.gulliver.wms_picking_egais", "model.gulliver.wms_picking_frov", "model.gulliver.wms_picking_suh", "model.gulliver.wms_picking_temp"], "model.gulliver.wms_picking_total_detailed": ["model.gulliver.wms_picking_egais_detailed", "model.gulliver.wms_picking_frov_detailed", "model.gulliver.wms_picking_suh_detailed", "model.gulliver.wms_picking_temp_detailed"], "model.gulliver.wms_rf_log_all": [], "model.gulliver.wms_tasks": ["model.gulliver.wms_tmp_head_new", "model.gulliver.wms_tmp_head_new"], "model.gulliver.wms_tasks2": [], "model.gulliver.wms_tasks_by_sklad": ["model.gulliver.wms_tasks"], "model.gulliver.wms_tasks_by_sklad_detailed": ["model.gulliver.wms_tasks2", "model.gulliver.wms_tasks_detailed"], "model.gulliver.wms_tasks_detailed": ["model.gulliver.wms_tasks2", "model.gulliver.wms_tasks2"], "model.gulliver.wms_tmp_head_new": [], "model.gulliver.trade_stat": ["model.gulliver.master_data_division", "model.gulliver.master_data_division_group1", "model.gulliver.master_data_division_group2", "model.gulliver.trade_stat_buyers", "model.gulliver.trade_stat_discounts", "model.gulliver.trade_stat_discounts", "model.gulliver.trade_stat_doc_ret", "model.gulliver.trade_stat_doc_ret", "model.gulliver.trade_stat_outgo_goods", "model.gulliver.trade_stat_outgo_goods"], "model.gulliver.trade_stat_buyers": ["model.gulliver.master_data_division"], "model.gulliver.trade_stat_discounts": [], "model.gulliver.trade_stat_doc_ret": ["model.gulliver.goods_movement_income", "model.gulliver.goods_movement_incomegoods"], "model.gulliver.trade_stat_history": ["model.gulliver.trade_stat", "model.gulliver.trade_stat", "model.gulliver.trade_stat"], "model.gulliver.trade_stat_outgo_goods": ["model.gulliver.goods_movement_incomegoods", "model.gulliver.goods_movement_outgo", "model.gulliver.goods_movement_outgogoods", "model.gulliver.goods_movement_relationgoods"], "model.gulliver.trade_stat2": ["model.gulliver.sale_with_outgo_goods_change_total", "model.gulliver.trade_stat2_doc_ret_prepare"], "model.gulliver.trade_stat2_cheq": ["model.gulliver.cheq_and_disc_cheq_total", "model.gulliver.trade_stat2", "model.gulliver.trade_stat2_sale"], "model.gulliver.trade_stat2_doc_ret_prepare": ["model.gulliver.goods_movement_income", "model.gulliver.goods_movement_incomegoods"], "model.gulliver.trade_stat2_final": ["model.gulliver.master_data_assortment", "model.gulliver.master_data_division", "model.gulliver.master_data_division_group1", "model.gulliver.master_data_division_group2", "model.gulliver.master_data_divisionaddparam"], "model.gulliver.trade_stat2_ret": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_cheq", "model.gulliver.trade_stat2_doc_ret_prepare"], "model.gulliver.trade_stat2_ret_sum_prime": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_ret"], "model.gulliver.trade_stat2_sale": ["model.gulliver.sale_with_outgo_goods_change_total", "model.gulliver.trade_stat2", "model.gulliver.trade_stat2"], "model.gulliver.trade_stat2_total": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_ret_sum_prime"], "operation.gulliver.gulliver-on-run-end-0": []}, "child_map": {"model.gulliver.goods_movement_income": ["model.gulliver.simple_rest", "model.gulliver.trade_stat2_doc_ret_prepare", "model.gulliver.trade_stat_doc_ret"], "model.gulliver.goods_movement_incomegoods": ["model.gulliver.all_outgo_goods", "model.gulliver.simple_rest", "model.gulliver.trade_stat2_doc_ret_prepare", "model.gulliver.trade_stat_doc_ret", "model.gulliver.trade_stat_outgo_goods"], "model.gulliver.goods_movement_outgo": ["model.gulliver.all_outgo_goods", "model.gulliver.simple_rest", "model.gulliver.trade_stat_outgo_goods"], "model.gulliver.goods_movement_outgogoods": ["model.gulliver.all_outgo_goods", "model.gulliver.simple_rest", "model.gulliver.trade_stat_outgo_goods"], "model.gulliver.goods_movement_outgoodschange": ["model.gulliver.outgo_goods_change_list"], "model.gulliver.goods_movement_relationgoods": ["model.gulliver.all_outgo_goods", "model.gulliver.simple_rest", "model.gulliver.trade_stat_outgo_goods"], "model.gulliver.goods_movement_type1": [], "model.gulliver.master_data_agreement": [], "model.gulliver.master_data_assortment": ["model.gulliver.simple_rest", "model.gulliver.trade_stat2_final"], "model.gulliver.master_data_contractor": [], "model.gulliver.master_data_division": ["model.gulliver.simple_rest", "model.gulliver.trade_stat", "model.gulliver.trade_stat2_final", "model.gulliver.trade_stat_buyers"], "model.gulliver.master_data_divisionaddparam": ["model.gulliver.trade_stat2_final"], "model.gulliver.master_data_division_group1": ["model.gulliver.trade_stat", "model.gulliver.trade_stat2_final"], "model.gulliver.master_data_division_group2": ["model.gulliver.trade_stat", "model.gulliver.trade_stat2_final"], "model.gulliver.master_data_division_placement": ["model.gulliver.cheq_and_disc_cheq"], "model.gulliver.master_data_federaldistrict": [], "model.gulliver.master_data_group1": [], "model.gulliver.master_data_group2": [], "model.gulliver.master_data_group3": [], "model.gulliver.master_data_group4": [], "model.gulliver.master_data_group5": [], "model.gulliver.cheq_and_disc_cheq": ["model.gulliver.cheq_and_disc_cheq_2", "model.gulliver.cheq_and_disc_cheq_disc1", "model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq_lost_codes", "model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_disc_by_cheq_sum", "model.gulliver.cheq_and_disc_disc_by_code_sum"], "model.gulliver.cheq_and_disc_cheq_2": ["model.gulliver.cheq_and_disc_cheq_total"], "model.gulliver.cheq_and_disc_cheq_disc1": ["model.gulliver.cheq_and_disc_cheq_disc_all", "model.gulliver.cheq_and_disc_cheq_disc_all"], "model.gulliver.cheq_and_disc_cheq_disc_all": ["model.gulliver.cheq_and_disc_cheq_disc_all_2", "model.gulliver.cheq_and_disc_cheq_disc_all_2", "model.gulliver.cheq_and_disc_cheq_lost_codes"], "model.gulliver.cheq_and_disc_cheq_disc_all_2": ["model.gulliver.cheq_and_disc_disc_by_cheq", "model.gulliver.cheq_and_disc_disc_by_code"], "model.gulliver.cheq_and_disc_cheq_lost_codes": ["model.gulliver.cheq_and_disc_cheq_disc_all_2", "model.gulliver.cheq_and_disc_cheq_disc_all_2"], "model.gulliver.cheq_and_disc_cheq_total": ["model.gulliver.trade_stat2_cheq"], "model.gulliver.cheq_and_disc_disc_by_cheq": ["model.gulliver.cheq_and_disc_cheq_2", "model.gulliver.cheq_and_disc_disc_by_cheq_sum"], "model.gulliver.cheq_and_disc_disc_by_cheq_sum": ["model.gulliver.cheq_and_disc_disc_total", "model.gulliver.cheq_and_disc_disc_total"], "model.gulliver.cheq_and_disc_disc_by_code": ["model.gulliver.cheq_and_disc_cheq_2", "model.gulliver.cheq_and_disc_disc_by_code_sum"], "model.gulliver.cheq_and_disc_disc_by_code_sum": ["model.gulliver.cheq_and_disc_disc_total", "model.gulliver.cheq_and_disc_disc_total"], "model.gulliver.cheq_and_disc_disc_total": ["model.gulliver.cheq_and_disc_cheq_total"], "model.gulliver.orders": [], "model.gulliver.all_outgo_goods": ["model.gulliver.outgo_goods_change_list", "model.gulliver.outgo_goods_need_change", "model.gulliver.outgo_goods_no_need_change"], "model.gulliver.outgo_goods_change_list": ["model.gulliver.outgo_goods_need_change", "model.gulliver.outgo_goods_no_need_change"], "model.gulliver.outgo_goods_need_change": [], "model.gulliver.outgo_goods_no_need_change": ["model.gulliver.sale_with_outgo_goods_change_total"], "model.gulliver.sale_with_outgo_goods_change_total": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_sale"], "model.gulliver.simple_rest": [], "model.gulliver.binlabel_otbor_hranenie_new": [], "model.gulliver.binloc": ["model.gulliver.itog", "model.gulliver.itog", "model.gulliver.itog"], "model.gulliver.binmstr": ["model.gulliver.itog", "model.gulliver.itog", "model.gulliver.itog"], "model.gulliver.itog": ["model.gulliver.binlabel_otbor_hranenie_new", "model.gulliver.binlabel_otbor_hranenie_new", "model.gulliver.binlabel_otbor_hranenie_new"], "model.gulliver.Rep_PlanFakt": ["model.gulliver.sp_web_rep_level_service_procent"], "model.gulliver.service_procent_zone": ["model.gulliver.Rep_PlanFakt", "model.gulliver.Rep_PlanFakt"], "model.gulliver.shipline_all": ["model.gulliver.Rep_PlanFakt"], "model.gulliver.sp_web_rep_level_service_procent": [], "model.gulliver.sp_web_rep_otbor_position": [], "model.gulliver.tmp_contractor": ["model.gulliver.sp_web_rep_otbor_position"], "model.gulliver.tmp_contractor2": ["model.gulliver.sp_web_rep_otbor_position"], "model.gulliver.tmp_pickingtmp": ["model.gulliver.sp_web_rep_otbor_position", "model.gulliver.sp_web_rep_otbor_position"], "model.gulliver.tmp_prod": ["model.gulliver.sp_web_rep_otbor_position", "model.gulliver.sp_web_rep_otbor_position"], "model.gulliver.cte_otborstroki": ["model.gulliver.sp_web_rep_otbor_stroki_test"], "model.gulliver.cte_shortstroki": ["model.gulliver.sp_web_rep_otbor_stroki_test"], "model.gulliver.cte_zakaz": ["model.gulliver.cte_zakazstroki"], "model.gulliver.cte_zakazstroki": ["model.gulliver.sp_web_rep_otbor_stroki_test"], "model.gulliver.sp_web_rep_otbor_stroki_test": [], "model.gulliver.tmp_rep_otborstroki": ["model.gulliver.cte_otborstroki", "model.gulliver.tmp_rep_planfakt", "model.gulliver.tmp_rep_planfakt", "model.gulliver.tmp_rep_shortstroki"], "model.gulliver.tmp_rep_planfakt": ["model.gulliver.cte_zakaz"], "model.gulliver.tmp_rep_shortstroki": ["model.gulliver.cte_shortstroki"], "model.gulliver.tmp_tmp_picking": ["model.gulliver.tmp_rep_otborstroki"], "model.gulliver.wms_consolidate": ["model.gulliver.wms_otgruzka_itog1"], "model.gulliver.wms_gm_plan": ["model.gulliver.wms_gm_plan1", "model.gulliver.wms_gm_plan1"], "model.gulliver.wms_gm_plan1": ["model.gulliver.wms_gm_plan2"], "model.gulliver.wms_gm_plan2": ["model.gulliver.wms_otgruzka_itog1"], "model.gulliver.wms_otgruzka_final": [], "model.gulliver.wms_otgruzka_itog1": ["model.gulliver.wms_otgruzka_itog2"], "model.gulliver.wms_otgruzka_itog2": ["model.gulliver.wms_otgruzka_final"], "model.gulliver.wms_picking_tmp2": ["model.gulliver.wms_otgruzka_final"], "model.gulliver.wms_shipdetl_all": [], "model.gulliver.wms_sum_by_totlabels": ["model.gulliver.wms_totlabels"], "model.gulliver.wms_sum_by_totlabels_ship": ["model.gulliver.wms_totlabels", "model.gulliver.wms_totlabels"], "model.gulliver.wms_totlabels": ["model.gulliver.wms_consolidate"], "model.gulliver.wms_picking_egais": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_picking_egais_detailed": ["model.gulliver.wms_picking_total_detailed"], "model.gulliver.wms_picking_frov": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_picking_frov_detailed": ["model.gulliver.wms_picking_total_detailed"], "model.gulliver.wms_picking_suh": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_picking_suh_detailed": ["model.gulliver.wms_picking_total_detailed"], "model.gulliver.wms_picking_temp": ["model.gulliver.wms_picking_total"], "model.gulliver.wms_picking_temp_detailed": ["model.gulliver.wms_picking_total_detailed"], "model.gulliver.wms_picking_total": ["model.gulliver.tmp_pickingtmp", "model.gulliver.tmp_tmp_picking", "model.gulliver.wms_picking_tmp2"], "model.gulliver.wms_picking_total_detailed": [], "model.gulliver.wms_rf_log_all": ["model.gulliver.wms_picking_temp", "model.gulliver.wms_picking_temp", "model.gulliver.wms_picking_temp_detailed", "model.gulliver.wms_picking_temp_detailed"], "model.gulliver.wms_tasks": ["model.gulliver.wms_tasks_by_sklad"], "model.gulliver.wms_tasks2": ["model.gulliver.wms_tasks_by_sklad_detailed", "model.gulliver.wms_tasks_detailed", "model.gulliver.wms_tasks_detailed"], "model.gulliver.wms_tasks_by_sklad": ["model.gulliver.wms_picking_egais", "model.gulliver.wms_picking_frov", "model.gulliver.wms_picking_frov", "model.gulliver.wms_picking_suh", "model.gulliver.wms_picking_temp", "model.gulliver.wms_picking_temp", "model.gulliver.wms_picking_temp_detailed", "model.gulliver.wms_picking_temp_detailed"], "model.gulliver.wms_tasks_by_sklad_detailed": ["model.gulliver.wms_picking_egais_detailed", "model.gulliver.wms_picking_frov_detailed", "model.gulliver.wms_picking_frov_detailed", "model.gulliver.wms_picking_suh_detailed"], "model.gulliver.wms_tasks_detailed": ["model.gulliver.wms_tasks_by_sklad_detailed"], "model.gulliver.wms_tmp_head_new": ["model.gulliver.wms_tasks", "model.gulliver.wms_tasks"], "model.gulliver.trade_stat": ["model.gulliver.trade_stat_history", "model.gulliver.trade_stat_history", "model.gulliver.trade_stat_history"], "model.gulliver.trade_stat_buyers": ["model.gulliver.trade_stat"], "model.gulliver.trade_stat_discounts": ["model.gulliver.trade_stat", "model.gulliver.trade_stat"], "model.gulliver.trade_stat_doc_ret": ["model.gulliver.trade_stat", "model.gulliver.trade_stat"], "model.gulliver.trade_stat_history": [], "model.gulliver.trade_stat_outgo_goods": ["model.gulliver.trade_stat", "model.gulliver.trade_stat"], "model.gulliver.trade_stat2": ["model.gulliver.trade_stat2_cheq", "model.gulliver.trade_stat2_ret", "model.gulliver.trade_stat2_ret_sum_prime", "model.gulliver.trade_stat2_sale", "model.gulliver.trade_stat2_sale", "model.gulliver.trade_stat2_total"], "model.gulliver.trade_stat2_cheq": ["model.gulliver.trade_stat2_ret"], "model.gulliver.trade_stat2_doc_ret_prepare": ["model.gulliver.trade_stat2", "model.gulliver.trade_stat2_ret"], "model.gulliver.trade_stat2_final": [], "model.gulliver.trade_stat2_ret": ["model.gulliver.trade_stat2_ret_sum_prime"], "model.gulliver.trade_stat2_ret_sum_prime": ["model.gulliver.trade_stat2_total"], "model.gulliver.trade_stat2_sale": ["model.gulliver.trade_stat2_cheq"], "model.gulliver.trade_stat2_total": [], "operation.gulliver.gulliver-on-run-end-0": []}}